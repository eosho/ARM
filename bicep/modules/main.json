{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.4.1124.51302",
      "templateHash": "13380206004991655578"
    }
  },
  "parameters": {
    "environmentName": {
      "type": "string",
      "allowedValues": [
        "int",
        "dev",
        "qa",
        "prod"
      ],
      "metadata": {
        "description": "The name of the deployment environment. Used for naming convention"
      }
    },
    "projectName": {
      "type": "string",
      "defaultValue": "cust-wap",
      "metadata": {
        "description": "Name of the project. Used for naming convention"
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {
        "DeptName": "Innovation",
        "LOB": "Innovation",
        "DeployDate": "01-07-2022",
        "Deployer": "Rudi Landolt",
        "CostCenter": "IT Innovation 5001",
        "CostCode": "1000608610",
        "LegalSubEntity": "Walgreen Co",
        "Sensitivity": "Non-Sensitive",
        "SubDivision": "Innovation",
        "Department": "Innovation",
        "SenType": "Not Applicable"
      },
      "metadata": {
        "description": "Azure resource tags metadata"
      }
    },
    "resourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "The name of the resource group for deployment."
      }
    },
    "virtualNetworkName": {
      "type": "string",
      "metadata": {
        "description": "The name of the virtual network."
      }
    },
    "virtualNetworkResourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "The name of the virtual network resource group."
      }
    },
    "apimApis": {
      "type": "array",
      "metadata": {
        "description": "APIM APIs."
      }
    },
    "apimPolicies": {
      "type": "array",
      "metadata": {
        "description": "APIM Policies."
      }
    },
    "apimAuthorizationServers": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. Authorization servers."
      }
    },
    "apimBackends": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. Backends."
      }
    },
    "apimCaches": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. Caches."
      }
    },
    "apimIdentityProviders": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. Identity providers."
      }
    },
    "apimNamedValues": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. Named values."
      }
    },
    "apimPortalSettings": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. Portal settings."
      }
    },
    "apimProducts": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. Products."
      }
    },
    "apimSubscriptions": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. Subscriptions."
      }
    },
    "apimResourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "Name of the shared APIM resource group."
      }
    },
    "apimPublisherEmail": {
      "type": "string",
      "defaultValue": "admin@contoso.com",
      "metadata": {
        "description": "The email address of the owner of the service"
      }
    },
    "apimPublisherName": {
      "type": "string",
      "defaultValue": "Contoso",
      "metadata": {
        "description": "The name of the publisher."
      }
    },
    "apimSku": {
      "type": "string",
      "defaultValue": "Developer",
      "allowedValues": [
        "Consumption",
        "Developer",
        "Basic",
        "Standard",
        "Premium"
      ],
      "metadata": {
        "description": "Optional. The pricing tier of this API Management service."
      }
    },
    "sharedResourceGroupName": {
      "type": "string",
      "defaultValue": "rpu-nprod-digital-eastus2-ase-02-rg",
      "metadata": {
        "description": "Name of the shared resource group."
      }
    },
    "appServiceEnvironmentName": {
      "type": "string",
      "defaultValue": "rpu-nprod-innov-eti-eastus2-asev3-01",
      "metadata": {
        "description": "Name of the shared App Service Environment."
      }
    },
    "appServicePlanName": {
      "type": "string",
      "defaultValue": "nprod-innov-eti-mvp-asp-01",
      "metadata": {
        "description": "The name of the app service plan to deploy."
      }
    },
    "diagnosticLogsRetentionInDays": {
      "type": "int",
      "defaultValue": 90,
      "maxValue": 90,
      "minValue": 0,
      "metadata": {
        "description": "Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
      }
    }
  },
  "variables": {
    "environmentNamingPrefix": "[if(variables('isProd'), 'prod', 'nprod')]",
    "namingPrefixHyphen": "[format('rpu-{0}-{1}', variables('environmentNamingPrefix'), parameters('projectName'))]",
    "namingPrefixNoHyphen": "[format('rpu{0}{1}', variables('environmentNamingPrefix'), parameters('projectName'))]",
    "isProd": "[equals(parameters('environmentName'), 'prod')]",
    "nonProdEnvTypeTag": {
      "EnvType": "Non-Production"
    },
    "prodEnvTypeTag": {
      "EnvType": "Production"
    },
    "resourceTags": "[union(parameters('tags'), if(variables('isProd'), variables('prodEnvTypeTag'), variables('nonProdEnvTypeTag')))]",
    "storageAccountName": "[format('{0}storg01', variables('namingPrefixNoHyphen'))]",
    "keyVaultName": "[format('{0}-kv-01', variables('namingPrefixHyphen'))]",
    "workspaceName": "[format('{0}-ws-01', variables('namingPrefixHyphen'))]",
    "appInsightsName": "[format('{0}-appins-01', variables('namingPrefixHyphen'))]",
    "cosmosDbName": "[format('{0}-cosmosdb-01', variables('namingPrefixHyphen'))]",
    "redisCacheName": "[format('{0}-rediscache-01', variables('namingPrefixHyphen'))]",
    "appGatewayName": "[format('{0}-appgw-01', variables('namingPrefixHyphen'))]",
    "apimName": "[format('{0}-apim-01', variables('namingPrefixHyphen'))]",
    "containerRegistryName": "[format('{0}acr01', variables('namingPrefixNoHyphen'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[parameters('resourceGroupName')]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[parameters('resourceGroupName')]"
          },
          "tags": {
            "value": "[variables('resourceTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1124.51302",
              "templateHash": "8742862611179439016"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the Resource Group"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[deployment().location]",
              "metadata": {
                "description": "Optional. Location of the Resource Group. It uses the deployment's location when not provided."
              }
            },
            "lockLevel": {
              "type": "string",
              "defaultValue": "NotSpecified",
              "metadata": {
                "description": "Optional. Specify the type of lock."
              },
              "allowedValues": [
                "CanNotDelete",
                "NotSpecified",
                "ReadOnly"
              ]
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags of the storage account resource."
              }
            }
          },
          "variables": {
            "lockNotes": {
              "CanNotDelete": "Cannot delete resource or child resources.",
              "ReadOnly": "Cannot modify the resource or child resources."
            }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/resourceGroups",
              "apiVersion": "2021-04-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {}
            },
            {
              "condition": "[not(equals(parameters('lockLevel'), 'NotSpecified'))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "name": "[format('{0}-lock', parameters('name'))]",
              "properties": {
                "level": "[parameters('lockLevel')]",
                "notes": "[variables('lockNotes')[parameters('lockLevel')]]"
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "resourceGroupName": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the resource group"
              }
            },
            "resourceGroupResourceId": {
              "type": "string",
              "value": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the resource group"
              }
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[variables('redisCacheName')]",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "environmentName": {
            "value": "[parameters('environmentName')]"
          },
          "redisName": {
            "value": "[variables('redisCacheName')]"
          },
          "workspaceResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', variables('workspaceName')), '2020-10-01').outputs.logAnalyticsResourceId.value]"
          },
          "skuName": {
            "value": "Premium"
          },
          "skuCapacity": {
            "value": 1
          },
          "storageAccountId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', variables('storageAccountName')), '2020-10-01').outputs.storageAccountResourceId.value]"
          },
          "subnetId": {
            "value": "[format('{0}/subnets/sharedSubnet', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('virtualNetworkResourceGroupName')), 'Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')))]"
          },
          "tags": {
            "value": "[variables('resourceTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1124.51302",
              "templateHash": "430996898229267128"
            }
          },
          "parameters": {
            "environmentName": {
              "type": "string",
              "allowedValues": [
                "int",
                "dev",
                "qa",
                "prod"
              ],
              "metadata": {
                "description": "The name of the deployment environment. Used for naming convention"
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "description": "Resource tags.",
                "subTypeDefinition": {}
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location of all resources"
              }
            },
            "redisName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Redis cache."
              }
            },
            "skuName": {
              "type": "string",
              "defaultValue": "Premium",
              "allowedValues": [
                "Basic",
                "Standard",
                "Premium"
              ],
              "metadata": {
                "description": "The type of Redis cache to deploy. Valid values: (Basic, Standard, Premium)"
              }
            },
            "skuCapacity": {
              "type": "int",
              "defaultValue": 1,
              "maxValue": 6,
              "minValue": 0,
              "metadata": {
                "description": "The size of the Redis cache to deploy. Valid values: for C (Basic/Standard) family (0, 1, 2, 3, 4, 5, 6), for P (Premium) family (1, 2, 3, 4)."
              }
            },
            "subnetId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The full resource ID of a subnet in a virtual network to deploy the Redis cache in. Example format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1",
                "subType": "regex",
                "pattern": "^/subscriptions/[^/]*/resourceGroups/[^/]*/providers/Microsoft.(ClassicNetwork|Network)/virtualNetworks/[^/]*/subnets/[^/]*$"
              }
            },
            "staticIP": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Static IP address. Required when deploying a Redis cache inside an existing Azure Virtual Network.",
                "subType": "regex",
                "pattern": "^\\d+\\.\\d+\\.\\d+\\.\\d+$"
              }
            },
            "redisConfiguration": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc.",
                "subTypeDefinition": {}
              }
            },
            "enableNonSslPort": {
              "type": "bool",
              "defaultValue": false,
              "allowedValues": [
                false
              ],
              "metadata": {
                "description": "Specifies whether the non-ssl Redis server port (6379) is enabled."
              }
            },
            "workspaceResourceId": {
              "type": "string",
              "metadata": {
                "description": "Resource Id for the log analytics workspace for diagnostics logs."
              }
            },
            "replicasPerMaster": {
              "type": "int",
              "defaultValue": 0,
              "metadata": {
                "description": "The number of replicas to be created per master."
              }
            },
            "tenantSettings": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "A dictionary of tenant settings",
                "subTypeDefinition": {}
              }
            },
            "shardCount": {
              "type": "int",
              "defaultValue": 0,
              "metadata": {
                "description": "The number of shards to be created on a Premium Cluster Cache."
              }
            },
            "minimumTlsVersion": {
              "type": "string",
              "defaultValue": "1.2",
              "allowedValues": [
                "1.2"
              ],
              "metadata": {
                "description": "Optional: requires clients to use a specified TLS version (or higher) to connect (e,g, '1.0', '1.1', '1.2')"
              }
            },
            "zones": {
              "type": "array",
              "defaultValue": [],
              "allowedValues": [
                "1",
                "2",
                "3"
              ],
              "metadata": {
                "description": "A list of availability zones denoting where the resource needs to come from.",
                "subType": "string"
              }
            },
            "enableGeoReplication": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Whether or not to create a secondary Redis Cache and link them for geo-replication. Only available with Premium Sku. If set to true, secondaryRedisName, and secondaryLocation must be set."
              }
            },
            "secondaryRedisName": {
              "type": "string",
              "defaultValue": "[uniqueString(parameters('redisName'))]",
              "metadata": {
                "description": "The name of the linked server that is being added to the Redis cache."
              }
            },
            "secondaryLocation": {
              "type": "string",
              "defaultValue": "[parameters('location')]",
              "metadata": {
                "description": "Location of the linked redis cache."
              }
            },
            "secondarySubnetId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The full resource ID of a subnet in a virtual network to deploy the Redis cache in. Example format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1",
                "subType": "regex",
                "pattern": "^/subscriptions/[^/]*/resourceGroups/[^/]*/providers/Microsoft.(ClassicNetwork|Network)/virtualNetworks/[^/]*/subnets/[^/]*$"
              }
            },
            "secondaryStaticIP": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Static IP address. Required when deploying a Redis cache inside an existing Azure Virtual Network.",
                "subType": "regex",
                "pattern": "^\\d+\\.\\d+\\.\\d+\\.\\d+$"
              }
            },
            "dayOfWeek": {
              "type": "string",
              "defaultValue": "Sunday",
              "allowedValues": [
                "Monday",
                "Tuesday",
                "Wednesday",
                "Thursday",
                "Friday",
                "Saturday",
                "Sunday",
                "Everyday",
                "Weekend"
              ],
              "metadata": {
                "description": "Day of the week when a cache can be patched."
              }
            },
            "startHourUtc": {
              "type": "int",
              "defaultValue": 2,
              "maxValue": 23,
              "minValue": 0,
              "metadata": {
                "description": "Start hour after which cache patching can start."
              }
            },
            "maintenanceWindow": {
              "type": "string",
              "defaultValue": "PT5H",
              "metadata": {
                "description": "ISO8601 timespan specifying how much time cache patching can take. "
              }
            },
            "firewallRules": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "subType": "object",
                "subTypeDefinition": {
                  "firewallRuleName": {
                    "type": "string",
                    "metadata": {
                      "description": "The name of the firewall rule.",
                      "required": "yes"
                    }
                  },
                  "startIP": {
                    "type": "string",
                    "metadata": {
                      "description": "lowest IP address included in the range",
                      "required": "yes"
                    }
                  },
                  "endIP": {
                    "type": "string",
                    "metadata": {
                      "description": "highest IP address included in the range",
                      "required": "yes"
                    }
                  }
                }
              }
            },
            "storageAccountId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "**This feature is not currently supported.** The full resource ID of a storage account to use for persistence with Redis cache. Example format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.Storage/storageAccounts/name",
                "subType": "regex",
                "pattern": "^/subscriptions/[^/]*/resourceGroups/[^/]*/providers/Microsoft.Storage/storageAccounts/[^/]*$"
              }
            },
            "diagnosticLogsRetentionInDays": {
              "type": "int",
              "defaultValue": 90,
              "maxValue": 365,
              "minValue": 0,
              "metadata": {
                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
              }
            },
            "diagnosticStorageAccountId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic storage account."
              }
            },
            "workspaceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of log analytics."
              }
            },
            "eventHubAuthorizationRuleId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
              }
            },
            "eventHubName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Name of the event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
              }
            },
            "metricsToEnable": {
              "type": "array",
              "defaultValue": [
                "AllMetrics"
              ],
              "allowedValues": [
                "AllMetrics"
              ],
              "metadata": {
                "description": "Optional. The name of metrics that will be streamed."
              }
            },
            "logsToEnable": {
              "type": "array",
              "defaultValue": [
                "ConnectedClientList"
              ],
              "allowedValues": [
                "ConnectedClientList"
              ],
              "metadata": {
                "description": "Optional. The name of logs that will be streamed."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "diagnosticsLogs",
                "count": "[length(parameters('logsToEnable'))]",
                "input": {
                  "category": "[parameters('logsToEnable')[copyIndex('diagnosticsLogs')]]",
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              },
              {
                "name": "diagnosticsMetrics",
                "count": "[length(parameters('metricsToEnable'))]",
                "input": {
                  "category": "[parameters('metricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                  "timeGrain": null,
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              }
            ],
            "isPremium": "[equals(parameters('skuName'), 'Premium')]",
            "isReplicated": "[and(variables('isPremium'), parameters('enableGeoReplication'))]",
            "isProd": "[equals(parameters('environmentName'), 'prod')]",
            "isNonProd": "[not(variables('isProd'))]",
            "prodIpAddresses": [
              {
                "firewallRuleName": "prod_centralus",
                "startIP": "40.67.188.50",
                "endIP": "40.67.188.50"
              },
              {
                "firewallRuleName": "prod_eastus2",
                "startIP": "52.177.84.230",
                "endIP": "52.177.84.230"
              },
              {
                "firewallRuleName": "prod_northeurope",
                "startIP": "52.155.224.242",
                "endIP": "52.155.224.242"
              },
              {
                "firewallRuleName": "prod_westeurope",
                "startIP": "51.105.163.210",
                "endIP": "51.105.163.210"
              },
              {
                "firewallRuleName": "prod_preleap",
                "startIP": "20.36.252.188",
                "endIP": "20.36.252.188"
              }
            ],
            "nprodIpAddresses": [
              {
                "firewallRuleName": "nprod_centralus",
                "startIP": "52.230.220.128",
                "endIP": "52.230.220.128"
              },
              {
                "firewallRuleName": "nprod_eastus2",
                "startIP": "40.65.233.76",
                "endIP": "40.65.233.76"
              },
              {
                "firewallRuleName": "nprod_northeurope",
                "startIP": "52.155.224.148",
                "endIP": "52.155.224.148"
              },
              {
                "firewallRuleName": "nprod_westeurope",
                "startIP": "51.105.144.11",
                "endIP": "51.105.144.11"
              },
              {
                "firewallRuleName": "nprod_legacy",
                "startIP": "20.42.25.22",
                "endIP": "20.42.25.22"
              }
            ],
            "defaultFirewallRule": {
              "firewallRuleName": "DEFAULT",
              "startIP": "0.0.0.0",
              "endIP": "0.0.0.0"
            },
            "nprodFirewallRules": "[union(parameters('firewallRules'), variables('nprodIpAddresses'))]",
            "prodFirewallRules": "[if(empty(parameters('firewallRules')), array(variables('defaultFirewallRule')), union(parameters('firewallRules'), variables('prodIpAddresses')))]",
            "firewallRules_var": "[if(variables('isNonProd'), variables('nprodFirewallRules'), variables('prodFirewallRules'))]",
            "storageAccountName": "[last(split(parameters('storageAccountId'), '/'))]",
            "secondaryRedisName_var": "[if(not(empty(parameters('secondaryRedisName'))), parameters('secondaryRedisName'), uniqueString(parameters('redisName')))]"
          },
          "resources": [
            {
              "type": "Microsoft.Cache/redis",
              "apiVersion": "2020-12-01",
              "name": "[parameters('redisName')]",
              "tags": "[parameters('tags')]",
              "location": "[parameters('location')]",
              "zones": "[if(not(empty(parameters('zones'))), parameters('zones'), json('null'))]",
              "properties": {
                "sku": {
                  "name": "[parameters('skuName')]",
                  "family": "[if(variables('isPremium'), 'P', 'C')]",
                  "capacity": "[parameters('skuCapacity')]"
                },
                "minimumTlsVersion": "[parameters('minimumTlsVersion')]",
                "enableNonSslPort": "[parameters('enableNonSslPort')]",
                "redisConfiguration": "[union(parameters('redisConfiguration'), createObject('rdb-backup-enabled', true(), 'rdb-backup-frequency', '60', 'rdb-storage-connection-string', format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1}', variables('storageAccountName'), listKeys(parameters('storageAccountId'), '2016-01-01').keys[0].value)))]",
                "replicasPerMaster": "[if(equals(parameters('replicasPerMaster'), 0), json('null'), parameters('replicasPerMaster'))]",
                "tenantSettings": "[parameters('tenantSettings')]",
                "subnetId": "[if(variables('isPremium'), parameters('subnetId'), json('null'))]",
                "staticIP": "[if(variables('isPremium'), parameters('staticIP'), json('null'))]",
                "shardCount": "[if(and(variables('isPremium'), greater(parameters('shardCount'), 0)), parameters('shardCount'), json('null'))]"
              }
            },
            {
              "condition": "[variables('isReplicated')]",
              "type": "Microsoft.Cache/redis",
              "apiVersion": "2020-12-01",
              "name": "[variables('secondaryRedisName_var')]",
              "tags": "[parameters('tags')]",
              "location": "[parameters('secondaryLocation')]",
              "zones": "[parameters('zones')]",
              "properties": {
                "sku": {
                  "name": "Premium",
                  "family": "P",
                  "capacity": "[parameters('skuCapacity')]"
                },
                "minimumTlsVersion": "[parameters('minimumTlsVersion')]",
                "enableNonSslPort": "[parameters('enableNonSslPort')]",
                "redisConfiguration": "[parameters('redisConfiguration')]",
                "replicasPerMaster": "[if(equals(parameters('replicasPerMaster'), 0), null(), parameters('replicasPerMaster'))]",
                "tenantSettings": "[parameters('tenantSettings')]",
                "subnetId": "[parameters('secondarySubnetId')]",
                "staticIP": "[parameters('secondaryStaticIP')]",
                "shardCount": "[parameters('shardCount')]"
              }
            },
            {
              "condition": "[variables('isReplicated')]",
              "type": "Microsoft.Cache/redis/linkedServers",
              "apiVersion": "2020-12-01",
              "name": "[format('{0}/{1}', parameters('redisName'), variables('secondaryRedisName_var'))]",
              "properties": {
                "linkedRedisCacheId": "[if(variables('isReplicated'), resourceId('Microsoft.Cache/redis', variables('secondaryRedisName_var')), null())]",
                "linkedRedisCacheLocation": "[parameters('secondaryLocation')]",
                "serverRole": "Secondary"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Cache/redis', parameters('redisName'))]",
                "[resourceId('Microsoft.Cache/redis', variables('secondaryRedisName_var'))]"
              ]
            },
            {
              "type": "Microsoft.Cache/redis/patchSchedules",
              "apiVersion": "2020-12-01",
              "name": "[format('{0}/{1}', parameters('redisName'), 'default')]",
              "properties": {
                "scheduleEntries": [
                  {
                    "dayOfWeek": "[parameters('dayOfWeek')]",
                    "startHourUtc": "[parameters('startHourUtc')]",
                    "maintenanceWindow": "[parameters('maintenanceWindow')]"
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Cache/redis', parameters('redisName'))]"
              ]
            },
            {
              "condition": "[variables('isReplicated')]",
              "type": "Microsoft.Cache/redis/patchSchedules",
              "apiVersion": "2020-12-01",
              "name": "[format('{0}/{1}', variables('secondaryRedisName_var'), 'default')]",
              "properties": {
                "scheduleEntries": [
                  {
                    "dayOfWeek": "[parameters('dayOfWeek')]",
                    "startHourUtc": "[parameters('startHourUtc')]",
                    "maintenanceWindow": "[parameters('maintenanceWindow')]"
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Cache/redis', variables('secondaryRedisName_var'))]"
              ]
            },
            {
              "condition": "[or(not(variables('isPremium')), not(empty(parameters('firewallRules'))))]",
              "copy": {
                "name": "redisName_firewallRules",
                "count": "[length(variables('firewallRules_var'))]"
              },
              "type": "Microsoft.Cache/redis/firewallRules",
              "apiVersion": "2020-12-01",
              "name": "[format('{0}/{1}', parameters('redisName'), variables('firewallRules_var')[copyIndex()].firewallRuleName)]",
              "properties": {
                "startIP": "[variables('firewallRules_var')[copyIndex()].startIP]",
                "endIP": "[variables('firewallRules_var')[copyIndex()].endIP]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Cache/redis', parameters('redisName'))]"
              ]
            },
            {
              "condition": "[and(variables('isReplicated'), not(empty(parameters('firewallRules'))))]",
              "copy": {
                "name": "secondaryRedisName_firewallRules",
                "count": "[length(variables('firewallRules_var'))]"
              },
              "type": "Microsoft.Cache/redis/firewallRules",
              "apiVersion": "2020-12-01",
              "name": "[format('{0}/{1}', variables('secondaryRedisName_var'), variables('firewallRules_var')[copyIndex()].firewallRuleName)]",
              "properties": {
                "startIP": "[variables('firewallRules_var')[copyIndex()].startIP]",
                "endIP": "[variables('firewallRules_var')[copyIndex()].endIP]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Cache/redis', variables('secondaryRedisName_var'))]"
              ]
            },
            {
              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('workspaceId')))), not(empty(parameters('eventHubAuthorizationRuleId')))), not(empty(parameters('eventHubName'))))]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Cache/redis/{0}', parameters('redisName'))]",
              "name": "[format('{0}-diagnosticSettings', parameters('redisName'))]",
              "properties": {
                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                "workspaceId": "[if(not(empty(parameters('workspaceId'))), parameters('workspaceId'), null())]",
                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('eventHubAuthorizationRuleId'))), parameters('eventHubAuthorizationRuleId'), null())]",
                "eventHubName": "[if(not(empty(parameters('eventHubName'))), parameters('eventHubName'), null())]",
                "metrics": "[variables('diagnosticsMetrics')]",
                "logs": "[variables('diagnosticsLogs')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Cache/redis', parameters('redisName'))]"
              ]
            }
          ],
          "outputs": {
            "redisCacheResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Cache/redis', parameters('redisName'))]",
              "metadata": {
                "description": "The resource ID of the deployed redis cache."
              }
            },
            "redisCacheName": {
              "type": "string",
              "value": "[parameters('redisName')]",
              "metadata": {
                "description": "The name of the deployed redis cache"
              }
            },
            "redisCacheResourceGroup": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The resource group of the deployed redis cache"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', parameters('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', variables('storageAccountName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', variables('workspaceName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[variables('cosmosDbName')]",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('cosmosDbName')]"
          },
          "databaseAccountOfferType": {
            "value": "Standard"
          },
          "locations": {
            "value": [
              {
                "locationName": "East US 2",
                "failoverPriority": 0,
                "isZoneRedundant": false
              }
            ]
          },
          "defaultConsistencyLevel": {
            "value": "Session"
          },
          "sqlDatabases": {
            "value": [
              {
                "name": "[format('{0}-sql-db', variables('cosmosDbName'))]",
                "containers": [
                  {
                    "name": "container-001",
                    "paths": [
                      "/myPartitionKey"
                    ],
                    "kind": "Hash"
                  }
                ]
              }
            ]
          },
          "diagnosticLogsRetentionInDays": {
            "value": "[parameters('diagnosticLogsRetentionInDays')]"
          },
          "workspaceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', variables('workspaceName')), '2020-10-01').outputs.logAnalyticsResourceId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1124.51302",
              "templateHash": "6440443993783799608"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the Database Account"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags of the Database Account resource."
              }
            },
            "systemAssignedIdentity": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Enables system assigned managed identity on the resource."
              }
            },
            "userAssignedIdentities": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. The ID(s) to assign to the resource."
              }
            },
            "databaseAccountOfferType": {
              "type": "string",
              "defaultValue": "Standard",
              "allowedValues": [
                "Standard"
              ],
              "metadata": {
                "description": "Optional. The offer type for the Cosmos DB database account."
              }
            },
            "locations": {
              "type": "array",
              "metadata": {
                "description": "Required. Locations enabled for the Cosmos DB account."
              }
            },
            "defaultConsistencyLevel": {
              "type": "string",
              "defaultValue": "Session",
              "metadata": {
                "description": "Optional. The default consistency level of the Cosmos DB account."
              },
              "allowedValues": [
                "Eventual",
                "ConsistentPrefix",
                "Session",
                "BoundedStaleness",
                "Strong"
              ]
            },
            "automaticFailover": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable automatic failover for regions"
              }
            },
            "maxStalenessPrefix": {
              "type": "int",
              "defaultValue": 100000,
              "metadata": {
                "description": "Optional. Max stale requests. Required for BoundedStaleness. Valid ranges, Single Region: 10 to 1000000. Multi Region: 100000 to 1000000."
              },
              "maxValue": 2147483647,
              "minValue": 10
            },
            "maxIntervalInSeconds": {
              "type": "int",
              "defaultValue": 300,
              "metadata": {
                "description": "Optional. Max lag time (minutes). Required for BoundedStaleness. Valid ranges, Single Region: 5 to 84600. Multi Region: 300 to 86400."
              },
              "maxValue": 86400,
              "minValue": 5
            },
            "serverVersion": {
              "type": "string",
              "defaultValue": "4.0",
              "allowedValues": [
                "3.2",
                "3.6",
                "4.0"
              ],
              "metadata": {
                "description": "Optional. Specifies the MongoDB server version to use."
              }
            },
            "sqlDatabases": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. SQL Databases configurations"
              }
            },
            "mongodbDatabases": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. MongoDB Databases configurations"
              }
            },
            "diagnosticLogsRetentionInDays": {
              "type": "int",
              "defaultValue": 365,
              "maxValue": 365,
              "minValue": 0,
              "metadata": {
                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
              }
            },
            "diagnosticStorageAccountId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic storage account."
              }
            },
            "workspaceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the log analytics workspace."
              }
            },
            "eventHubAuthorizationRuleId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
              }
            },
            "eventHubName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Name of the event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
              }
            },
            "logsToEnable": {
              "type": "array",
              "defaultValue": [
                "DataPlaneRequests",
                "MongoRequests",
                "QueryRuntimeStatistics",
                "PartitionKeyStatistics",
                "PartitionKeyRUConsumption",
                "ControlPlaneRequests",
                "CassandraRequests",
                "GremlinRequests",
                "TableApiRequests"
              ],
              "allowedValues": [
                "DataPlaneRequests",
                "MongoRequests",
                "QueryRuntimeStatistics",
                "PartitionKeyStatistics",
                "PartitionKeyRUConsumption",
                "ControlPlaneRequests",
                "CassandraRequests",
                "GremlinRequests",
                "TableApiRequests"
              ],
              "metadata": {
                "description": "Optional. The name of logs that will be streamed."
              }
            },
            "metricsToEnable": {
              "type": "array",
              "defaultValue": [
                "Requests"
              ],
              "allowedValues": [
                "Requests"
              ],
              "metadata": {
                "description": "Optional. The name of metrics that will be streamed."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "diagnosticsLogs",
                "count": "[length(parameters('logsToEnable'))]",
                "input": {
                  "category": "[parameters('logsToEnable')[copyIndex('diagnosticsLogs')]]",
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              },
              {
                "name": "diagnosticsMetrics",
                "count": "[length(parameters('metricsToEnable'))]",
                "input": {
                  "category": "[parameters('metricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                  "timeGrain": null,
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              },
              {
                "name": "databaseAccount_locations",
                "count": "[length(parameters('locations'))]",
                "input": {
                  "failoverPriority": "[parameters('locations')[copyIndex('databaseAccount_locations')].failoverPriority]",
                  "isZoneRedundant": "[parameters('locations')[copyIndex('databaseAccount_locations')].isZoneRedundant]",
                  "locationName": "[parameters('locations')[copyIndex('databaseAccount_locations')].locationName]"
                }
              }
            ],
            "identityType": "[if(parameters('systemAssignedIdentity'), if(not(empty(parameters('userAssignedIdentities'))), 'SystemAssigned, UserAssigned', 'SystemAssigned'), if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
            "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]",
            "consistencyPolicy": {
              "Eventual": {
                "defaultConsistencyLevel": "Eventual"
              },
              "ConsistentPrefix": {
                "defaultConsistencyLevel": "ConsistentPrefix"
              },
              "Session": {
                "defaultConsistencyLevel": "Session"
              },
              "BoundedStaleness": {
                "defaultConsistencyLevel": "BoundedStaleness",
                "maxStalenessPrefix": "[parameters('maxStalenessPrefix')]",
                "maxIntervalInSeconds": "[parameters('maxIntervalInSeconds')]"
              },
              "Strong": {
                "defaultConsistencyLevel": "Strong"
              }
            },
            "kind": "[if(not(empty(parameters('sqlDatabases'))), 'GlobalDocumentDB', if(not(empty(parameters('mongodbDatabases'))), 'MongoDB', 'Parse'))]",
            "databaseAccount_properties": "[if(not(empty(parameters('sqlDatabases'))), createObject('consistencyPolicy', variables('consistencyPolicy')[parameters('defaultConsistencyLevel')], 'locations', variables('databaseAccount_locations'), 'databaseAccountOfferType', parameters('databaseAccountOfferType'), 'enableAutomaticFailover', parameters('automaticFailover')), if(not(empty(parameters('mongodbDatabases'))), createObject('consistencyPolicy', variables('consistencyPolicy')[parameters('defaultConsistencyLevel')], 'locations', variables('databaseAccount_locations'), 'databaseAccountOfferType', parameters('databaseAccountOfferType'), 'apiProperties', createObject('serverVersion', parameters('serverVersion'))), createObject('databaseAccountOfferType', parameters('databaseAccountOfferType'))))]"
          },
          "resources": [
            {
              "type": "Microsoft.DocumentDB/databaseAccounts",
              "apiVersion": "2021-06-15",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "identity": "[variables('identity')]",
              "kind": "[variables('kind')]",
              "properties": "[variables('databaseAccount_properties')]"
            },
            {
              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('workspaceId')))), not(empty(parameters('eventHubAuthorizationRuleId')))), not(empty(parameters('eventHubName'))))]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.DocumentDB/databaseAccounts/{0}', parameters('name'))]",
              "name": "[format('{0}-diagnosticsetting', parameters('name'))]",
              "properties": {
                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                "workspaceId": "[if(not(empty(parameters('workspaceId'))), parameters('workspaceId'), null())]",
                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('eventHubAuthorizationRuleId'))), parameters('eventHubAuthorizationRuleId'), null())]",
                "eventHubName": "[if(not(empty(parameters('eventHubName'))), parameters('eventHubName'), null())]",
                "metrics": "[variables('diagnosticsMetrics')]",
                "logs": "[variables('diagnosticsLogs')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('name'))]"
              ]
            },
            {
              "copy": {
                "name": "sqlDatabases_resource",
                "count": "[length(parameters('sqlDatabases'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-sqldb-{1}', uniqueString(deployment().name, parameters('location')), parameters('sqlDatabases')[copyIndex()].name)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "databaseAccountName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[parameters('sqlDatabases')[copyIndex()].name]"
                  },
                  "containers": {
                    "value": "[if(contains(parameters('sqlDatabases')[copyIndex()], 'containers'), parameters('sqlDatabases')[copyIndex()].containers, createArray())]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1124.51302",
                      "templateHash": "5265534742947010833"
                    }
                  },
                  "parameters": {
                    "databaseAccountName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. ID of the Cosmos DB database account."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the SQL database "
                      }
                    },
                    "containers": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of containers to deploy in the SQL database."
                      }
                    },
                    "throughput": {
                      "type": "int",
                      "defaultValue": 400,
                      "metadata": {
                        "description": "Optional. Request units per second"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the SQL database resource."
                      }
                    },
                    "cuaId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Customer Usage Attribution ID (GUID). This GUID must be previously registered"
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
                      "apiVersion": "2021-06-15",
                      "name": "[format('{0}/{1}', parameters('databaseAccountName'), parameters('name'))]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "resource": {
                          "id": "[parameters('name')]"
                        },
                        "options": {
                          "throughput": "[parameters('throughput')]"
                        }
                      }
                    },
                    {
                      "condition": "[not(empty(parameters('cuaId')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('pid-{0}', parameters('cuaId'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {},
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1124.51302",
                              "templateHash": "3777044862425570984"
                            }
                          },
                          "resources": []
                        }
                      }
                    },
                    {
                      "copy": {
                        "name": "container",
                        "count": "[length(parameters('containers'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-sqldb-{1}', uniqueString(deployment().name, parameters('name')), parameters('containers')[copyIndex()].name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "databaseAccountName": {
                            "value": "[parameters('databaseAccountName')]"
                          },
                          "sqlDatabaseName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[parameters('containers')[copyIndex()].name]"
                          },
                          "paths": {
                            "value": "[parameters('containers')[copyIndex()].paths]"
                          },
                          "kind": {
                            "value": "[parameters('containers')[copyIndex()].kind]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1124.51302",
                              "templateHash": "4003244363466943384"
                            }
                          },
                          "parameters": {
                            "databaseAccountName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the Database Account"
                              }
                            },
                            "sqlDatabaseName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the SQL Database "
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the container."
                              }
                            },
                            "throughput": {
                              "type": "int",
                              "defaultValue": 400,
                              "metadata": {
                                "description": "Optional. Request Units per second"
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags of the SQL Database resource."
                              }
                            },
                            "paths": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. List of paths using which data within the container can be partitioned"
                              }
                            },
                            "kind": {
                              "type": "string",
                              "defaultValue": "Hash",
                              "allowedValues": [
                                "Hash",
                                "MultiHash",
                                "Range"
                              ],
                              "metadata": {
                                "description": "Optional. Indicates the kind of algorithm used for partitioning"
                              }
                            },
                            "cuaId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Customer Usage Attribution ID (GUID). This GUID must be previously registered"
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
                              "apiVersion": "2021-07-01-preview",
                              "name": "[format('{0}/{1}/{2}', parameters('databaseAccountName'), parameters('sqlDatabaseName'), parameters('name'))]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "resource": {
                                  "id": "[parameters('name')]",
                                  "partitionKey": {
                                    "paths": "[parameters('paths')]",
                                    "kind": "[parameters('kind')]"
                                  }
                                },
                                "options": {
                                  "throughput": "[parameters('throughput')]"
                                }
                              }
                            },
                            {
                              "condition": "[not(empty(parameters('cuaId')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('pid-{0}', parameters('cuaId'))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {},
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.4.1124.51302",
                                      "templateHash": "3777044862425570984"
                                    }
                                  },
                                  "resources": []
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "containerName": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the container."
                              }
                            },
                            "containerResourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers', parameters('databaseAccountName'), parameters('sqlDatabaseName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the container."
                              }
                            },
                            "containerResourceGroup": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The name of the resource group the container was created in."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('databaseAccountName'), parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "sqlDatabaseName": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the SQL database."
                      }
                    },
                    "sqlDatabaseResourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('databaseAccountName'), parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the SQL database."
                      }
                    },
                    "sqlDatabaseResourceGroup": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The name of the resource group the SQL database was created in."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('name'))]"
              ]
            },
            {
              "copy": {
                "name": "mongodbDatabases_resource",
                "count": "[length(parameters('mongodbDatabases'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-mongodb-{1}', uniqueString(deployment().name, parameters('location')), parameters('mongodbDatabases')[copyIndex()].name)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "databaseAccountName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[parameters('mongodbDatabases')[copyIndex()].name]"
                  },
                  "collections": {
                    "value": "[if(contains(parameters('mongodbDatabases')[copyIndex()], 'collections'), parameters('mongodbDatabases')[copyIndex()].collections, createArray())]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1124.51302",
                      "templateHash": "14252727393446505521"
                    }
                  },
                  "parameters": {
                    "databaseAccountName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the Cosmos DB database account."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the mongodb database"
                      }
                    },
                    "throughput": {
                      "type": "int",
                      "defaultValue": 400,
                      "metadata": {
                        "description": "Optional. Name of the mongodb database"
                      }
                    },
                    "collections": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Collections in the mongodb database"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "cuaId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Customer Usage Attribution ID (GUID). This GUID must be previously registered"
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.DocumentDB/databaseAccounts/mongodbDatabases",
                      "apiVersion": "2021-07-01-preview",
                      "name": "[format('{0}/{1}', parameters('databaseAccountName'), parameters('name'))]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "resource": {
                          "id": "[parameters('name')]"
                        },
                        "options": {
                          "throughput": "[parameters('throughput')]"
                        }
                      }
                    },
                    {
                      "condition": "[not(empty(parameters('cuaId')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('pid-{0}', parameters('cuaId'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {},
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1124.51302",
                              "templateHash": "3777044862425570984"
                            }
                          },
                          "resources": []
                        }
                      }
                    },
                    {
                      "copy": {
                        "name": "mongodbDatabase_collections",
                        "count": "[length(parameters('collections'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-collection-{1}', uniqueString(deployment().name, parameters('name')), parameters('collections')[copyIndex()].name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "databaseAccountName": {
                            "value": "[parameters('databaseAccountName')]"
                          },
                          "mongodbDatabaseName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[parameters('collections')[copyIndex()].name]"
                          },
                          "indexes": {
                            "value": "[parameters('collections')[copyIndex()].indexes]"
                          },
                          "shardKey": {
                            "value": "[parameters('collections')[copyIndex()].shardKey]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1124.51302",
                              "templateHash": "15932460338673615864"
                            }
                          },
                          "parameters": {
                            "databaseAccountName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the Cosmos DB database account."
                              }
                            },
                            "mongodbDatabaseName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the mongodb database"
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the collection"
                              }
                            },
                            "throughput": {
                              "type": "int",
                              "defaultValue": 400,
                              "metadata": {
                                "description": "Optional. Name of the mongodb database"
                              }
                            },
                            "indexes": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. Indexes for the collection"
                              }
                            },
                            "shardKey": {
                              "type": "object",
                              "metadata": {
                                "description": "Required. ShardKey for the collection"
                              }
                            },
                            "cuaId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Customer Usage Attribution ID (GUID). This GUID must be previously registered"
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.DocumentDB/databaseAccounts/mongodbDatabases/collections",
                              "apiVersion": "2021-07-01-preview",
                              "name": "[format('{0}/{1}/{2}', parameters('databaseAccountName'), parameters('mongodbDatabaseName'), parameters('name'))]",
                              "properties": {
                                "options": {
                                  "throughput": "[parameters('throughput')]"
                                },
                                "resource": {
                                  "id": "[parameters('name')]",
                                  "indexes": "[parameters('indexes')]",
                                  "shardKey": "[parameters('shardKey')]"
                                }
                              }
                            },
                            {
                              "condition": "[not(empty(parameters('cuaId')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('pid-{0}', parameters('cuaId'))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {},
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.4.1124.51302",
                                      "templateHash": "3777044862425570984"
                                    }
                                  },
                                  "resources": []
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "collectionName": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the mongodb database."
                              }
                            },
                            "collectionResourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts/mongodbDatabases/collections', parameters('databaseAccountName'), parameters('mongodbDatabaseName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the mongodb database."
                              }
                            },
                            "collectionResourceGroup": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The name of the resource group the mongodb database was created in."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DocumentDB/databaseAccounts/mongodbDatabases', parameters('databaseAccountName'), parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "mongodbDatabaseName": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the mongodb database."
                      }
                    },
                    "mongodbDatabaseResourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts/mongodbDatabases', parameters('databaseAccountName'), parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the mongodb database."
                      }
                    },
                    "mongodbDatabaseResourceGroup": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The name of the resource group the mongodb database was created in."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "databaseAccountName": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the database account."
              }
            },
            "databaseAccountResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the database account."
              }
            },
            "databaseAccountResourceGroup": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The name of the resource group the database account was created in."
              }
            },
            "systemAssignedPrincipalId": {
              "type": "string",
              "value": "[if(parameters('systemAssignedIdentity'), reference(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('name')), '2021-06-15', 'full').identity.principalId, '')]",
              "metadata": {
                "description": "The principal ID of the system assigned identity."
              }
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', parameters('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', variables('workspaceName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-private-endpoint', variables('cosmosDbName'))]",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('{0}-private-endpoint', variables('cosmosDbName'))]"
          },
          "targetSubnetResourceId": {
            "value": "[format('{0}/subnets/sharedSubnet', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('virtualNetworkResourceGroupName')), 'Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')))]"
          },
          "groupId": {
            "value": [
              "sql"
            ]
          },
          "serviceResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', variables('cosmosDbName')), '2020-10-01').outputs.databaseAccountResourceId.value]"
          },
          "tags": {
            "value": "[variables('resourceTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1124.51302",
              "templateHash": "12941236996057558012"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the private endpoint resource to create."
              }
            },
            "targetSubnetResourceId": {
              "type": "string",
              "metadata": {
                "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
              }
            },
            "serviceResourceId": {
              "type": "string",
              "metadata": {
                "description": "Required. Resource ID of the resource that needs to be connected to the network."
              }
            },
            "groupId": {
              "type": "array",
              "metadata": {
                "description": "Required. Subtype(s) of the connection to be created. The allowed values depend on the type serviceResourceId refers to."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all Resources."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2021-03-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "privateLinkServiceConnections": [
                  {
                    "name": "[parameters('name')]",
                    "properties": {
                      "privateLinkServiceId": "[parameters('serviceResourceId')]",
                      "groupIds": "[parameters('groupId')]"
                    }
                  }
                ],
                "manualPrivateLinkServiceConnections": [],
                "subnet": {
                  "id": "[parameters('targetSubnetResourceId')]"
                },
                "customDnsConfigs": []
              }
            }
          ],
          "outputs": {
            "privateEndpointResourceGroup": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The resource group the private endpoint was deployed into"
              }
            },
            "privateEndpointResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the private endpoint"
              }
            },
            "privateEndpointName": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the private endpoint"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', variables('cosmosDbName'))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', parameters('resourceGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[variables('workspaceName')]",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('workspaceName')]"
          },
          "serviceTier": {
            "value": "PerGB2018"
          },
          "solutions": {
            "value": [
              "Updates",
              "AntiMalware",
              "SQLAssessment",
              "Security",
              "SecurityCenterFree",
              "ChangeTracking",
              "KeyVaultAnalytics",
              "AzureSQLAnalytics",
              "ServiceMap",
              "AgentHealthAssessment",
              "AlertManagement",
              "AzureActivity",
              "AzureDataFactoryAnalytics",
              "AzureNSGAnalytics",
              "InfrastructureInsights",
              "NetworkMonitoring",
              "VMInsights"
            ]
          },
          "tags": {
            "value": "[variables('resourceTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1124.51302",
              "templateHash": "17656029045474116261"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the Log Analytics workspace"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "serviceTier": {
              "type": "string",
              "defaultValue": "PerGB2018",
              "allowedValues": [
                "Free",
                "Standalone",
                "PerNode",
                "PerGB2018"
              ],
              "metadata": {
                "description": "Required. Service Tier: PerGB2018, Free, Standalone, PerGB or PerNode"
              }
            },
            "solutions": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. LAW gallerySolutions from the gallery."
              }
            },
            "dataRetention": {
              "type": "int",
              "defaultValue": 90,
              "maxValue": 730,
              "minValue": 0,
              "metadata": {
                "description": "Required. Number of days data will be retained for"
              }
            },
            "dailyQuotaGb": {
              "type": "int",
              "defaultValue": -1,
              "minValue": -1,
              "metadata": {
                "description": "Optional. The workspace daily quota for ingestion."
              }
            },
            "publicNetworkAccessForIngestion": {
              "type": "string",
              "defaultValue": "Enabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. The network access type for accessing Log Analytics ingestion."
              }
            },
            "publicNetworkAccessForQuery": {
              "type": "string",
              "defaultValue": "Enabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. The network access type for accessing Log Analytics query."
              }
            },
            "useResourcePermissions": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Set to 'true' to use resource or workspace permissions and 'false' (or leave empty) to require workspace permissions."
              }
            },
            "diagnosticLogsRetentionInDays": {
              "type": "int",
              "defaultValue": 90,
              "maxValue": 365,
              "minValue": 0,
              "metadata": {
                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
              }
            },
            "diagnosticStorageAccountId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic storage account."
              }
            },
            "workspaceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of a log analytics workspace."
              }
            },
            "eventHubAuthorizationRuleId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
              }
            },
            "eventHubName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Name of the event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "logsToEnable": {
              "type": "array",
              "defaultValue": [
                "Audit"
              ],
              "allowedValues": [
                "Audit"
              ],
              "metadata": {
                "description": "Optional. The name of logs that will be streamed."
              }
            },
            "metricsToEnable": {
              "type": "array",
              "defaultValue": [
                "AllMetrics"
              ],
              "allowedValues": [
                "AllMetrics"
              ],
              "metadata": {
                "description": "Optional. The name of metrics that will be streamed."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "diagnosticsLogs",
                "count": "[length(parameters('logsToEnable'))]",
                "input": {
                  "category": "[parameters('logsToEnable')[copyIndex('diagnosticsLogs')]]",
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              },
              {
                "name": "diagnosticsMetrics",
                "count": "[length(parameters('metricsToEnable'))]",
                "input": {
                  "category": "[parameters('metricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                  "timeGrain": null,
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              }
            ],
            "logAnalyticsSearchVersion": 1
          },
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2020-08-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "features": {
                  "searchVersion": "[variables('logAnalyticsSearchVersion')]",
                  "enableLogAccessUsingOnlyResourcePermissions": "[parameters('useResourcePermissions')]"
                },
                "sku": {
                  "name": "[parameters('serviceTier')]"
                },
                "retentionInDays": "[parameters('dataRetention')]",
                "workspaceCapping": {
                  "dailyQuotaGb": "[parameters('dailyQuotaGb')]"
                },
                "publicNetworkAccessForIngestion": "[parameters('publicNetworkAccessForIngestion')]",
                "publicNetworkAccessForQuery": "[parameters('publicNetworkAccessForQuery')]"
              }
            },
            {
              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('workspaceId')))), not(empty(parameters('eventHubAuthorizationRuleId')))), not(empty(parameters('eventHubName'))))]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}', parameters('name'))]",
              "name": "[format('{0}-diagnosticSettings', parameters('name'))]",
              "properties": {
                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                "workspaceId": "[if(not(empty(parameters('workspaceId'))), parameters('workspaceId'), null())]",
                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('eventHubAuthorizationRuleId'))), parameters('eventHubAuthorizationRuleId'), null())]",
                "eventHubName": "[if(not(empty(parameters('eventHubName'))), parameters('eventHubName'), null())]",
                "metrics": "[variables('diagnosticsMetrics')]",
                "logs": "[variables('diagnosticsLogs')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('solutions')))]",
              "copy": {
                "name": "logAnalyticsSolutions",
                "count": "[length(range(0, if(greater(length(parameters('solutions')), 0), length(parameters('solutions')), 1)))]",
                "mode": "serial",
                "batchSize": 1
              },
              "type": "Microsoft.OperationsManagement/solutions",
              "apiVersion": "2015-11-01-preview",
              "name": "[if(empty(parameters('solutions')), 'dummy', format('{0}({1})', parameters('solutions')[range(0, if(greater(length(parameters('solutions')), 0), length(parameters('solutions')), 1))[copyIndex()]], parameters('name')))]",
              "location": "[parameters('location')]",
              "properties": {
                "workspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]"
              },
              "plan": {
                "name": "[if(empty(parameters('solutions')), 'dummy', format('{0}({1})', parameters('solutions')[range(0, if(greater(length(parameters('solutions')), 0), length(parameters('solutions')), 1))[copyIndex()]], parameters('name')))]",
                "product": "[if(empty(parameters('solutions')), 'dummy', format('OMSGallery/{0}', parameters('solutions')[range(0, if(greater(length(parameters('solutions')), 0), length(parameters('solutions')), 1))[copyIndex()]]))]",
                "promotionCode": "",
                "publisher": "Microsoft"
              },
              "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "logAnalyticsResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the deployed log analytics workspace"
              }
            },
            "logAnalyticsResourceGroup": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The resource group of the deployed log analytics workspace"
              }
            },
            "logAnalyticsName": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the deployed log analytics workspace"
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))).customerId]",
              "metadata": {
                "description": "The ID associated with the workspace"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', parameters('resourceGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[variables('storageAccountName')]",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('storageAccountName')]"
          },
          "storageAccountKind": {
            "value": "StorageV2"
          },
          "storageAccountSku": {
            "value": "Standard_LRS"
          },
          "vNetId": {
            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('virtualNetworkResourceGroupName')), 'Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
          },
          "networkAcls": {
            "value": {
              "virtualNetworkRules": [],
              "bypass": "AzureServices",
              "defaultAction": "Deny",
              "ipRules": []
            }
          },
          "workspaceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', variables('workspaceName')), '2020-10-01').outputs.logAnalyticsResourceId.value]"
          },
          "storageAccountAccessTier": {
            "value": "Hot"
          },
          "diagnosticLogsRetentionInDays": {
            "value": "[parameters('diagnosticLogsRetentionInDays')]"
          },
          "tags": {
            "value": "[variables('resourceTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1124.51302",
              "templateHash": "11124260753015720807"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Name of the Storage Account."
              },
              "maxLength": 24
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "systemAssignedIdentity": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Enables system assigned managed identity on the resource."
              }
            },
            "userAssignedIdentities": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. The ID(s) to assign to the resource."
              }
            },
            "storageAccountKind": {
              "type": "string",
              "defaultValue": "StorageV2",
              "metadata": {
                "description": "Optional. Type of Storage Account to create."
              },
              "allowedValues": [
                "Storage",
                "StorageV2",
                "BlobStorage",
                "FileStorage",
                "BlockBlobStorage"
              ]
            },
            "storageAccountSku": {
              "type": "string",
              "defaultValue": "Standard_GRS",
              "metadata": {
                "description": "Optional. Storage Account Sku Name."
              },
              "allowedValues": [
                "Standard_LRS",
                "Standard_GRS",
                "Standard_RAGRS",
                "Standard_ZRS",
                "Premium_LRS",
                "Premium_ZRS",
                "Standard_GZRS",
                "Standard_RAGZRS"
              ]
            },
            "storageAccountAccessTier": {
              "type": "string",
              "defaultValue": "Hot",
              "metadata": {
                "description": "Optional. Storage Account Access Tier."
              },
              "allowedValues": [
                "Hot",
                "Cool"
              ]
            },
            "vNetId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Virtual Network Identifier used to create a service endpoint."
              }
            },
            "networkAcls": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Networks ACLs, this value contains IPs to whitelist and/or Subnet information."
              }
            },
            "allowBlobPublicAccess": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Indicates whether public access is enabled for all blobs or containers in the storage account."
              }
            },
            "minimumTlsVersion": {
              "type": "string",
              "defaultValue": "TLS1_2",
              "metadata": {
                "description": "Optional. Set the minimum TLS version on request to storage."
              },
              "allowedValues": [
                "TLS1_0",
                "TLS1_1",
                "TLS1_2"
              ]
            },
            "enableHierarchicalNamespace": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. If true, enables Hierarchical Namespace for the storage account"
              }
            },
            "diagnosticLogsRetentionInDays": {
              "type": "int",
              "defaultValue": 90,
              "maxValue": 365,
              "minValue": 0,
              "metadata": {
                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
              }
            },
            "diagnosticStorageAccountId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic storage account."
              }
            },
            "workspaceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of a log analytics workspace."
              }
            },
            "eventHubAuthorizationRuleId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
              }
            },
            "eventHubName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Name of the event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "basetime": {
              "type": "string",
              "defaultValue": "[utcNow('u')]",
              "metadata": {
                "description": "Generated. Do not provide a value! This date value is used to generate a SAS token to access the modules."
              }
            },
            "metricsToEnable": {
              "type": "array",
              "defaultValue": [
                "Transaction"
              ],
              "allowedValues": [
                "Transaction"
              ],
              "metadata": {
                "description": "Optional. The name of metrics that will be streamed."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "diagnosticsMetrics",
                "count": "[length(parameters('metricsToEnable'))]",
                "input": {
                  "category": "[parameters('metricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                  "timeGrain": null,
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              },
              {
                "name": "virtualNetworkRules",
                "count": "[length(range(0, if(empty(parameters('networkAcls')), 0, length(parameters('networkAcls').virtualNetworkRules))))]",
                "input": {
                  "id": "[format('{0}/subnets/{1}', parameters('vNetId'), parameters('networkAcls').virtualNetworkRules[range(0, if(empty(parameters('networkAcls')), 0, length(parameters('networkAcls').virtualNetworkRules)))[copyIndex('virtualNetworkRules')]].subnet)]"
                }
              }
            ],
            "networkAcls_var": {
              "bypass": "[if(empty(parameters('networkAcls')), null(), parameters('networkAcls').bypass)]",
              "defaultAction": "[if(empty(parameters('networkAcls')), null(), parameters('networkAcls').defaultAction)]",
              "virtualNetworkRules": "[if(empty(parameters('networkAcls')), null(), variables('virtualNetworkRules'))]",
              "ipRules": "[if(empty(parameters('networkAcls')), null(), if(equals(length(parameters('networkAcls').ipRules), 0), null(), parameters('networkAcls').ipRules))]"
            },
            "maxNameLength": 24,
            "uniqueStoragenameUntrim": "[format('{0}', uniqueString(format('Storage Account{0}', parameters('basetime'))))]",
            "uniqueStoragename": "[if(greater(length(variables('uniqueStoragenameUntrim')), variables('maxNameLength')), substring(variables('uniqueStoragenameUntrim'), 0, variables('maxNameLength')), variables('uniqueStoragenameUntrim'))]",
            "saProperties": {
              "encryption": {
                "keySource": "Microsoft.Storage",
                "services": {
                  "blob": "[if(or(or(or(equals(parameters('storageAccountKind'), 'BlockBlobStorage'), equals(parameters('storageAccountKind'), 'BlobStorage')), equals(parameters('storageAccountKind'), 'StorageV2')), equals(parameters('storageAccountKind'), 'Storage')), json('{\"enabled\": true}'), null())]"
                }
              },
              "accessTier": "[if(equals(parameters('storageAccountKind'), 'Storage'), null(), parameters('storageAccountAccessTier'))]",
              "supportsHttpsTrafficOnly": true,
              "isHnsEnabled": "[if(not(parameters('enableHierarchicalNamespace')), null(), parameters('enableHierarchicalNamespace'))]",
              "minimumTlsVersion": "[parameters('minimumTlsVersion')]",
              "networkAcls": "[if(empty(parameters('networkAcls')), null(), variables('networkAcls_var'))]",
              "allowBlobPublicAccess": "[parameters('allowBlobPublicAccess')]"
            },
            "identityType": "[if(parameters('systemAssignedIdentity'), if(not(empty(parameters('userAssignedIdentities'))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
            "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]"
          },
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2021-06-01",
              "name": "[if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStoragename'))]",
              "location": "[parameters('location')]",
              "kind": "[parameters('storageAccountKind')]",
              "sku": {
                "name": "[parameters('storageAccountSku')]"
              },
              "identity": "[variables('identity')]",
              "tags": "[parameters('tags')]",
              "properties": "[variables('saProperties')]"
            },
            {
              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('workspaceId')))), not(empty(parameters('eventHubAuthorizationRuleId')))), not(empty(parameters('eventHubName'))))]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStoragename')))]",
              "name": "[format('{0}-diagnosticSettings', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStoragename')))]",
              "properties": {
                "storageAccountId": "[if(empty(parameters('diagnosticStorageAccountId')), null(), parameters('diagnosticStorageAccountId'))]",
                "workspaceId": "[if(empty(parameters('workspaceId')), null(), parameters('workspaceId'))]",
                "eventHubAuthorizationRuleId": "[if(empty(parameters('eventHubAuthorizationRuleId')), null(), parameters('eventHubAuthorizationRuleId'))]",
                "eventHubName": "[if(empty(parameters('eventHubName')), null(), parameters('eventHubName'))]",
                "metrics": "[variables('diagnosticsMetrics')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStoragename')))]"
              ]
            }
          ],
          "outputs": {
            "storageAccountResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Storage/storageAccounts', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStoragename')))]",
              "metadata": {
                "description": "The resource ID of the deployed storage account"
              }
            },
            "storageAccountName": {
              "type": "string",
              "value": "[if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStoragename'))]",
              "metadata": {
                "description": "The name of the deployed storage account"
              }
            },
            "storageAccountResourceGroup": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The resource group of the deployed storage account"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', parameters('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', variables('workspaceName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-private-endpoint', variables('storageAccountName'))]",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('{0}-private-endpoint', variables('storageAccountName'))]"
          },
          "targetSubnetResourceId": {
            "value": "[format('{0}/subnets/sharedSubnet', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('virtualNetworkResourceGroupName')), 'Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')))]"
          },
          "groupId": {
            "value": [
              "blob"
            ]
          },
          "serviceResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', variables('storageAccountName')), '2020-10-01').outputs.storageAccountResourceId.value]"
          },
          "tags": {
            "value": "[variables('resourceTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1124.51302",
              "templateHash": "12941236996057558012"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the private endpoint resource to create."
              }
            },
            "targetSubnetResourceId": {
              "type": "string",
              "metadata": {
                "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
              }
            },
            "serviceResourceId": {
              "type": "string",
              "metadata": {
                "description": "Required. Resource ID of the resource that needs to be connected to the network."
              }
            },
            "groupId": {
              "type": "array",
              "metadata": {
                "description": "Required. Subtype(s) of the connection to be created. The allowed values depend on the type serviceResourceId refers to."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all Resources."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2021-03-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "privateLinkServiceConnections": [
                  {
                    "name": "[parameters('name')]",
                    "properties": {
                      "privateLinkServiceId": "[parameters('serviceResourceId')]",
                      "groupIds": "[parameters('groupId')]"
                    }
                  }
                ],
                "manualPrivateLinkServiceConnections": [],
                "subnet": {
                  "id": "[parameters('targetSubnetResourceId')]"
                },
                "customDnsConfigs": []
              }
            }
          ],
          "outputs": {
            "privateEndpointResourceGroup": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The resource group the private endpoint was deployed into"
              }
            },
            "privateEndpointResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the private endpoint"
              }
            },
            "privateEndpointName": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the private endpoint"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', parameters('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', variables('storageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-keyvault', variables('keyVaultName'))]",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('keyVaultName')]"
          },
          "accessPolicies": {
            "value": []
          },
          "enableVaultForDeployment": {
            "value": true
          },
          "enableVaultForTemplateDeployment": {
            "value": true
          },
          "enableVaultForDiskEncryption": {
            "value": false
          },
          "softDeleteRetentionInDays": {
            "value": 7
          },
          "vaultSku": {
            "value": "premium"
          },
          "networkAcls": {
            "value": {
              "bypass": "AzureServices",
              "defaultAction": "Deny",
              "ipRules": []
            }
          },
          "vNetId": {
            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('virtualNetworkResourceGroupName')), 'Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
          },
          "diagnosticLogsRetentionInDays": {
            "value": "[parameters('diagnosticLogsRetentionInDays')]"
          },
          "workspaceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', variables('workspaceName')), '2020-10-01').outputs.logAnalyticsResourceId.value]"
          },
          "tags": {
            "value": "[variables('resourceTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1124.51302",
              "templateHash": "589427005619651517"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "defaultValue": "",
              "maxLength": 24,
              "metadata": {
                "description": "Optional. Name of the Key Vault. If no name is provided, then unique name will be created."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "accessPolicies": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Array of access policies object"
              }
            },
            "secrets": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. All secrets to create"
              }
            },
            "keys": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. All keys to create"
              }
            },
            "enableVaultForDeployment": {
              "type": "bool",
              "defaultValue": true,
              "allowedValues": [
                true,
                false
              ],
              "metadata": {
                "description": "Optional. Specifies if the vault is enabled for deployment by script or compute"
              }
            },
            "enableVaultForTemplateDeployment": {
              "type": "bool",
              "defaultValue": true,
              "allowedValues": [
                true,
                false
              ],
              "metadata": {
                "description": "Optional. Specifies if the vault is enabled for a template deployment"
              }
            },
            "enableVaultForDiskEncryption": {
              "type": "bool",
              "defaultValue": true,
              "allowedValues": [
                true,
                false
              ],
              "metadata": {
                "description": "Optional. Specifies if the azure platform has access to the vault for enabling disk encryption scenarios."
              }
            },
            "enableSoftDelete": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Switch to enable/disable Key Vault's soft delete feature."
              }
            },
            "softDeleteRetentionInDays": {
              "type": "int",
              "defaultValue": 90,
              "metadata": {
                "description": "Optional. softDelete data retention days. It accepts >=7 and <=90."
              }
            },
            "enableRbacAuthorization": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be ignored (warning: this is a preview feature). When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. If null or not specified, the vault is created with the default value of false. Note that management actions are always authorized with RBAC."
              }
            },
            "createMode": {
              "type": "string",
              "defaultValue": "default",
              "metadata": {
                "description": "Optional. The vault's create mode to indicate whether the vault need to be recovered or not. - recover or default."
              }
            },
            "enablePurgeProtection": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Provide 'true' to enable Key Vault's purge protection feature."
              }
            },
            "vaultSku": {
              "type": "string",
              "defaultValue": "premium",
              "allowedValues": [
                "premium",
                "standard"
              ],
              "metadata": {
                "description": "Optional. Specifies the SKU for the vault"
              }
            },
            "networkAcls": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Service endpoint object information"
              }
            },
            "vNetId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Virtual Network resource identifier, if networkAcls is passed, this value must be passed as well"
              }
            },
            "diagnosticLogsRetentionInDays": {
              "type": "int",
              "defaultValue": 365,
              "maxValue": 365,
              "minValue": 0,
              "metadata": {
                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
              }
            },
            "diagnosticStorageAccountId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic storage account."
              }
            },
            "workspaceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of log analytics."
              }
            },
            "eventHubAuthorizationRuleId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
              }
            },
            "eventHubName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Name of the event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Resource tags."
              }
            },
            "baseTime": {
              "type": "string",
              "defaultValue": "[utcNow('u')]",
              "metadata": {
                "description": "Generated. Do not provide a value! This date value is used to generate a SAS token to access the modules."
              }
            },
            "logsToEnable": {
              "type": "array",
              "defaultValue": [
                "AuditEvent"
              ],
              "allowedValues": [
                "AuditEvent"
              ],
              "metadata": {
                "description": "Optional. The name of logs that will be streamed."
              }
            },
            "metricsToEnable": {
              "type": "array",
              "defaultValue": [
                "AllMetrics"
              ],
              "allowedValues": [
                "AllMetrics"
              ],
              "metadata": {
                "description": "Optional. The name of metrics that will be streamed."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "diagnosticsLogs",
                "count": "[length(parameters('logsToEnable'))]",
                "input": {
                  "category": "[parameters('logsToEnable')[copyIndex('diagnosticsLogs')]]",
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              },
              {
                "name": "diagnosticsMetrics",
                "count": "[length(parameters('metricsToEnable'))]",
                "input": {
                  "category": "[parameters('metricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                  "timeGrain": null,
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              },
              {
                "name": "virtualNetworkRules",
                "count": "[length(if(contains(parameters('networkAcls'), 'virtualNetworkRules'), parameters('networkAcls').virtualNetworkRules, createArray()))]",
                "input": {
                  "id": "[format('{0}/subnets/{1}', parameters('vNetId'), if(contains(parameters('networkAcls'), 'virtualNetworkRules'), parameters('networkAcls').virtualNetworkRules, createArray())[copyIndex('virtualNetworkRules')].subnet)]"
                }
              },
              {
                "name": "formattedAccessPolicies",
                "count": "[length(parameters('accessPolicies'))]",
                "input": {
                  "applicationId": "[if(contains(parameters('accessPolicies')[copyIndex('formattedAccessPolicies')], 'applicationId'), parameters('accessPolicies')[copyIndex('formattedAccessPolicies')].applicationId, '')]",
                  "objectId": "[if(contains(parameters('accessPolicies')[copyIndex('formattedAccessPolicies')], 'objectId'), parameters('accessPolicies')[copyIndex('formattedAccessPolicies')].objectId, '')]",
                  "permissions": "[parameters('accessPolicies')[copyIndex('formattedAccessPolicies')].permissions]",
                  "tenantId": "[if(contains(parameters('accessPolicies')[copyIndex('formattedAccessPolicies')], 'tenantId'), parameters('accessPolicies')[copyIndex('formattedAccessPolicies')].tenantId, tenant().tenantId)]"
                }
              }
            ],
            "maxNameLength": 24,
            "uniquenameUntrim": "[uniqueString(format('Key Vault{0}', parameters('baseTime')))]",
            "uniquename": "[if(greater(length(variables('uniquenameUntrim')), variables('maxNameLength')), substring(variables('uniquenameUntrim'), 0, variables('maxNameLength')), variables('uniquenameUntrim'))]",
            "name_var": "[if(empty(parameters('name')), variables('uniquename'), parameters('name'))]",
            "networkAcls_var": {
              "bypass": "[if(empty(parameters('networkAcls')), null(), parameters('networkAcls').bypass)]",
              "defaultAction": "[if(empty(parameters('networkAcls')), null(), parameters('networkAcls').defaultAction)]",
              "virtualNetworkRules": "[if(empty(parameters('networkAcls')), null(), variables('virtualNetworkRules'))]",
              "ipRules": "[if(empty(parameters('networkAcls')), null(), if(equals(length(parameters('networkAcls').ipRules), 0), createArray(), parameters('networkAcls').ipRules))]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2019-09-01",
              "name": "[variables('name_var')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "enabledForDeployment": "[parameters('enableVaultForDeployment')]",
                "enabledForTemplateDeployment": "[parameters('enableVaultForTemplateDeployment')]",
                "enabledForDiskEncryption": "[parameters('enableVaultForDiskEncryption')]",
                "enableSoftDelete": "[parameters('enableSoftDelete')]",
                "softDeleteRetentionInDays": "[parameters('softDeleteRetentionInDays')]",
                "enableRbacAuthorization": "[parameters('enableRbacAuthorization')]",
                "createMode": "[parameters('createMode')]",
                "enablePurgeProtection": "[if(not(parameters('enablePurgeProtection')), null(), parameters('enablePurgeProtection'))]",
                "tenantId": "[subscription().tenantId]",
                "accessPolicies": "[variables('formattedAccessPolicies')]",
                "sku": {
                  "name": "[parameters('vaultSku')]",
                  "family": "A"
                },
                "networkAcls": "[if(empty(parameters('networkAcls')), null(), variables('networkAcls_var'))]"
              }
            },
            {
              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('workspaceId')))), not(empty(parameters('eventHubAuthorizationRuleId')))), not(empty(parameters('eventHubName'))))]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', variables('name_var'))]",
              "name": "[format('{0}-diagnosticSettingName', variables('name_var'))]",
              "properties": {
                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                "workspaceId": "[if(not(empty(parameters('workspaceId'))), parameters('workspaceId'), null())]",
                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('eventHubAuthorizationRuleId'))), parameters('eventHubAuthorizationRuleId'), null())]",
                "eventHubName": "[if(not(empty(parameters('eventHubName'))), parameters('eventHubName'), null())]",
                "metrics": "[variables('diagnosticsMetrics')]",
                "logs": "[variables('diagnosticsLogs')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('name_var'))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('accessPolicies')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-KeyVault-AccessPolicies', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "keyVaultName": {
                    "value": "[variables('name_var')]"
                  },
                  "accessPolicies": {
                    "value": "[variables('formattedAccessPolicies')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1124.51302",
                      "templateHash": "16360856520765002823"
                    }
                  },
                  "parameters": {
                    "keyVaultName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the key vault"
                      }
                    },
                    "name": {
                      "type": "string",
                      "defaultValue": "add",
                      "metadata": {
                        "description": "Optional. The access policy deployment"
                      }
                    },
                    "accessPolicies": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. An array of 0 to 16 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedAccessPolicies",
                        "count": "[length(parameters('accessPolicies'))]",
                        "input": {
                          "applicationId": "[if(contains(parameters('accessPolicies')[copyIndex('formattedAccessPolicies')], 'applicationId'), parameters('accessPolicies')[copyIndex('formattedAccessPolicies')].applicationId, '')]",
                          "objectId": "[if(contains(parameters('accessPolicies')[copyIndex('formattedAccessPolicies')], 'objectId'), parameters('accessPolicies')[copyIndex('formattedAccessPolicies')].objectId, '')]",
                          "permissions": "[parameters('accessPolicies')[copyIndex('formattedAccessPolicies')].permissions]",
                          "tenantId": "[if(contains(parameters('accessPolicies')[copyIndex('formattedAccessPolicies')], 'tenantId'), parameters('accessPolicies')[copyIndex('formattedAccessPolicies')].tenantId, tenant().tenantId)]"
                        }
                      }
                    ]
                  },
                  "resources": [
                    {
                      "type": "Microsoft.KeyVault/vaults/accessPolicies",
                      "apiVersion": "2021-06-01-preview",
                      "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('name'))]",
                      "properties": {
                        "accessPolicies": "[variables('formattedAccessPolicies')]"
                      }
                    }
                  ],
                  "outputs": {
                    "accessPolicyResourceGroup": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The name of the resource group the access policies assignment was created in."
                      }
                    },
                    "accessPolicyName": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the access policies assignment"
                      }
                    },
                    "accessPolicyResourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.KeyVault/vaults/accessPolicies', parameters('keyVaultName'), parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the access policies assignment"
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('name_var'))]"
              ]
            },
            {
              "copy": {
                "name": "keyVault_secrets",
                "count": "[length(parameters('secrets'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-KeyVault-Secret-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('secrets')[copyIndex()].name]"
                  },
                  "value": {
                    "value": "[parameters('secrets')[copyIndex()].value]"
                  },
                  "keyVaultName": {
                    "value": "[variables('name_var')]"
                  },
                  "attributesEnabled": {
                    "value": "[if(contains(parameters('secrets')[copyIndex()], 'attributesEnabled'), parameters('secrets')[copyIndex()].attributesEnabled, true())]"
                  },
                  "attributesExp": {
                    "value": "[if(contains(parameters('secrets')[copyIndex()], 'attributesExp'), parameters('secrets')[copyIndex()].attributesExp, -1)]"
                  },
                  "attributesNbf": {
                    "value": "[if(contains(parameters('secrets')[copyIndex()], 'attributesNbf'), parameters('secrets')[copyIndex()].attributesNbf, -1)]"
                  },
                  "contentType": {
                    "value": "[if(contains(parameters('secrets')[copyIndex()], 'contentType'), parameters('secrets')[copyIndex()].contentType, '')]"
                  },
                  "tags": {
                    "value": "[if(contains(parameters('secrets')[copyIndex()], 'tags'), parameters('secrets')[copyIndex()].tags, createObject())]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1124.51302",
                      "templateHash": "6070891538572065458"
                    }
                  },
                  "parameters": {
                    "keyVaultName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the key vault"
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the secret"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Resource tags."
                      }
                    },
                    "attributesEnabled": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Determines whether the object is enabled."
                      }
                    },
                    "attributesExp": {
                      "type": "int",
                      "defaultValue": -1,
                      "metadata": {
                        "description": "Optional. Expiry date in seconds since 1970-01-01T00:00:00Z."
                      }
                    },
                    "attributesNbf": {
                      "type": "int",
                      "defaultValue": -1,
                      "metadata": {
                        "description": "Optional. Not before date in seconds since 1970-01-01T00:00:00Z."
                      }
                    },
                    "contentType": {
                      "type": "secureString",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The content type of the secret."
                      }
                    },
                    "value": {
                      "type": "secureString",
                      "metadata": {
                        "description": "Required. The value of the secret. NOTE: \"value\" will never be returned from the service, as APIs using this model are is intended for internal use in ARM deployments. Users should use the data-plane REST service for interaction with vault secrets."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.KeyVault/vaults/secrets",
                      "apiVersion": "2019-09-01",
                      "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('name'))]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "contentType": "[parameters('contentType')]",
                        "attributes": {
                          "enabled": "[parameters('attributesEnabled')]",
                          "exp": "[if(not(equals(parameters('attributesExp'), -1)), parameters('attributesExp'), null())]",
                          "nbf": "[if(not(equals(parameters('attributesNbf'), -1)), parameters('attributesNbf'), null())]"
                        },
                        "value": "[parameters('value')]"
                      }
                    }
                  ],
                  "outputs": {
                    "secretName": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the secret."
                      }
                    },
                    "secretResourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the secret."
                      }
                    },
                    "secretResourceGroup": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The name of the resource group the secret was created in."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('name_var'))]"
              ]
            },
            {
              "copy": {
                "name": "keyVault_keys",
                "count": "[length(parameters('keys'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-KeyVault-Key-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('keys')[copyIndex()].name]"
                  },
                  "keyVaultName": {
                    "value": "[variables('name_var')]"
                  },
                  "attributesEnabled": {
                    "value": "[if(contains(parameters('keys')[copyIndex()], 'attributesEnabled'), parameters('keys')[copyIndex()].attributesEnabled, true())]"
                  },
                  "attributesExp": {
                    "value": "[if(contains(parameters('keys')[copyIndex()], 'attributesExp'), parameters('keys')[copyIndex()].attributesExp, -1)]"
                  },
                  "attributesNbf": {
                    "value": "[if(contains(parameters('keys')[copyIndex()], 'attributesNbf'), parameters('keys')[copyIndex()].attributesNbf, -1)]"
                  },
                  "curveName": {
                    "value": "[if(contains(parameters('keys')[copyIndex()], 'curveName'), parameters('keys')[copyIndex()].curveName, 'P-256')]"
                  },
                  "keyOps": {
                    "value": "[if(contains(parameters('keys')[copyIndex()], 'keyOps'), parameters('keys')[copyIndex()].keyOps, createArray())]"
                  },
                  "keySize": {
                    "value": "[if(contains(parameters('keys')[copyIndex()], 'keySize'), parameters('keys')[copyIndex()].keySize, -1)]"
                  },
                  "kty": {
                    "value": "[if(contains(parameters('keys')[copyIndex()], 'kty'), parameters('keys')[copyIndex()].kty, 'EC')]"
                  },
                  "tags": {
                    "value": "[if(contains(parameters('keys')[copyIndex()], 'tags'), parameters('keys')[copyIndex()].tags, createObject())]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1124.51302",
                      "templateHash": "7740237786117904330"
                    }
                  },
                  "parameters": {
                    "keyVaultName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the key vault"
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the key"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Resource tags."
                      }
                    },
                    "attributesEnabled": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Determines whether the object is enabled."
                      }
                    },
                    "attributesExp": {
                      "type": "int",
                      "defaultValue": -1,
                      "metadata": {
                        "description": "Optional. Expiry date in seconds since 1970-01-01T00:00:00Z."
                      }
                    },
                    "attributesNbf": {
                      "type": "int",
                      "defaultValue": -1,
                      "metadata": {
                        "description": "Optional. Not before date in seconds since 1970-01-01T00:00:00Z."
                      }
                    },
                    "curveName": {
                      "type": "string",
                      "defaultValue": "P-256",
                      "allowedValues": [
                        "P-256",
                        "P-256K",
                        "P-384",
                        "P-521"
                      ],
                      "metadata": {
                        "description": "Optional. The elliptic curve name."
                      }
                    },
                    "keyOps": {
                      "type": "array",
                      "defaultValue": [],
                      "allowedValues": [
                        "decrypt",
                        "encrypt",
                        "import",
                        "sign",
                        "unwrapKey",
                        "verify",
                        "wrapKey"
                      ],
                      "metadata": {
                        "description": "Optional. Array of JsonWebKeyOperation"
                      }
                    },
                    "keySize": {
                      "type": "int",
                      "defaultValue": -1,
                      "metadata": {
                        "description": "Optional. The key size in bits. For example: 2048, 3072, or 4096 for RSA."
                      }
                    },
                    "kty": {
                      "type": "string",
                      "defaultValue": "EC",
                      "allowedValues": [
                        "EC",
                        "EC-HSM",
                        "RSA",
                        "RSA-HSM"
                      ],
                      "metadata": {
                        "description": "Optional. The type of the key."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.KeyVault/vaults/keys",
                      "apiVersion": "2019-09-01",
                      "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('name'))]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "attributes": {
                          "enabled": "[parameters('attributesEnabled')]",
                          "exp": "[if(not(equals(parameters('attributesExp'), -1)), parameters('attributesExp'), null())]",
                          "nbf": "[if(not(equals(parameters('attributesNbf'), -1)), parameters('attributesNbf'), null())]"
                        },
                        "curveName": "[parameters('curveName')]",
                        "keyOps": "[parameters('keyOps')]",
                        "keySize": "[if(not(equals(parameters('keySize'), -1)), parameters('keySize'), null())]",
                        "kty": "[parameters('kty')]"
                      }
                    }
                  ],
                  "outputs": {
                    "keyName": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the key."
                      }
                    },
                    "keyResourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the key."
                      }
                    },
                    "keyResourceGroup": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The name of the resource group the key was created in."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('name_var'))]"
              ]
            }
          ],
          "outputs": {
            "keyVaultResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.KeyVault/vaults', variables('name_var'))]",
              "metadata": {
                "description": "The resource ID of the key vault."
              }
            },
            "keyVaultResourceGroup": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The name of the resource group the key vault was created in."
              }
            },
            "keyVaultName": {
              "type": "string",
              "value": "[variables('name_var')]",
              "metadata": {
                "description": "The name of the key vault."
              }
            },
            "keyVaultUrl": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.KeyVault/vaults', variables('name_var'))).vaultUri]",
              "metadata": {
                "description": "The URL of the key vault."
              }
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', parameters('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', variables('workspaceName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-private-endpoint', variables('keyVaultName'))]",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('{0}-private-endpoint', variables('keyVaultName'))]"
          },
          "targetSubnetResourceId": {
            "value": "[format('{0}/subnets/sharedSubnet', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('virtualNetworkResourceGroupName')), 'Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')))]"
          },
          "groupId": {
            "value": [
              "vault"
            ]
          },
          "serviceResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-keyvault', variables('keyVaultName'))), '2020-10-01').outputs.keyVaultResourceId.value]"
          },
          "tags": {
            "value": "[variables('resourceTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1124.51302",
              "templateHash": "12941236996057558012"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the private endpoint resource to create."
              }
            },
            "targetSubnetResourceId": {
              "type": "string",
              "metadata": {
                "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
              }
            },
            "serviceResourceId": {
              "type": "string",
              "metadata": {
                "description": "Required. Resource ID of the resource that needs to be connected to the network."
              }
            },
            "groupId": {
              "type": "array",
              "metadata": {
                "description": "Required. Subtype(s) of the connection to be created. The allowed values depend on the type serviceResourceId refers to."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all Resources."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2021-03-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "privateLinkServiceConnections": [
                  {
                    "name": "[parameters('name')]",
                    "properties": {
                      "privateLinkServiceId": "[parameters('serviceResourceId')]",
                      "groupIds": "[parameters('groupId')]"
                    }
                  }
                ],
                "manualPrivateLinkServiceConnections": [],
                "subnet": {
                  "id": "[parameters('targetSubnetResourceId')]"
                },
                "customDnsConfigs": []
              }
            }
          ],
          "outputs": {
            "privateEndpointResourceGroup": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The resource group the private endpoint was deployed into"
              }
            },
            "privateEndpointResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the private endpoint"
              }
            },
            "privateEndpointName": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the private endpoint"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-keyvault', variables('keyVaultName')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', parameters('resourceGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-appins', variables('appInsightsName'))]",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "appInsightsWorkspaceResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', variables('workspaceName')), '2020-10-01').outputs.logAnalyticsResourceId.value]"
          },
          "name": {
            "value": "[variables('appInsightsName')]"
          },
          "tags": {
            "value": "[variables('resourceTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1124.51302",
              "templateHash": "9890686526493610162"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the Application Insights"
              }
            },
            "appInsightsType": {
              "type": "string",
              "defaultValue": "web",
              "allowedValues": [
                "web",
                "other"
              ],
              "metadata": {
                "description": "Optional. Application type"
              }
            },
            "appInsightsWorkspaceResourceId": {
              "type": "string",
              "metadata": {
                "description": "Required. Resource ID of the log analytics workspace which the data will be ingested to. This property is required to create an application with this API version. Applications from older versions will not have this property."
              }
            },
            "appInsightsPublicNetworkAccessForIngestion": {
              "type": "string",
              "defaultValue": "Enabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. The network access type for accessing Application Insights ingestion. - Enabled or Disabled"
              }
            },
            "appInsightsPublicNetworkAccessForQuery": {
              "type": "string",
              "defaultValue": "Enabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. The network access type for accessing Application Insights query. - Enabled or Disabled"
              }
            },
            "kind": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The kind of application that this component refers to, used to customize UI. This value is a freeform string, values should typically be one of the following: web, ios, other, store, java, phone."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all Resources"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Insights/components",
              "apiVersion": "2020-02-02",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "kind": "[parameters('kind')]",
              "properties": {
                "Application_Type": "[parameters('appInsightsType')]",
                "WorkspaceResourceId": "[parameters('appInsightsWorkspaceResourceId')]",
                "publicNetworkAccessForIngestion": "[parameters('appInsightsPublicNetworkAccessForIngestion')]",
                "publicNetworkAccessForQuery": "[parameters('appInsightsPublicNetworkAccessForQuery')]"
              }
            }
          ],
          "outputs": {
            "appInsightsName": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the application insights component"
              }
            },
            "appInsightsResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Insights/components', parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the application insights component"
              }
            },
            "appInsightsResourceGroup": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The resource group the application insights component was deployed into"
              }
            },
            "appInsightsAppId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Insights/components', parameters('name'))).AppId]",
              "metadata": {
                "description": "The application ID of the application insights component"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', parameters('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', variables('workspaceName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[parameters('appServicePlanName')]",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[parameters('appServicePlanName')]"
          },
          "skuName": {
            "value": "I1V2"
          },
          "skuTier": {
            "value": "IsolatedV2"
          },
          "appServiceEnvironmentId": {
            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('sharedResourceGroupName')), 'Microsoft.Web/hostingEnvironments', parameters('appServiceEnvironmentName'))]"
          },
          "tags": {
            "value": "[variables('resourceTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1124.51302",
              "templateHash": "8025097068450534095"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "maxLength": 40,
              "minLength": 1,
              "metadata": {
                "description": "Required. The name of the app service plan to deploy."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "skuName": {
              "type": "string",
              "allowedValues": [
                "S1",
                "S2",
                "S3",
                "P1",
                "P2",
                "P3",
                "P1V2",
                "P2V2",
                "P3V2",
                "P1V3",
                "P2V3",
                "P3V3",
                "I1",
                "I2",
                "I3",
                "EP1",
                "EP2",
                "EP3",
                "I1V2"
              ],
              "metadata": {
                "description": "Name of the resource SKU.",
                "required": "no"
              }
            },
            "serverOS": {
              "type": "string",
              "defaultValue": "Windows",
              "allowedValues": [
                "Windows",
                "Linux"
              ],
              "metadata": {
                "description": "Optional. Kind of server OS."
              }
            },
            "appServiceEnvironmentId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The Resource ID of the App Service Environment to use for the App Service Plan."
              }
            },
            "workerTierName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Target worker tier assigned to the App Service plan."
              }
            },
            "perSiteScaling": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. If true, apps assigned to this App Service plan can be scaled independently. If false, apps assigned to this App Service plan will scale to all instances of the plan."
              }
            },
            "maximumElasticWorkerCount": {
              "type": "int",
              "defaultValue": 1,
              "metadata": {
                "description": "Optional. Maximum number of total workers allowed for this ElasticScaleEnabled App Service Plan."
              }
            },
            "targetWorkerCount": {
              "type": "int",
              "defaultValue": 0,
              "metadata": {
                "description": "Optional. Scaling worker count."
              }
            },
            "targetWorkerSize": {
              "type": "int",
              "defaultValue": 0,
              "allowedValues": [
                0,
                1,
                2
              ],
              "metadata": {
                "description": "Optional. The instance size of the hosting plan (small, medium, or large)."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "skuTier": {
              "type": "string",
              "defaultValue": "IsolatedV2",
              "metadata": {
                "description": "App service plan sku."
              }
            }
          },
          "variables": {
            "hostingEnvironmentProfile": {
              "id": "[parameters('appServiceEnvironmentId')]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Web/serverfarms",
              "apiVersion": "2021-02-01",
              "name": "[parameters('name')]",
              "kind": "[if(equals(parameters('serverOS'), 'Windows'), '', 'linux')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "[parameters('skuName')]",
                "tier": "[parameters('skuTier')]"
              },
              "properties": {
                "workerTierName": "[parameters('workerTierName')]",
                "hostingEnvironmentProfile": "[if(not(empty(parameters('appServiceEnvironmentId'))), variables('hostingEnvironmentProfile'), null())]",
                "perSiteScaling": "[parameters('perSiteScaling')]",
                "maximumElasticWorkerCount": "[parameters('maximumElasticWorkerCount')]",
                "reserved": "[equals(parameters('serverOS'), 'Linux')]",
                "targetWorkerCount": "[parameters('targetWorkerCount')]",
                "targetWorkerSizeId": "[parameters('targetWorkerSize')]"
              }
            }
          ],
          "outputs": {
            "appServicePlanResourceGroup": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The resource group the app service plan was deployed into"
              }
            },
            "appServicePlanName": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the app service plan"
              }
            },
            "appServicePlanResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Web/serverfarms', parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the app service plan"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', parameters('resourceGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-api-portal-app', variables('namingPrefixHyphen'))]",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "kind": {
            "value": "app"
          },
          "name": {
            "value": "[format('{0}-api-portal-app', variables('namingPrefixHyphen'))]"
          },
          "storageAccountId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', variables('storageAccountName')), '2020-10-01').outputs.storageAccountResourceId.value]"
          },
          "appInsightId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-appins', variables('appInsightsName'))), '2020-10-01').outputs.appInsightsResourceId.value]"
          },
          "appServicePlanId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', parameters('appServicePlanName')), '2020-10-01').outputs.appServicePlanResourceId.value]"
          },
          "diagnosticLogsRetentionInDays": {
            "value": "[parameters('diagnosticLogsRetentionInDays')]"
          },
          "appServiceEnvironmentId": {
            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('sharedResourceGroupName')), 'Microsoft.Web/hostingEnvironments', parameters('appServiceEnvironmentName'))]"
          },
          "tags": {
            "value": "[variables('resourceTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1124.51302",
              "templateHash": "5086708811691693692"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the site."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all Resources."
              }
            },
            "kind": {
              "type": "string",
              "allowedValues": [
                "functionapp",
                "app"
              ],
              "metadata": {
                "description": "Required. Type of site to deploy."
              }
            },
            "httpsOnly": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Configures a site to accept only HTTPS requests. Issues redirect for HTTP requests."
              }
            },
            "clientAffinityEnabled": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. If client affinity is enabled."
              }
            },
            "siteConfig": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Configuration of the app."
              }
            },
            "storageAccountId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Required if functionapp kind. The resource ID of the storage account to manage triggers and logging function executions."
              }
            },
            "functionsWorkerRuntime": {
              "type": "string",
              "defaultValue": "",
              "allowedValues": [
                "dotnet",
                "node",
                "python",
                "java",
                "powershell",
                ""
              ],
              "metadata": {
                "description": "Optional. Runtime of the function worker."
              }
            },
            "functionsExtensionVersion": {
              "type": "string",
              "defaultValue": "~3",
              "metadata": {
                "description": "Optional. Version if the function extension."
              }
            },
            "appServicePlanId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The resource ID of the app service plan to use for the site. If not provided, the appServicePlanObject is used to create a new plan."
              }
            },
            "appInsightId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The resource ID of the existing app insight to leverage for the app. If the resource ID is not provided, the appInsightObject can be used to create a new app insight."
              }
            },
            "appServiceEnvironmentId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The resource ID of the app service environment to use for this resource."
              }
            },
            "systemAssignedIdentity": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Enables system assigned managed identity on the resource."
              }
            },
            "userAssignedIdentities": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. The ID(s) to assign to the resource."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "diagnosticLogsRetentionInDays": {
              "type": "int",
              "defaultValue": 90,
              "maxValue": 365,
              "minValue": 0,
              "metadata": {
                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
              }
            },
            "diagnosticStorageAccountId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic storage account."
              }
            },
            "workspaceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of log analytics workspace."
              }
            },
            "eventHubAuthorizationRuleId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the event hub authorization rule for the event hub namespace in which the event hub should be created or streamed to."
              }
            },
            "eventHubName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Name of the event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
              }
            },
            "logsToEnable": {
              "type": "array",
              "defaultValue": "[if(equals(parameters('kind'), 'functionapp'), createArray('FunctionAppLogs'), createArray('AppServiceHTTPLogs', 'AppServiceConsoleLogs', 'AppServiceAppLogs', 'AppServiceFileAuditLogs', 'AppServiceAuditLogs'))]",
              "allowedValues": [
                "AppServiceHTTPLogs",
                "AppServiceConsoleLogs",
                "AppServiceAppLogs",
                "AppServiceFileAuditLogs",
                "AppServiceAuditLogs",
                "FunctionAppLogs"
              ],
              "metadata": {
                "description": "Optional. The name of logs that will be streamed."
              }
            },
            "metricsToEnable": {
              "type": "array",
              "defaultValue": [
                "AllMetrics"
              ],
              "allowedValues": [
                "AllMetrics"
              ],
              "metadata": {
                "description": "Optional. The name of metrics that will be streamed."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "diagnosticsLogs",
                "count": "[length(parameters('logsToEnable'))]",
                "input": {
                  "category": "[parameters('logsToEnable')[copyIndex('diagnosticsLogs')]]",
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              },
              {
                "name": "diagnosticsMetrics",
                "count": "[length(parameters('metricsToEnable'))]",
                "input": {
                  "category": "[parameters('metricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                  "timeGrain": null,
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              }
            ],
            "identityType": "[if(parameters('systemAssignedIdentity'), if(not(empty(parameters('userAssignedIdentities'))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
            "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]"
          },
          "resources": [
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2020-12-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "kind": "[parameters('kind')]",
              "tags": "[parameters('tags')]",
              "identity": "[variables('identity')]",
              "properties": {
                "serverFarmId": "[parameters('appServicePlanId')]",
                "httpsOnly": "[parameters('httpsOnly')]",
                "hostingEnvironmentProfile": "[if(not(empty(parameters('appServiceEnvironmentId'))), createObject('id', parameters('appServiceEnvironmentId')), null())]",
                "clientAffinityEnabled": "[parameters('clientAffinityEnabled')]",
                "siteConfig": "[parameters('siteConfig')]"
              }
            },
            {
              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('workspaceId')))), not(empty(parameters('eventHubAuthorizationRuleId')))), not(empty(parameters('eventHubName'))))]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Web/sites/{0}', parameters('name'))]",
              "name": "[format('{0}-diagnosticSettings', parameters('name'))]",
              "properties": {
                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                "workspaceId": "[if(not(empty(parameters('workspaceId'))), parameters('workspaceId'), null())]",
                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('eventHubAuthorizationRuleId'))), parameters('eventHubAuthorizationRuleId'), null())]",
                "eventHubName": "[if(not(empty(parameters('eventHubName'))), parameters('eventHubName'), null())]",
                "metrics": "[variables('diagnosticsMetrics')]",
                "logs": "[variables('diagnosticsLogs')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-Site-Config', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "appsettings"
                  },
                  "appName": {
                    "value": "[parameters('name')]"
                  },
                  "storageAccountId": {
                    "value": "[if(not(empty(parameters('storageAccountId'))), parameters('storageAccountId'), '')]"
                  },
                  "appInsightId": {
                    "value": "[if(not(empty(parameters('appInsightId'))), parameters('appInsightId'), '')]"
                  },
                  "functionsWorkerRuntime": {
                    "value": "[if(not(empty(parameters('functionsWorkerRuntime'))), parameters('functionsWorkerRuntime'), '')]"
                  },
                  "functionsExtensionVersion": {
                    "value": "[if(not(empty(parameters('functionsExtensionVersion'))), parameters('functionsExtensionVersion'), '~3')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1124.51302",
                      "templateHash": "13050009928190282449"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "allowedValues": [
                        "appsettings"
                      ],
                      "metadata": {
                        "description": "Required. Name of the site config."
                      }
                    },
                    "appName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the site parent resource."
                      }
                    },
                    "storageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Required if app of kind functionapp. Resource ID of the storage account to manage triggers and logging function executions."
                      }
                    },
                    "functionsWorkerRuntime": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "dotnet",
                        "node",
                        "python",
                        "java",
                        "powershell",
                        ""
                      ],
                      "metadata": {
                        "description": "Optional. Runtime of the function worker."
                      }
                    },
                    "functionsExtensionVersion": {
                      "type": "string",
                      "defaultValue": "~3",
                      "metadata": {
                        "description": "Optional. Version of the function extension."
                      }
                    },
                    "appInsightId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the app insight to leverage for this resource."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Web/sites/config",
                      "apiVersion": "2021-02-01",
                      "name": "[format('{0}/{1}', parameters('appName'), parameters('name'))]",
                      "properties": {
                        "AzureWebJobsStorage": "[if(not(empty(parameters('storageAccountId'))), format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};', last(split(parameters('storageAccountId'), '/')), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('storageAccountId'), '/')[2], split(parameters('storageAccountId'), '/')[4]), 'Microsoft.Storage/storageAccounts', last(split(parameters('storageAccountId'), '/'))), '2021-02-01').keys[0].value), null())]",
                        "AzureWebJobsDashboard": "[if(not(empty(parameters('storageAccountId'))), format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};', last(split(parameters('storageAccountId'), '/')), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('storageAccountId'), '/')[2], split(parameters('storageAccountId'), '/')[4]), 'Microsoft.Storage/storageAccounts', last(split(parameters('storageAccountId'), '/'))), '2021-02-01').keys[0].value), null())]",
                        "FUNCTIONS_EXTENSION_VERSION": "[if(and(equals(reference(resourceId('Microsoft.Web/sites', parameters('appName')), '2020-12-01', 'full').kind, 'functionapp'), not(empty(parameters('functionsExtensionVersion')))), parameters('functionsExtensionVersion'), null())]",
                        "FUNCTIONS_WORKER_RUNTIME": "[if(and(equals(reference(resourceId('Microsoft.Web/sites', parameters('appName')), '2020-12-01', 'full').kind, 'functionapp'), not(empty(parameters('functionsWorkerRuntime')))), parameters('functionsWorkerRuntime'), null())]",
                        "APPINSIGHTS_INSTRUMENTATIONKEY": "[if(not(empty(parameters('appInsightId'))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('appInsightId'), '/')[2], split(parameters('appInsightId'), '/')[4]), 'Microsoft.Insights/components', last(split(parameters('appInsightId'), '/'))), '2020-02-02').InstrumentationKey, '')]",
                        "APPLICATIONINSIGHTS_CONNECTION_STRING": "[if(not(empty(parameters('appInsightId'))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('appInsightId'), '/')[2], split(parameters('appInsightId'), '/')[4]), 'Microsoft.Insights/components', last(split(parameters('appInsightId'), '/'))), '2020-02-02').ConnectionString, '')]"
                      }
                    }
                  ],
                  "outputs": {
                    "configName": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the site config."
                      }
                    },
                    "configResourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Web/sites/config', parameters('appName'), parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the site config."
                      }
                    },
                    "configResourceGroup": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group the site config was deployed into."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "siteName": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the site."
              }
            },
            "siteResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Web/sites', parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the site."
              }
            },
            "siteResourceGroup": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The resource group the site was deployed into."
              }
            },
            "systemAssignedPrincipalId": {
              "type": "string",
              "value": "[if(parameters('systemAssignedIdentity'), reference(resourceId('Microsoft.Web/sites', parameters('name')), '2020-12-01', 'full').identity.principalId, '')]",
              "metadata": {
                "description": "The principal ID of the system assigned identity."
              }
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-appins', variables('appInsightsName')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', parameters('appServicePlanName'))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', parameters('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', variables('storageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-vendor-setup-api-func', variables('namingPrefixHyphen'))]",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "kind": {
            "value": "functionapp"
          },
          "name": {
            "value": "[format('{0}-vendor-setup-api-func', variables('namingPrefixHyphen'))]"
          },
          "storageAccountId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', variables('storageAccountName')), '2020-10-01').outputs.storageAccountResourceId.value]"
          },
          "functionsWorkerRuntime": {
            "value": "java"
          },
          "appInsightId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-appins', variables('appInsightsName'))), '2020-10-01').outputs.appInsightsResourceId.value]"
          },
          "appServicePlanId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', parameters('appServicePlanName')), '2020-10-01').outputs.appServicePlanResourceId.value]"
          },
          "diagnosticLogsRetentionInDays": {
            "value": "[parameters('diagnosticLogsRetentionInDays')]"
          },
          "appServiceEnvironmentId": {
            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('sharedResourceGroupName')), 'Microsoft.Web/hostingEnvironments', parameters('appServiceEnvironmentName'))]"
          },
          "tags": {
            "value": "[variables('resourceTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1124.51302",
              "templateHash": "5086708811691693692"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the site."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all Resources."
              }
            },
            "kind": {
              "type": "string",
              "allowedValues": [
                "functionapp",
                "app"
              ],
              "metadata": {
                "description": "Required. Type of site to deploy."
              }
            },
            "httpsOnly": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Configures a site to accept only HTTPS requests. Issues redirect for HTTP requests."
              }
            },
            "clientAffinityEnabled": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. If client affinity is enabled."
              }
            },
            "siteConfig": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Configuration of the app."
              }
            },
            "storageAccountId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Required if functionapp kind. The resource ID of the storage account to manage triggers and logging function executions."
              }
            },
            "functionsWorkerRuntime": {
              "type": "string",
              "defaultValue": "",
              "allowedValues": [
                "dotnet",
                "node",
                "python",
                "java",
                "powershell",
                ""
              ],
              "metadata": {
                "description": "Optional. Runtime of the function worker."
              }
            },
            "functionsExtensionVersion": {
              "type": "string",
              "defaultValue": "~3",
              "metadata": {
                "description": "Optional. Version if the function extension."
              }
            },
            "appServicePlanId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The resource ID of the app service plan to use for the site. If not provided, the appServicePlanObject is used to create a new plan."
              }
            },
            "appInsightId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The resource ID of the existing app insight to leverage for the app. If the resource ID is not provided, the appInsightObject can be used to create a new app insight."
              }
            },
            "appServiceEnvironmentId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The resource ID of the app service environment to use for this resource."
              }
            },
            "systemAssignedIdentity": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Enables system assigned managed identity on the resource."
              }
            },
            "userAssignedIdentities": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. The ID(s) to assign to the resource."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "diagnosticLogsRetentionInDays": {
              "type": "int",
              "defaultValue": 90,
              "maxValue": 365,
              "minValue": 0,
              "metadata": {
                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
              }
            },
            "diagnosticStorageAccountId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic storage account."
              }
            },
            "workspaceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of log analytics workspace."
              }
            },
            "eventHubAuthorizationRuleId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the event hub authorization rule for the event hub namespace in which the event hub should be created or streamed to."
              }
            },
            "eventHubName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Name of the event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
              }
            },
            "logsToEnable": {
              "type": "array",
              "defaultValue": "[if(equals(parameters('kind'), 'functionapp'), createArray('FunctionAppLogs'), createArray('AppServiceHTTPLogs', 'AppServiceConsoleLogs', 'AppServiceAppLogs', 'AppServiceFileAuditLogs', 'AppServiceAuditLogs'))]",
              "allowedValues": [
                "AppServiceHTTPLogs",
                "AppServiceConsoleLogs",
                "AppServiceAppLogs",
                "AppServiceFileAuditLogs",
                "AppServiceAuditLogs",
                "FunctionAppLogs"
              ],
              "metadata": {
                "description": "Optional. The name of logs that will be streamed."
              }
            },
            "metricsToEnable": {
              "type": "array",
              "defaultValue": [
                "AllMetrics"
              ],
              "allowedValues": [
                "AllMetrics"
              ],
              "metadata": {
                "description": "Optional. The name of metrics that will be streamed."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "diagnosticsLogs",
                "count": "[length(parameters('logsToEnable'))]",
                "input": {
                  "category": "[parameters('logsToEnable')[copyIndex('diagnosticsLogs')]]",
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              },
              {
                "name": "diagnosticsMetrics",
                "count": "[length(parameters('metricsToEnable'))]",
                "input": {
                  "category": "[parameters('metricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                  "timeGrain": null,
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              }
            ],
            "identityType": "[if(parameters('systemAssignedIdentity'), if(not(empty(parameters('userAssignedIdentities'))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
            "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]"
          },
          "resources": [
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2020-12-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "kind": "[parameters('kind')]",
              "tags": "[parameters('tags')]",
              "identity": "[variables('identity')]",
              "properties": {
                "serverFarmId": "[parameters('appServicePlanId')]",
                "httpsOnly": "[parameters('httpsOnly')]",
                "hostingEnvironmentProfile": "[if(not(empty(parameters('appServiceEnvironmentId'))), createObject('id', parameters('appServiceEnvironmentId')), null())]",
                "clientAffinityEnabled": "[parameters('clientAffinityEnabled')]",
                "siteConfig": "[parameters('siteConfig')]"
              }
            },
            {
              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('workspaceId')))), not(empty(parameters('eventHubAuthorizationRuleId')))), not(empty(parameters('eventHubName'))))]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Web/sites/{0}', parameters('name'))]",
              "name": "[format('{0}-diagnosticSettings', parameters('name'))]",
              "properties": {
                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                "workspaceId": "[if(not(empty(parameters('workspaceId'))), parameters('workspaceId'), null())]",
                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('eventHubAuthorizationRuleId'))), parameters('eventHubAuthorizationRuleId'), null())]",
                "eventHubName": "[if(not(empty(parameters('eventHubName'))), parameters('eventHubName'), null())]",
                "metrics": "[variables('diagnosticsMetrics')]",
                "logs": "[variables('diagnosticsLogs')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-Site-Config', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "appsettings"
                  },
                  "appName": {
                    "value": "[parameters('name')]"
                  },
                  "storageAccountId": {
                    "value": "[if(not(empty(parameters('storageAccountId'))), parameters('storageAccountId'), '')]"
                  },
                  "appInsightId": {
                    "value": "[if(not(empty(parameters('appInsightId'))), parameters('appInsightId'), '')]"
                  },
                  "functionsWorkerRuntime": {
                    "value": "[if(not(empty(parameters('functionsWorkerRuntime'))), parameters('functionsWorkerRuntime'), '')]"
                  },
                  "functionsExtensionVersion": {
                    "value": "[if(not(empty(parameters('functionsExtensionVersion'))), parameters('functionsExtensionVersion'), '~3')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1124.51302",
                      "templateHash": "13050009928190282449"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "allowedValues": [
                        "appsettings"
                      ],
                      "metadata": {
                        "description": "Required. Name of the site config."
                      }
                    },
                    "appName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the site parent resource."
                      }
                    },
                    "storageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Required if app of kind functionapp. Resource ID of the storage account to manage triggers and logging function executions."
                      }
                    },
                    "functionsWorkerRuntime": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "dotnet",
                        "node",
                        "python",
                        "java",
                        "powershell",
                        ""
                      ],
                      "metadata": {
                        "description": "Optional. Runtime of the function worker."
                      }
                    },
                    "functionsExtensionVersion": {
                      "type": "string",
                      "defaultValue": "~3",
                      "metadata": {
                        "description": "Optional. Version of the function extension."
                      }
                    },
                    "appInsightId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the app insight to leverage for this resource."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Web/sites/config",
                      "apiVersion": "2021-02-01",
                      "name": "[format('{0}/{1}', parameters('appName'), parameters('name'))]",
                      "properties": {
                        "AzureWebJobsStorage": "[if(not(empty(parameters('storageAccountId'))), format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};', last(split(parameters('storageAccountId'), '/')), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('storageAccountId'), '/')[2], split(parameters('storageAccountId'), '/')[4]), 'Microsoft.Storage/storageAccounts', last(split(parameters('storageAccountId'), '/'))), '2021-02-01').keys[0].value), null())]",
                        "AzureWebJobsDashboard": "[if(not(empty(parameters('storageAccountId'))), format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};', last(split(parameters('storageAccountId'), '/')), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('storageAccountId'), '/')[2], split(parameters('storageAccountId'), '/')[4]), 'Microsoft.Storage/storageAccounts', last(split(parameters('storageAccountId'), '/'))), '2021-02-01').keys[0].value), null())]",
                        "FUNCTIONS_EXTENSION_VERSION": "[if(and(equals(reference(resourceId('Microsoft.Web/sites', parameters('appName')), '2020-12-01', 'full').kind, 'functionapp'), not(empty(parameters('functionsExtensionVersion')))), parameters('functionsExtensionVersion'), null())]",
                        "FUNCTIONS_WORKER_RUNTIME": "[if(and(equals(reference(resourceId('Microsoft.Web/sites', parameters('appName')), '2020-12-01', 'full').kind, 'functionapp'), not(empty(parameters('functionsWorkerRuntime')))), parameters('functionsWorkerRuntime'), null())]",
                        "APPINSIGHTS_INSTRUMENTATIONKEY": "[if(not(empty(parameters('appInsightId'))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('appInsightId'), '/')[2], split(parameters('appInsightId'), '/')[4]), 'Microsoft.Insights/components', last(split(parameters('appInsightId'), '/'))), '2020-02-02').InstrumentationKey, '')]",
                        "APPLICATIONINSIGHTS_CONNECTION_STRING": "[if(not(empty(parameters('appInsightId'))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('appInsightId'), '/')[2], split(parameters('appInsightId'), '/')[4]), 'Microsoft.Insights/components', last(split(parameters('appInsightId'), '/'))), '2020-02-02').ConnectionString, '')]"
                      }
                    }
                  ],
                  "outputs": {
                    "configName": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the site config."
                      }
                    },
                    "configResourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Web/sites/config', parameters('appName'), parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the site config."
                      }
                    },
                    "configResourceGroup": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group the site config was deployed into."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "siteName": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the site."
              }
            },
            "siteResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Web/sites', parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the site."
              }
            },
            "siteResourceGroup": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The resource group the site was deployed into."
              }
            },
            "systemAssignedPrincipalId": {
              "type": "string",
              "value": "[if(parameters('systemAssignedIdentity'), reference(resourceId('Microsoft.Web/sites', parameters('name')), '2020-12-01', 'full').identity.principalId, '')]",
              "metadata": {
                "description": "The principal ID of the system assigned identity."
              }
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-appins', variables('appInsightsName')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', parameters('appServicePlanName'))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', parameters('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', variables('storageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-vendor-setup-ui-app', variables('namingPrefixHyphen'))]",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "kind": {
            "value": "app"
          },
          "name": {
            "value": "[format('{0}-vendor-setup-ui-app', variables('namingPrefixHyphen'))]"
          },
          "storageAccountId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', variables('storageAccountName')), '2020-10-01').outputs.storageAccountResourceId.value]"
          },
          "appInsightId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-appins', variables('appInsightsName'))), '2020-10-01').outputs.appInsightsResourceId.value]"
          },
          "appServicePlanId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', parameters('appServicePlanName')), '2020-10-01').outputs.appServicePlanResourceId.value]"
          },
          "diagnosticLogsRetentionInDays": {
            "value": "[parameters('diagnosticLogsRetentionInDays')]"
          },
          "appServiceEnvironmentId": {
            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('sharedResourceGroupName')), 'Microsoft.Web/hostingEnvironments', parameters('appServiceEnvironmentName'))]"
          },
          "tags": {
            "value": "[variables('resourceTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1124.51302",
              "templateHash": "5086708811691693692"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the site."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all Resources."
              }
            },
            "kind": {
              "type": "string",
              "allowedValues": [
                "functionapp",
                "app"
              ],
              "metadata": {
                "description": "Required. Type of site to deploy."
              }
            },
            "httpsOnly": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Configures a site to accept only HTTPS requests. Issues redirect for HTTP requests."
              }
            },
            "clientAffinityEnabled": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. If client affinity is enabled."
              }
            },
            "siteConfig": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Configuration of the app."
              }
            },
            "storageAccountId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Required if functionapp kind. The resource ID of the storage account to manage triggers and logging function executions."
              }
            },
            "functionsWorkerRuntime": {
              "type": "string",
              "defaultValue": "",
              "allowedValues": [
                "dotnet",
                "node",
                "python",
                "java",
                "powershell",
                ""
              ],
              "metadata": {
                "description": "Optional. Runtime of the function worker."
              }
            },
            "functionsExtensionVersion": {
              "type": "string",
              "defaultValue": "~3",
              "metadata": {
                "description": "Optional. Version if the function extension."
              }
            },
            "appServicePlanId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The resource ID of the app service plan to use for the site. If not provided, the appServicePlanObject is used to create a new plan."
              }
            },
            "appInsightId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The resource ID of the existing app insight to leverage for the app. If the resource ID is not provided, the appInsightObject can be used to create a new app insight."
              }
            },
            "appServiceEnvironmentId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The resource ID of the app service environment to use for this resource."
              }
            },
            "systemAssignedIdentity": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Enables system assigned managed identity on the resource."
              }
            },
            "userAssignedIdentities": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. The ID(s) to assign to the resource."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "diagnosticLogsRetentionInDays": {
              "type": "int",
              "defaultValue": 90,
              "maxValue": 365,
              "minValue": 0,
              "metadata": {
                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
              }
            },
            "diagnosticStorageAccountId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic storage account."
              }
            },
            "workspaceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of log analytics workspace."
              }
            },
            "eventHubAuthorizationRuleId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the event hub authorization rule for the event hub namespace in which the event hub should be created or streamed to."
              }
            },
            "eventHubName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Name of the event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
              }
            },
            "logsToEnable": {
              "type": "array",
              "defaultValue": "[if(equals(parameters('kind'), 'functionapp'), createArray('FunctionAppLogs'), createArray('AppServiceHTTPLogs', 'AppServiceConsoleLogs', 'AppServiceAppLogs', 'AppServiceFileAuditLogs', 'AppServiceAuditLogs'))]",
              "allowedValues": [
                "AppServiceHTTPLogs",
                "AppServiceConsoleLogs",
                "AppServiceAppLogs",
                "AppServiceFileAuditLogs",
                "AppServiceAuditLogs",
                "FunctionAppLogs"
              ],
              "metadata": {
                "description": "Optional. The name of logs that will be streamed."
              }
            },
            "metricsToEnable": {
              "type": "array",
              "defaultValue": [
                "AllMetrics"
              ],
              "allowedValues": [
                "AllMetrics"
              ],
              "metadata": {
                "description": "Optional. The name of metrics that will be streamed."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "diagnosticsLogs",
                "count": "[length(parameters('logsToEnable'))]",
                "input": {
                  "category": "[parameters('logsToEnable')[copyIndex('diagnosticsLogs')]]",
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              },
              {
                "name": "diagnosticsMetrics",
                "count": "[length(parameters('metricsToEnable'))]",
                "input": {
                  "category": "[parameters('metricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                  "timeGrain": null,
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              }
            ],
            "identityType": "[if(parameters('systemAssignedIdentity'), if(not(empty(parameters('userAssignedIdentities'))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
            "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]"
          },
          "resources": [
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2020-12-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "kind": "[parameters('kind')]",
              "tags": "[parameters('tags')]",
              "identity": "[variables('identity')]",
              "properties": {
                "serverFarmId": "[parameters('appServicePlanId')]",
                "httpsOnly": "[parameters('httpsOnly')]",
                "hostingEnvironmentProfile": "[if(not(empty(parameters('appServiceEnvironmentId'))), createObject('id', parameters('appServiceEnvironmentId')), null())]",
                "clientAffinityEnabled": "[parameters('clientAffinityEnabled')]",
                "siteConfig": "[parameters('siteConfig')]"
              }
            },
            {
              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('workspaceId')))), not(empty(parameters('eventHubAuthorizationRuleId')))), not(empty(parameters('eventHubName'))))]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Web/sites/{0}', parameters('name'))]",
              "name": "[format('{0}-diagnosticSettings', parameters('name'))]",
              "properties": {
                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                "workspaceId": "[if(not(empty(parameters('workspaceId'))), parameters('workspaceId'), null())]",
                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('eventHubAuthorizationRuleId'))), parameters('eventHubAuthorizationRuleId'), null())]",
                "eventHubName": "[if(not(empty(parameters('eventHubName'))), parameters('eventHubName'), null())]",
                "metrics": "[variables('diagnosticsMetrics')]",
                "logs": "[variables('diagnosticsLogs')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-Site-Config', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "appsettings"
                  },
                  "appName": {
                    "value": "[parameters('name')]"
                  },
                  "storageAccountId": {
                    "value": "[if(not(empty(parameters('storageAccountId'))), parameters('storageAccountId'), '')]"
                  },
                  "appInsightId": {
                    "value": "[if(not(empty(parameters('appInsightId'))), parameters('appInsightId'), '')]"
                  },
                  "functionsWorkerRuntime": {
                    "value": "[if(not(empty(parameters('functionsWorkerRuntime'))), parameters('functionsWorkerRuntime'), '')]"
                  },
                  "functionsExtensionVersion": {
                    "value": "[if(not(empty(parameters('functionsExtensionVersion'))), parameters('functionsExtensionVersion'), '~3')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1124.51302",
                      "templateHash": "13050009928190282449"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "allowedValues": [
                        "appsettings"
                      ],
                      "metadata": {
                        "description": "Required. Name of the site config."
                      }
                    },
                    "appName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the site parent resource."
                      }
                    },
                    "storageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Required if app of kind functionapp. Resource ID of the storage account to manage triggers and logging function executions."
                      }
                    },
                    "functionsWorkerRuntime": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "dotnet",
                        "node",
                        "python",
                        "java",
                        "powershell",
                        ""
                      ],
                      "metadata": {
                        "description": "Optional. Runtime of the function worker."
                      }
                    },
                    "functionsExtensionVersion": {
                      "type": "string",
                      "defaultValue": "~3",
                      "metadata": {
                        "description": "Optional. Version of the function extension."
                      }
                    },
                    "appInsightId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the app insight to leverage for this resource."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Web/sites/config",
                      "apiVersion": "2021-02-01",
                      "name": "[format('{0}/{1}', parameters('appName'), parameters('name'))]",
                      "properties": {
                        "AzureWebJobsStorage": "[if(not(empty(parameters('storageAccountId'))), format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};', last(split(parameters('storageAccountId'), '/')), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('storageAccountId'), '/')[2], split(parameters('storageAccountId'), '/')[4]), 'Microsoft.Storage/storageAccounts', last(split(parameters('storageAccountId'), '/'))), '2021-02-01').keys[0].value), null())]",
                        "AzureWebJobsDashboard": "[if(not(empty(parameters('storageAccountId'))), format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};', last(split(parameters('storageAccountId'), '/')), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('storageAccountId'), '/')[2], split(parameters('storageAccountId'), '/')[4]), 'Microsoft.Storage/storageAccounts', last(split(parameters('storageAccountId'), '/'))), '2021-02-01').keys[0].value), null())]",
                        "FUNCTIONS_EXTENSION_VERSION": "[if(and(equals(reference(resourceId('Microsoft.Web/sites', parameters('appName')), '2020-12-01', 'full').kind, 'functionapp'), not(empty(parameters('functionsExtensionVersion')))), parameters('functionsExtensionVersion'), null())]",
                        "FUNCTIONS_WORKER_RUNTIME": "[if(and(equals(reference(resourceId('Microsoft.Web/sites', parameters('appName')), '2020-12-01', 'full').kind, 'functionapp'), not(empty(parameters('functionsWorkerRuntime')))), parameters('functionsWorkerRuntime'), null())]",
                        "APPINSIGHTS_INSTRUMENTATIONKEY": "[if(not(empty(parameters('appInsightId'))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('appInsightId'), '/')[2], split(parameters('appInsightId'), '/')[4]), 'Microsoft.Insights/components', last(split(parameters('appInsightId'), '/'))), '2020-02-02').InstrumentationKey, '')]",
                        "APPLICATIONINSIGHTS_CONNECTION_STRING": "[if(not(empty(parameters('appInsightId'))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('appInsightId'), '/')[2], split(parameters('appInsightId'), '/')[4]), 'Microsoft.Insights/components', last(split(parameters('appInsightId'), '/'))), '2020-02-02').ConnectionString, '')]"
                      }
                    }
                  ],
                  "outputs": {
                    "configName": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the site config."
                      }
                    },
                    "configResourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Web/sites/config', parameters('appName'), parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the site config."
                      }
                    },
                    "configResourceGroup": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group the site config was deployed into."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "siteName": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the site."
              }
            },
            "siteResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Web/sites', parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the site."
              }
            },
            "siteResourceGroup": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The resource group the site was deployed into."
              }
            },
            "systemAssignedPrincipalId": {
              "type": "string",
              "value": "[if(parameters('systemAssignedIdentity'), reference(resourceId('Microsoft.Web/sites', parameters('name')), '2020-12-01', 'full').identity.principalId, '')]",
              "metadata": {
                "description": "The principal ID of the system assigned identity."
              }
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-appins', variables('appInsightsName')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', parameters('appServicePlanName'))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', parameters('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', variables('storageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-photo-prints-app', variables('namingPrefixHyphen'))]",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "kind": {
            "value": "app"
          },
          "name": {
            "value": "[format('{0}-photo-prints-app', variables('namingPrefixHyphen'))]"
          },
          "storageAccountId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', variables('storageAccountName')), '2020-10-01').outputs.storageAccountResourceId.value]"
          },
          "appInsightId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-appins', variables('appInsightsName'))), '2020-10-01').outputs.appInsightsResourceId.value]"
          },
          "appServicePlanId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', parameters('appServicePlanName')), '2020-10-01').outputs.appServicePlanResourceId.value]"
          },
          "diagnosticLogsRetentionInDays": {
            "value": "[parameters('diagnosticLogsRetentionInDays')]"
          },
          "appServiceEnvironmentId": {
            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('sharedResourceGroupName')), 'Microsoft.Web/hostingEnvironments', parameters('appServiceEnvironmentName'))]"
          },
          "tags": {
            "value": "[variables('resourceTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1124.51302",
              "templateHash": "5086708811691693692"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the site."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all Resources."
              }
            },
            "kind": {
              "type": "string",
              "allowedValues": [
                "functionapp",
                "app"
              ],
              "metadata": {
                "description": "Required. Type of site to deploy."
              }
            },
            "httpsOnly": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Configures a site to accept only HTTPS requests. Issues redirect for HTTP requests."
              }
            },
            "clientAffinityEnabled": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. If client affinity is enabled."
              }
            },
            "siteConfig": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Configuration of the app."
              }
            },
            "storageAccountId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Required if functionapp kind. The resource ID of the storage account to manage triggers and logging function executions."
              }
            },
            "functionsWorkerRuntime": {
              "type": "string",
              "defaultValue": "",
              "allowedValues": [
                "dotnet",
                "node",
                "python",
                "java",
                "powershell",
                ""
              ],
              "metadata": {
                "description": "Optional. Runtime of the function worker."
              }
            },
            "functionsExtensionVersion": {
              "type": "string",
              "defaultValue": "~3",
              "metadata": {
                "description": "Optional. Version if the function extension."
              }
            },
            "appServicePlanId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The resource ID of the app service plan to use for the site. If not provided, the appServicePlanObject is used to create a new plan."
              }
            },
            "appInsightId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The resource ID of the existing app insight to leverage for the app. If the resource ID is not provided, the appInsightObject can be used to create a new app insight."
              }
            },
            "appServiceEnvironmentId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The resource ID of the app service environment to use for this resource."
              }
            },
            "systemAssignedIdentity": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Enables system assigned managed identity on the resource."
              }
            },
            "userAssignedIdentities": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. The ID(s) to assign to the resource."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "diagnosticLogsRetentionInDays": {
              "type": "int",
              "defaultValue": 90,
              "maxValue": 365,
              "minValue": 0,
              "metadata": {
                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
              }
            },
            "diagnosticStorageAccountId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic storage account."
              }
            },
            "workspaceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of log analytics workspace."
              }
            },
            "eventHubAuthorizationRuleId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the event hub authorization rule for the event hub namespace in which the event hub should be created or streamed to."
              }
            },
            "eventHubName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Name of the event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
              }
            },
            "logsToEnable": {
              "type": "array",
              "defaultValue": "[if(equals(parameters('kind'), 'functionapp'), createArray('FunctionAppLogs'), createArray('AppServiceHTTPLogs', 'AppServiceConsoleLogs', 'AppServiceAppLogs', 'AppServiceFileAuditLogs', 'AppServiceAuditLogs'))]",
              "allowedValues": [
                "AppServiceHTTPLogs",
                "AppServiceConsoleLogs",
                "AppServiceAppLogs",
                "AppServiceFileAuditLogs",
                "AppServiceAuditLogs",
                "FunctionAppLogs"
              ],
              "metadata": {
                "description": "Optional. The name of logs that will be streamed."
              }
            },
            "metricsToEnable": {
              "type": "array",
              "defaultValue": [
                "AllMetrics"
              ],
              "allowedValues": [
                "AllMetrics"
              ],
              "metadata": {
                "description": "Optional. The name of metrics that will be streamed."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "diagnosticsLogs",
                "count": "[length(parameters('logsToEnable'))]",
                "input": {
                  "category": "[parameters('logsToEnable')[copyIndex('diagnosticsLogs')]]",
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              },
              {
                "name": "diagnosticsMetrics",
                "count": "[length(parameters('metricsToEnable'))]",
                "input": {
                  "category": "[parameters('metricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                  "timeGrain": null,
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              }
            ],
            "identityType": "[if(parameters('systemAssignedIdentity'), if(not(empty(parameters('userAssignedIdentities'))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
            "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]"
          },
          "resources": [
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2020-12-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "kind": "[parameters('kind')]",
              "tags": "[parameters('tags')]",
              "identity": "[variables('identity')]",
              "properties": {
                "serverFarmId": "[parameters('appServicePlanId')]",
                "httpsOnly": "[parameters('httpsOnly')]",
                "hostingEnvironmentProfile": "[if(not(empty(parameters('appServiceEnvironmentId'))), createObject('id', parameters('appServiceEnvironmentId')), null())]",
                "clientAffinityEnabled": "[parameters('clientAffinityEnabled')]",
                "siteConfig": "[parameters('siteConfig')]"
              }
            },
            {
              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('workspaceId')))), not(empty(parameters('eventHubAuthorizationRuleId')))), not(empty(parameters('eventHubName'))))]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Web/sites/{0}', parameters('name'))]",
              "name": "[format('{0}-diagnosticSettings', parameters('name'))]",
              "properties": {
                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                "workspaceId": "[if(not(empty(parameters('workspaceId'))), parameters('workspaceId'), null())]",
                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('eventHubAuthorizationRuleId'))), parameters('eventHubAuthorizationRuleId'), null())]",
                "eventHubName": "[if(not(empty(parameters('eventHubName'))), parameters('eventHubName'), null())]",
                "metrics": "[variables('diagnosticsMetrics')]",
                "logs": "[variables('diagnosticsLogs')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-Site-Config', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "appsettings"
                  },
                  "appName": {
                    "value": "[parameters('name')]"
                  },
                  "storageAccountId": {
                    "value": "[if(not(empty(parameters('storageAccountId'))), parameters('storageAccountId'), '')]"
                  },
                  "appInsightId": {
                    "value": "[if(not(empty(parameters('appInsightId'))), parameters('appInsightId'), '')]"
                  },
                  "functionsWorkerRuntime": {
                    "value": "[if(not(empty(parameters('functionsWorkerRuntime'))), parameters('functionsWorkerRuntime'), '')]"
                  },
                  "functionsExtensionVersion": {
                    "value": "[if(not(empty(parameters('functionsExtensionVersion'))), parameters('functionsExtensionVersion'), '~3')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1124.51302",
                      "templateHash": "13050009928190282449"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "allowedValues": [
                        "appsettings"
                      ],
                      "metadata": {
                        "description": "Required. Name of the site config."
                      }
                    },
                    "appName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the site parent resource."
                      }
                    },
                    "storageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Required if app of kind functionapp. Resource ID of the storage account to manage triggers and logging function executions."
                      }
                    },
                    "functionsWorkerRuntime": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "dotnet",
                        "node",
                        "python",
                        "java",
                        "powershell",
                        ""
                      ],
                      "metadata": {
                        "description": "Optional. Runtime of the function worker."
                      }
                    },
                    "functionsExtensionVersion": {
                      "type": "string",
                      "defaultValue": "~3",
                      "metadata": {
                        "description": "Optional. Version of the function extension."
                      }
                    },
                    "appInsightId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the app insight to leverage for this resource."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Web/sites/config",
                      "apiVersion": "2021-02-01",
                      "name": "[format('{0}/{1}', parameters('appName'), parameters('name'))]",
                      "properties": {
                        "AzureWebJobsStorage": "[if(not(empty(parameters('storageAccountId'))), format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};', last(split(parameters('storageAccountId'), '/')), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('storageAccountId'), '/')[2], split(parameters('storageAccountId'), '/')[4]), 'Microsoft.Storage/storageAccounts', last(split(parameters('storageAccountId'), '/'))), '2021-02-01').keys[0].value), null())]",
                        "AzureWebJobsDashboard": "[if(not(empty(parameters('storageAccountId'))), format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};', last(split(parameters('storageAccountId'), '/')), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('storageAccountId'), '/')[2], split(parameters('storageAccountId'), '/')[4]), 'Microsoft.Storage/storageAccounts', last(split(parameters('storageAccountId'), '/'))), '2021-02-01').keys[0].value), null())]",
                        "FUNCTIONS_EXTENSION_VERSION": "[if(and(equals(reference(resourceId('Microsoft.Web/sites', parameters('appName')), '2020-12-01', 'full').kind, 'functionapp'), not(empty(parameters('functionsExtensionVersion')))), parameters('functionsExtensionVersion'), null())]",
                        "FUNCTIONS_WORKER_RUNTIME": "[if(and(equals(reference(resourceId('Microsoft.Web/sites', parameters('appName')), '2020-12-01', 'full').kind, 'functionapp'), not(empty(parameters('functionsWorkerRuntime')))), parameters('functionsWorkerRuntime'), null())]",
                        "APPINSIGHTS_INSTRUMENTATIONKEY": "[if(not(empty(parameters('appInsightId'))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('appInsightId'), '/')[2], split(parameters('appInsightId'), '/')[4]), 'Microsoft.Insights/components', last(split(parameters('appInsightId'), '/'))), '2020-02-02').InstrumentationKey, '')]",
                        "APPLICATIONINSIGHTS_CONNECTION_STRING": "[if(not(empty(parameters('appInsightId'))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('appInsightId'), '/')[2], split(parameters('appInsightId'), '/')[4]), 'Microsoft.Insights/components', last(split(parameters('appInsightId'), '/'))), '2020-02-02').ConnectionString, '')]"
                      }
                    }
                  ],
                  "outputs": {
                    "configName": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the site config."
                      }
                    },
                    "configResourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Web/sites/config', parameters('appName'), parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the site config."
                      }
                    },
                    "configResourceGroup": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group the site config was deployed into."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "siteName": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the site."
              }
            },
            "siteResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Web/sites', parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the site."
              }
            },
            "siteResourceGroup": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The resource group the site was deployed into."
              }
            },
            "systemAssignedPrincipalId": {
              "type": "string",
              "value": "[if(parameters('systemAssignedIdentity'), reference(resourceId('Microsoft.Web/sites', parameters('name')), '2020-12-01', 'full').identity.principalId, '')]",
              "metadata": {
                "description": "The principal ID of the system assigned identity."
              }
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-appins', variables('appInsightsName')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', parameters('appServicePlanName'))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', parameters('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', variables('storageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-rx-checkout-app', variables('namingPrefixHyphen'))]",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "kind": {
            "value": "app"
          },
          "name": {
            "value": "[format('{0}-rx-checkout-app', variables('namingPrefixHyphen'))]"
          },
          "storageAccountId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', variables('storageAccountName')), '2020-10-01').outputs.storageAccountResourceId.value]"
          },
          "appInsightId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-appins', variables('appInsightsName'))), '2020-10-01').outputs.appInsightsResourceId.value]"
          },
          "appServicePlanId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', parameters('appServicePlanName')), '2020-10-01').outputs.appServicePlanResourceId.value]"
          },
          "diagnosticLogsRetentionInDays": {
            "value": "[parameters('diagnosticLogsRetentionInDays')]"
          },
          "appServiceEnvironmentId": {
            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('sharedResourceGroupName')), 'Microsoft.Web/hostingEnvironments', parameters('appServiceEnvironmentName'))]"
          },
          "tags": {
            "value": "[variables('resourceTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1124.51302",
              "templateHash": "5086708811691693692"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the site."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all Resources."
              }
            },
            "kind": {
              "type": "string",
              "allowedValues": [
                "functionapp",
                "app"
              ],
              "metadata": {
                "description": "Required. Type of site to deploy."
              }
            },
            "httpsOnly": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Configures a site to accept only HTTPS requests. Issues redirect for HTTP requests."
              }
            },
            "clientAffinityEnabled": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. If client affinity is enabled."
              }
            },
            "siteConfig": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Configuration of the app."
              }
            },
            "storageAccountId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Required if functionapp kind. The resource ID of the storage account to manage triggers and logging function executions."
              }
            },
            "functionsWorkerRuntime": {
              "type": "string",
              "defaultValue": "",
              "allowedValues": [
                "dotnet",
                "node",
                "python",
                "java",
                "powershell",
                ""
              ],
              "metadata": {
                "description": "Optional. Runtime of the function worker."
              }
            },
            "functionsExtensionVersion": {
              "type": "string",
              "defaultValue": "~3",
              "metadata": {
                "description": "Optional. Version if the function extension."
              }
            },
            "appServicePlanId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The resource ID of the app service plan to use for the site. If not provided, the appServicePlanObject is used to create a new plan."
              }
            },
            "appInsightId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The resource ID of the existing app insight to leverage for the app. If the resource ID is not provided, the appInsightObject can be used to create a new app insight."
              }
            },
            "appServiceEnvironmentId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The resource ID of the app service environment to use for this resource."
              }
            },
            "systemAssignedIdentity": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Enables system assigned managed identity on the resource."
              }
            },
            "userAssignedIdentities": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. The ID(s) to assign to the resource."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "diagnosticLogsRetentionInDays": {
              "type": "int",
              "defaultValue": 90,
              "maxValue": 365,
              "minValue": 0,
              "metadata": {
                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
              }
            },
            "diagnosticStorageAccountId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic storage account."
              }
            },
            "workspaceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of log analytics workspace."
              }
            },
            "eventHubAuthorizationRuleId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the event hub authorization rule for the event hub namespace in which the event hub should be created or streamed to."
              }
            },
            "eventHubName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Name of the event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
              }
            },
            "logsToEnable": {
              "type": "array",
              "defaultValue": "[if(equals(parameters('kind'), 'functionapp'), createArray('FunctionAppLogs'), createArray('AppServiceHTTPLogs', 'AppServiceConsoleLogs', 'AppServiceAppLogs', 'AppServiceFileAuditLogs', 'AppServiceAuditLogs'))]",
              "allowedValues": [
                "AppServiceHTTPLogs",
                "AppServiceConsoleLogs",
                "AppServiceAppLogs",
                "AppServiceFileAuditLogs",
                "AppServiceAuditLogs",
                "FunctionAppLogs"
              ],
              "metadata": {
                "description": "Optional. The name of logs that will be streamed."
              }
            },
            "metricsToEnable": {
              "type": "array",
              "defaultValue": [
                "AllMetrics"
              ],
              "allowedValues": [
                "AllMetrics"
              ],
              "metadata": {
                "description": "Optional. The name of metrics that will be streamed."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "diagnosticsLogs",
                "count": "[length(parameters('logsToEnable'))]",
                "input": {
                  "category": "[parameters('logsToEnable')[copyIndex('diagnosticsLogs')]]",
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              },
              {
                "name": "diagnosticsMetrics",
                "count": "[length(parameters('metricsToEnable'))]",
                "input": {
                  "category": "[parameters('metricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                  "timeGrain": null,
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              }
            ],
            "identityType": "[if(parameters('systemAssignedIdentity'), if(not(empty(parameters('userAssignedIdentities'))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
            "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]"
          },
          "resources": [
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2020-12-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "kind": "[parameters('kind')]",
              "tags": "[parameters('tags')]",
              "identity": "[variables('identity')]",
              "properties": {
                "serverFarmId": "[parameters('appServicePlanId')]",
                "httpsOnly": "[parameters('httpsOnly')]",
                "hostingEnvironmentProfile": "[if(not(empty(parameters('appServiceEnvironmentId'))), createObject('id', parameters('appServiceEnvironmentId')), null())]",
                "clientAffinityEnabled": "[parameters('clientAffinityEnabled')]",
                "siteConfig": "[parameters('siteConfig')]"
              }
            },
            {
              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('workspaceId')))), not(empty(parameters('eventHubAuthorizationRuleId')))), not(empty(parameters('eventHubName'))))]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Web/sites/{0}', parameters('name'))]",
              "name": "[format('{0}-diagnosticSettings', parameters('name'))]",
              "properties": {
                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                "workspaceId": "[if(not(empty(parameters('workspaceId'))), parameters('workspaceId'), null())]",
                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('eventHubAuthorizationRuleId'))), parameters('eventHubAuthorizationRuleId'), null())]",
                "eventHubName": "[if(not(empty(parameters('eventHubName'))), parameters('eventHubName'), null())]",
                "metrics": "[variables('diagnosticsMetrics')]",
                "logs": "[variables('diagnosticsLogs')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-Site-Config', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "appsettings"
                  },
                  "appName": {
                    "value": "[parameters('name')]"
                  },
                  "storageAccountId": {
                    "value": "[if(not(empty(parameters('storageAccountId'))), parameters('storageAccountId'), '')]"
                  },
                  "appInsightId": {
                    "value": "[if(not(empty(parameters('appInsightId'))), parameters('appInsightId'), '')]"
                  },
                  "functionsWorkerRuntime": {
                    "value": "[if(not(empty(parameters('functionsWorkerRuntime'))), parameters('functionsWorkerRuntime'), '')]"
                  },
                  "functionsExtensionVersion": {
                    "value": "[if(not(empty(parameters('functionsExtensionVersion'))), parameters('functionsExtensionVersion'), '~3')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1124.51302",
                      "templateHash": "13050009928190282449"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "allowedValues": [
                        "appsettings"
                      ],
                      "metadata": {
                        "description": "Required. Name of the site config."
                      }
                    },
                    "appName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the site parent resource."
                      }
                    },
                    "storageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Required if app of kind functionapp. Resource ID of the storage account to manage triggers and logging function executions."
                      }
                    },
                    "functionsWorkerRuntime": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "dotnet",
                        "node",
                        "python",
                        "java",
                        "powershell",
                        ""
                      ],
                      "metadata": {
                        "description": "Optional. Runtime of the function worker."
                      }
                    },
                    "functionsExtensionVersion": {
                      "type": "string",
                      "defaultValue": "~3",
                      "metadata": {
                        "description": "Optional. Version of the function extension."
                      }
                    },
                    "appInsightId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the app insight to leverage for this resource."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Web/sites/config",
                      "apiVersion": "2021-02-01",
                      "name": "[format('{0}/{1}', parameters('appName'), parameters('name'))]",
                      "properties": {
                        "AzureWebJobsStorage": "[if(not(empty(parameters('storageAccountId'))), format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};', last(split(parameters('storageAccountId'), '/')), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('storageAccountId'), '/')[2], split(parameters('storageAccountId'), '/')[4]), 'Microsoft.Storage/storageAccounts', last(split(parameters('storageAccountId'), '/'))), '2021-02-01').keys[0].value), null())]",
                        "AzureWebJobsDashboard": "[if(not(empty(parameters('storageAccountId'))), format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};', last(split(parameters('storageAccountId'), '/')), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('storageAccountId'), '/')[2], split(parameters('storageAccountId'), '/')[4]), 'Microsoft.Storage/storageAccounts', last(split(parameters('storageAccountId'), '/'))), '2021-02-01').keys[0].value), null())]",
                        "FUNCTIONS_EXTENSION_VERSION": "[if(and(equals(reference(resourceId('Microsoft.Web/sites', parameters('appName')), '2020-12-01', 'full').kind, 'functionapp'), not(empty(parameters('functionsExtensionVersion')))), parameters('functionsExtensionVersion'), null())]",
                        "FUNCTIONS_WORKER_RUNTIME": "[if(and(equals(reference(resourceId('Microsoft.Web/sites', parameters('appName')), '2020-12-01', 'full').kind, 'functionapp'), not(empty(parameters('functionsWorkerRuntime')))), parameters('functionsWorkerRuntime'), null())]",
                        "APPINSIGHTS_INSTRUMENTATIONKEY": "[if(not(empty(parameters('appInsightId'))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('appInsightId'), '/')[2], split(parameters('appInsightId'), '/')[4]), 'Microsoft.Insights/components', last(split(parameters('appInsightId'), '/'))), '2020-02-02').InstrumentationKey, '')]",
                        "APPLICATIONINSIGHTS_CONNECTION_STRING": "[if(not(empty(parameters('appInsightId'))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('appInsightId'), '/')[2], split(parameters('appInsightId'), '/')[4]), 'Microsoft.Insights/components', last(split(parameters('appInsightId'), '/'))), '2020-02-02').ConnectionString, '')]"
                      }
                    }
                  ],
                  "outputs": {
                    "configName": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the site config."
                      }
                    },
                    "configResourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Web/sites/config', parameters('appName'), parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the site config."
                      }
                    },
                    "configResourceGroup": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group the site config was deployed into."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "siteName": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the site."
              }
            },
            "siteResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Web/sites', parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the site."
              }
            },
            "siteResourceGroup": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The resource group the site was deployed into."
              }
            },
            "systemAssignedPrincipalId": {
              "type": "string",
              "value": "[if(parameters('systemAssignedIdentity'), reference(resourceId('Microsoft.Web/sites', parameters('name')), '2020-12-01', 'full').identity.principalId, '')]",
              "metadata": {
                "description": "The principal ID of the system assigned identity."
              }
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-appins', variables('appInsightsName')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', parameters('appServicePlanName'))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', parameters('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', variables('storageAccountName'))]"
      ]
    }
  ]
}