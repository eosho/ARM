{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.4.1124.51302",
      "templateHash": "16477753305564406440"
    }
  },
  "parameters": {
    "environmentName": {
      "type": "string",
      "allowedValues": [
        "int",
        "dev",
        "qa",
        "prod"
      ],
      "metadata": {
        "description": "The name of the deployment environment. Used for naming convention"
      }
    },
    "projectName": {
      "type": "string",
      "defaultValue": "cust-wap",
      "metadata": {
        "description": "Name of the project. Used for naming convention"
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {
        "DeptName": "Innovation",
        "LOB": "Innovation",
        "DeployDate": "01-07-2022",
        "Deployer": "Rudi Landolt",
        "CostCenter": "IT Innovation 5001",
        "CostCode": "1000608610",
        "LegalSubEntity": "Walgreen Co",
        "Sensitivity": "Non-Sensitive",
        "SubDivision": "Innovation",
        "Department": "Innovation",
        "SenType": "Not Applicable"
      },
      "metadata": {
        "description": "Azure resource tags metadata"
      }
    },
    "resourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "The name of the resource group for deployment."
      }
    },
    "virtualNetworkName": {
      "type": "string",
      "metadata": {
        "description": "The name of the virtual network."
      }
    },
    "virtualNetworkResourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "The name of the virtual network resource group."
      }
    },
    "apimApis": {
      "type": "array",
      "metadata": {
        "description": "APIM APIs."
      }
    },
    "apimPolicies": {
      "type": "array",
      "metadata": {
        "description": "APIM Policies."
      }
    },
    "apimAuthorizationServers": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. Authorization servers."
      }
    },
    "apimBackends": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. Backends."
      }
    },
    "apimCaches": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. Caches."
      }
    },
    "apimIdentityProviders": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. Identity providers."
      }
    },
    "apimNamedValues": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. Named values."
      }
    },
    "apimPortalSettings": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. Portal settings."
      }
    },
    "apimProducts": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. Products."
      }
    },
    "apimSubscriptions": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. Subscriptions."
      }
    },
    "apimResourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "Name of the shared APIM resource group."
      }
    },
    "apimPublisherEmail": {
      "type": "string",
      "defaultValue": "admin@contoso.com",
      "metadata": {
        "description": "The email address of the owner of the service"
      }
    },
    "apimPublisherName": {
      "type": "string",
      "defaultValue": "Contoso",
      "metadata": {
        "description": "The name of the publisher."
      }
    },
    "apimSku": {
      "type": "string",
      "defaultValue": "Developer",
      "allowedValues": [
        "Consumption",
        "Developer",
        "Basic",
        "Standard",
        "Premium"
      ],
      "metadata": {
        "description": "Optional. The pricing tier of this API Management service."
      }
    },
    "sharedResourceGroupName": {
      "type": "string",
      "defaultValue": "rpu-nprod-digital-eastus2-ase-02-rg",
      "metadata": {
        "description": "Name of the shared resource group."
      }
    },
    "appServiceEnvironmentName": {
      "type": "string",
      "defaultValue": "rpu-nprod-innov-eti-eastus2-asev3-01",
      "metadata": {
        "description": "Name of the shared App Service Environment."
      }
    },
    "appServicePlanName": {
      "type": "string",
      "defaultValue": "nprod-innov-eti-mvp-asp-01",
      "metadata": {
        "description": "The name of the app service plan to deploy."
      }
    },
    "diagnosticLogsRetentionInDays": {
      "type": "int",
      "defaultValue": 90,
      "maxValue": 90,
      "minValue": 0,
      "metadata": {
        "description": "Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
      }
    }
  },
  "variables": {
    "environmentNamingPrefix": "[if(variables('isProd'), 'prod', 'nprod')]",
    "namingPrefixHyphen": "[format('rpu-{0}-{1}', variables('environmentNamingPrefix'), parameters('projectName'))]",
    "namingPrefixNoHyphen": "[format('rpu{0}{1}', variables('environmentNamingPrefix'), parameters('projectName'))]",
    "isProd": "[equals(parameters('environmentName'), 'prod')]",
    "nonProdEnvTypeTag": {
      "EnvType": "Non-Production"
    },
    "prodEnvTypeTag": {
      "EnvType": "Production"
    },
    "resourceTags": "[union(parameters('tags'), if(variables('isProd'), variables('prodEnvTypeTag'), variables('nonProdEnvTypeTag')))]",
    "storageAccountName": "[format('{0}storg01', variables('namingPrefixNoHyphen'))]",
    "keyVaultName": "[format('{0}-kv-01', variables('namingPrefixHyphen'))]",
    "workspaceName": "[format('{0}-ws-01', variables('namingPrefixHyphen'))]",
    "appInsightsName": "[format('{0}-appins-01', variables('namingPrefixHyphen'))]",
    "cosmosDbName": "[format('{0}-cosmosdb-01', variables('namingPrefixHyphen'))]",
    "redisCacheName": "[format('{0}-rediscache-01', variables('namingPrefixHyphen'))]",
    "appGatewayName": "[format('{0}-appgw-01', variables('namingPrefixHyphen'))]",
    "apimName": "[format('{0}-apim-01', variables('namingPrefixHyphen'))]",
    "containerRegistryName": "[format('{0}acr01', variables('namingPrefixNoHyphen'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[parameters('resourceGroupName')]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[parameters('resourceGroupName')]"
          },
          "lockLevel": {
            "value": "ReadOnly"
          },
          "tags": {
            "value": "[variables('resourceTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1124.51302",
              "templateHash": "8742862611179439016"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the Resource Group"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[deployment().location]",
              "metadata": {
                "description": "Optional. Location of the Resource Group. It uses the deployment's location when not provided."
              }
            },
            "lockLevel": {
              "type": "string",
              "defaultValue": "NotSpecified",
              "metadata": {
                "description": "Optional. Specify the type of lock."
              },
              "allowedValues": [
                "CanNotDelete",
                "NotSpecified",
                "ReadOnly"
              ]
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags of the storage account resource."
              }
            }
          },
          "variables": {
            "lockNotes": {
              "CanNotDelete": "Cannot delete resource or child resources.",
              "ReadOnly": "Cannot modify the resource or child resources."
            }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/resourceGroups",
              "apiVersion": "2021-04-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {}
            },
            {
              "condition": "[not(equals(parameters('lockLevel'), 'NotSpecified'))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2017-04-01",
              "name": "[format('{0}-lock', parameters('name'))]",
              "properties": {
                "level": "[parameters('lockLevel')]",
                "notes": "[variables('lockNotes')[parameters('lockLevel')]]"
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "resourceGroupName": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the resource group"
              }
            },
            "resourceGroupResourceId": {
              "type": "string",
              "value": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the resource group"
              }
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[variables('redisCacheName')]",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "environmentName": {
            "value": "[parameters('environmentName')]"
          },
          "redisName": {
            "value": "[variables('redisCacheName')]"
          },
          "skuName": {
            "value": "Premium"
          },
          "skuCapacity": {
            "value": 1
          },
          "storageAccountId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', variables('storageAccountName')), '2020-10-01').outputs.storageAccountResourceId.value]"
          },
          "workspaceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', variables('workspaceName')), '2020-10-01').outputs.logAnalyticsResourceId.value]"
          },
          "subnetId": {
            "value": "[format('{0}/subnets/sharedSubnet', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('virtualNetworkResourceGroupName')), 'Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')))]"
          },
          "tags": {
            "value": "[variables('resourceTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1124.51302",
              "templateHash": "1854801160816345596"
            }
          },
          "parameters": {
            "environmentName": {
              "type": "string",
              "allowedValues": [
                "int",
                "dev",
                "qa",
                "prod"
              ],
              "metadata": {
                "description": "The name of the deployment environment. Used for naming convention"
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "description": "Resource tags.",
                "subTypeDefinition": {}
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location of all resources"
              }
            },
            "redisName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Redis cache."
              }
            },
            "skuName": {
              "type": "string",
              "defaultValue": "Premium",
              "allowedValues": [
                "Basic",
                "Standard",
                "Premium"
              ],
              "metadata": {
                "description": "The type of Redis cache to deploy. Valid values: (Basic, Standard, Premium)"
              }
            },
            "skuCapacity": {
              "type": "int",
              "defaultValue": 1,
              "maxValue": 6,
              "minValue": 0,
              "metadata": {
                "description": "The size of the Redis cache to deploy. Valid values: for C (Basic/Standard) family (0, 1, 2, 3, 4, 5, 6), for P (Premium) family (1, 2, 3, 4)."
              }
            },
            "subnetId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The full resource ID of a subnet in a virtual network to deploy the Redis cache in. Example format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1",
                "subType": "regex",
                "pattern": "^/subscriptions/[^/]*/resourceGroups/[^/]*/providers/Microsoft.(ClassicNetwork|Network)/virtualNetworks/[^/]*/subnets/[^/]*$"
              }
            },
            "staticIP": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Static IP address. Required when deploying a Redis cache inside an existing Azure Virtual Network.",
                "subType": "regex",
                "pattern": "^\\d+\\.\\d+\\.\\d+\\.\\d+$"
              }
            },
            "redisConfiguration": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc.",
                "subTypeDefinition": {}
              }
            },
            "enableNonSslPort": {
              "type": "bool",
              "defaultValue": false,
              "allowedValues": [
                false
              ],
              "metadata": {
                "description": "Specifies whether the non-ssl Redis server port (6379) is enabled."
              }
            },
            "replicasPerMaster": {
              "type": "int",
              "defaultValue": 0,
              "metadata": {
                "description": "The number of replicas to be created per master."
              }
            },
            "tenantSettings": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "A dictionary of tenant settings",
                "subTypeDefinition": {}
              }
            },
            "shardCount": {
              "type": "int",
              "defaultValue": 0,
              "metadata": {
                "description": "The number of shards to be created on a Premium Cluster Cache."
              }
            },
            "minimumTlsVersion": {
              "type": "string",
              "defaultValue": "1.2",
              "allowedValues": [
                "1.2"
              ],
              "metadata": {
                "description": "Optional: requires clients to use a specified TLS version (or higher) to connect (e,g, '1.0', '1.1', '1.2')"
              }
            },
            "zones": {
              "type": "array",
              "defaultValue": [],
              "allowedValues": [
                "1",
                "2",
                "3"
              ],
              "metadata": {
                "description": "A list of availability zones denoting where the resource needs to come from.",
                "subType": "string"
              }
            },
            "enableGeoReplication": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Whether or not to create a secondary Redis Cache and link them for geo-replication. Only available with Premium Sku. If set to true, secondaryRedisName, and secondaryLocation must be set."
              }
            },
            "secondaryRedisName": {
              "type": "string",
              "defaultValue": "[uniqueString(parameters('redisName'))]",
              "metadata": {
                "description": "The name of the linked server that is being added to the Redis cache."
              }
            },
            "secondaryLocation": {
              "type": "string",
              "defaultValue": "[parameters('location')]",
              "metadata": {
                "description": "Location of the linked redis cache."
              }
            },
            "secondarySubnetId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The full resource ID of a subnet in a virtual network to deploy the Redis cache in. Example format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1",
                "subType": "regex",
                "pattern": "^/subscriptions/[^/]*/resourceGroups/[^/]*/providers/Microsoft.(ClassicNetwork|Network)/virtualNetworks/[^/]*/subnets/[^/]*$"
              }
            },
            "secondaryStaticIP": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Static IP address. Required when deploying a Redis cache inside an existing Azure Virtual Network.",
                "subType": "regex",
                "pattern": "^\\d+\\.\\d+\\.\\d+\\.\\d+$"
              }
            },
            "dayOfWeek": {
              "type": "string",
              "defaultValue": "Sunday",
              "allowedValues": [
                "Monday",
                "Tuesday",
                "Wednesday",
                "Thursday",
                "Friday",
                "Saturday",
                "Sunday",
                "Everyday",
                "Weekend"
              ],
              "metadata": {
                "description": "Day of the week when a cache can be patched."
              }
            },
            "startHourUtc": {
              "type": "int",
              "defaultValue": 2,
              "maxValue": 23,
              "minValue": 0,
              "metadata": {
                "description": "Start hour after which cache patching can start."
              }
            },
            "maintenanceWindow": {
              "type": "string",
              "defaultValue": "PT5H",
              "metadata": {
                "description": "ISO8601 timespan specifying how much time cache patching can take. "
              }
            },
            "firewallRules": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "subType": "object",
                "subTypeDefinition": {
                  "firewallRuleName": {
                    "type": "string",
                    "metadata": {
                      "description": "The name of the firewall rule.",
                      "required": "yes"
                    }
                  },
                  "startIP": {
                    "type": "string",
                    "metadata": {
                      "description": "lowest IP address included in the range",
                      "required": "yes"
                    }
                  },
                  "endIP": {
                    "type": "string",
                    "metadata": {
                      "description": "highest IP address included in the range",
                      "required": "yes"
                    }
                  }
                }
              }
            },
            "storageAccountId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "**This feature is not currently supported.** The full resource ID of a storage account to use for persistence with Redis cache. Example format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.Storage/storageAccounts/name",
                "subType": "regex",
                "pattern": "^/subscriptions/[^/]*/resourceGroups/[^/]*/providers/Microsoft.Storage/storageAccounts/[^/]*$"
              }
            },
            "diagnosticLogsRetentionInDays": {
              "type": "int",
              "defaultValue": 90,
              "maxValue": 365,
              "minValue": 0,
              "metadata": {
                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
              }
            },
            "diagnosticStorageAccountId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic storage account."
              }
            },
            "workspaceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of log analytics."
              }
            },
            "eventHubAuthorizationRuleId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
              }
            },
            "eventHubName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Name of the event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
              }
            },
            "metricsToEnable": {
              "type": "array",
              "defaultValue": [
                "AllMetrics"
              ],
              "allowedValues": [
                "AllMetrics"
              ],
              "metadata": {
                "description": "Optional. The name of metrics that will be streamed."
              }
            },
            "logsToEnable": {
              "type": "array",
              "defaultValue": [
                "ConnectedClientList"
              ],
              "allowedValues": [
                "ConnectedClientList"
              ],
              "metadata": {
                "description": "Optional. The name of logs that will be streamed."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "diagnosticsLogs",
                "count": "[length(parameters('logsToEnable'))]",
                "input": {
                  "category": "[parameters('logsToEnable')[copyIndex('diagnosticsLogs')]]",
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              },
              {
                "name": "diagnosticsMetrics",
                "count": "[length(parameters('metricsToEnable'))]",
                "input": {
                  "category": "[parameters('metricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                  "timeGrain": null,
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              }
            ],
            "isPremium": "[equals(parameters('skuName'), 'Premium')]",
            "isReplicated": "[and(variables('isPremium'), parameters('enableGeoReplication'))]",
            "isProd": "[equals(parameters('environmentName'), 'prod')]",
            "isNonProd": "[not(variables('isProd'))]",
            "prodIpAddresses": [
              {
                "firewallRuleName": "prod_centralus",
                "startIP": "40.67.188.50",
                "endIP": "40.67.188.50"
              },
              {
                "firewallRuleName": "prod_eastus2",
                "startIP": "52.177.84.230",
                "endIP": "52.177.84.230"
              },
              {
                "firewallRuleName": "prod_northeurope",
                "startIP": "52.155.224.242",
                "endIP": "52.155.224.242"
              },
              {
                "firewallRuleName": "prod_westeurope",
                "startIP": "51.105.163.210",
                "endIP": "51.105.163.210"
              },
              {
                "firewallRuleName": "prod_preleap",
                "startIP": "20.36.252.188",
                "endIP": "20.36.252.188"
              }
            ],
            "nprodIpAddresses": [
              {
                "firewallRuleName": "nprod_centralus",
                "startIP": "52.230.220.128",
                "endIP": "52.230.220.128"
              },
              {
                "firewallRuleName": "nprod_eastus2",
                "startIP": "40.65.233.76",
                "endIP": "40.65.233.76"
              },
              {
                "firewallRuleName": "nprod_northeurope",
                "startIP": "52.155.224.148",
                "endIP": "52.155.224.148"
              },
              {
                "firewallRuleName": "nprod_westeurope",
                "startIP": "51.105.144.11",
                "endIP": "51.105.144.11"
              },
              {
                "firewallRuleName": "nprod_legacy",
                "startIP": "20.42.25.22",
                "endIP": "20.42.25.22"
              }
            ],
            "defaultFirewallRule": {
              "firewallRuleName": "DEFAULT",
              "startIP": "0.0.0.0",
              "endIP": "0.0.0.0"
            },
            "nprodFirewallRules": "[union(parameters('firewallRules'), variables('nprodIpAddresses'))]",
            "prodFirewallRules": "[if(empty(parameters('firewallRules')), array(variables('defaultFirewallRule')), union(parameters('firewallRules'), variables('prodIpAddresses')))]",
            "firewallRules_var": "[if(variables('isNonProd'), variables('nprodFirewallRules'), variables('prodFirewallRules'))]",
            "storageAccountName": "[last(split(parameters('storageAccountId'), '/'))]",
            "secondaryRedisName_var": "[if(not(empty(parameters('secondaryRedisName'))), parameters('secondaryRedisName'), uniqueString(parameters('redisName')))]"
          },
          "resources": [
            {
              "type": "Microsoft.Cache/redis",
              "apiVersion": "2020-12-01",
              "name": "[parameters('redisName')]",
              "tags": "[parameters('tags')]",
              "location": "[parameters('location')]",
              "zones": "[if(not(empty(parameters('zones'))), parameters('zones'), json('null'))]",
              "properties": {
                "sku": {
                  "name": "[parameters('skuName')]",
                  "family": "[if(variables('isPremium'), 'P', 'C')]",
                  "capacity": "[parameters('skuCapacity')]"
                },
                "minimumTlsVersion": "[parameters('minimumTlsVersion')]",
                "enableNonSslPort": "[parameters('enableNonSslPort')]",
                "redisConfiguration": "[union(parameters('redisConfiguration'), createObject('rdb-backup-enabled', true(), 'rdb-backup-frequency', '60', 'rdb-storage-connection-string', format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1}', variables('storageAccountName'), listKeys(parameters('storageAccountId'), '2016-01-01').keys[0].value)))]",
                "replicasPerMaster": "[if(equals(parameters('replicasPerMaster'), 0), json('null'), parameters('replicasPerMaster'))]",
                "tenantSettings": "[parameters('tenantSettings')]",
                "subnetId": "[if(variables('isPremium'), parameters('subnetId'), json('null'))]",
                "staticIP": "[if(variables('isPremium'), parameters('staticIP'), json('null'))]",
                "shardCount": "[if(and(variables('isPremium'), greater(parameters('shardCount'), 0)), parameters('shardCount'), json('null'))]"
              }
            },
            {
              "condition": "[variables('isReplicated')]",
              "type": "Microsoft.Cache/redis",
              "apiVersion": "2020-12-01",
              "name": "[variables('secondaryRedisName_var')]",
              "tags": "[parameters('tags')]",
              "location": "[parameters('secondaryLocation')]",
              "zones": "[parameters('zones')]",
              "properties": {
                "sku": {
                  "name": "Premium",
                  "family": "P",
                  "capacity": "[parameters('skuCapacity')]"
                },
                "minimumTlsVersion": "[parameters('minimumTlsVersion')]",
                "enableNonSslPort": "[parameters('enableNonSslPort')]",
                "redisConfiguration": "[parameters('redisConfiguration')]",
                "replicasPerMaster": "[if(equals(parameters('replicasPerMaster'), 0), null(), parameters('replicasPerMaster'))]",
                "tenantSettings": "[parameters('tenantSettings')]",
                "subnetId": "[parameters('secondarySubnetId')]",
                "staticIP": "[parameters('secondaryStaticIP')]",
                "shardCount": "[parameters('shardCount')]"
              }
            },
            {
              "condition": "[variables('isReplicated')]",
              "type": "Microsoft.Cache/redis/linkedServers",
              "apiVersion": "2020-12-01",
              "name": "[format('{0}/{1}', parameters('redisName'), variables('secondaryRedisName_var'))]",
              "properties": {
                "linkedRedisCacheId": "[if(variables('isReplicated'), resourceId('Microsoft.Cache/redis', variables('secondaryRedisName_var')), null())]",
                "linkedRedisCacheLocation": "[parameters('secondaryLocation')]",
                "serverRole": "Secondary"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Cache/redis', parameters('redisName'))]",
                "[resourceId('Microsoft.Cache/redis', variables('secondaryRedisName_var'))]"
              ]
            },
            {
              "type": "Microsoft.Cache/redis/patchSchedules",
              "apiVersion": "2020-12-01",
              "name": "[format('{0}/{1}', parameters('redisName'), 'default')]",
              "properties": {
                "scheduleEntries": [
                  {
                    "dayOfWeek": "[parameters('dayOfWeek')]",
                    "startHourUtc": "[parameters('startHourUtc')]",
                    "maintenanceWindow": "[parameters('maintenanceWindow')]"
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Cache/redis', parameters('redisName'))]"
              ]
            },
            {
              "condition": "[variables('isReplicated')]",
              "type": "Microsoft.Cache/redis/patchSchedules",
              "apiVersion": "2020-12-01",
              "name": "[format('{0}/{1}', variables('secondaryRedisName_var'), 'default')]",
              "properties": {
                "scheduleEntries": [
                  {
                    "dayOfWeek": "[parameters('dayOfWeek')]",
                    "startHourUtc": "[parameters('startHourUtc')]",
                    "maintenanceWindow": "[parameters('maintenanceWindow')]"
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Cache/redis', variables('secondaryRedisName_var'))]"
              ]
            },
            {
              "condition": "[or(not(variables('isPremium')), not(empty(parameters('firewallRules'))))]",
              "copy": {
                "name": "redisName_firewallRules",
                "count": "[length(variables('firewallRules_var'))]"
              },
              "type": "Microsoft.Cache/redis/firewallRules",
              "apiVersion": "2020-12-01",
              "name": "[format('{0}/{1}', parameters('redisName'), variables('firewallRules_var')[copyIndex()].firewallRuleName)]",
              "properties": {
                "startIP": "[variables('firewallRules_var')[copyIndex()].startIP]",
                "endIP": "[variables('firewallRules_var')[copyIndex()].endIP]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Cache/redis', parameters('redisName'))]"
              ]
            },
            {
              "condition": "[and(variables('isReplicated'), not(empty(parameters('firewallRules'))))]",
              "copy": {
                "name": "secondaryRedisName_firewallRules",
                "count": "[length(variables('firewallRules_var'))]"
              },
              "type": "Microsoft.Cache/redis/firewallRules",
              "apiVersion": "2020-12-01",
              "name": "[format('{0}/{1}', variables('secondaryRedisName_var'), variables('firewallRules_var')[copyIndex()].firewallRuleName)]",
              "properties": {
                "startIP": "[variables('firewallRules_var')[copyIndex()].startIP]",
                "endIP": "[variables('firewallRules_var')[copyIndex()].endIP]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Cache/redis', variables('secondaryRedisName_var'))]"
              ]
            },
            {
              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('workspaceId')))), not(empty(parameters('eventHubAuthorizationRuleId')))), not(empty(parameters('eventHubName'))))]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Cache/redis/{0}', parameters('redisName'))]",
              "name": "[format('{0}-diagnosticSettings', parameters('redisName'))]",
              "properties": {
                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                "workspaceId": "[if(not(empty(parameters('workspaceId'))), parameters('workspaceId'), null())]",
                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('eventHubAuthorizationRuleId'))), parameters('eventHubAuthorizationRuleId'), null())]",
                "eventHubName": "[if(not(empty(parameters('eventHubName'))), parameters('eventHubName'), null())]",
                "metrics": "[variables('diagnosticsMetrics')]",
                "logs": "[variables('diagnosticsLogs')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Cache/redis', parameters('redisName'))]"
              ]
            }
          ],
          "outputs": {
            "redisCacheResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Cache/redis', parameters('redisName'))]",
              "metadata": {
                "description": "The resource ID of the deployed redis cache."
              }
            },
            "redisCacheName": {
              "type": "string",
              "value": "[parameters('redisName')]",
              "metadata": {
                "description": "The name of the deployed redis cache"
              }
            },
            "redisCacheResourceGroup": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The resource group of the deployed redis cache"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', parameters('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', variables('storageAccountName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', variables('workspaceName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[variables('cosmosDbName')]",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('cosmosDbName')]"
          },
          "databaseAccountOfferType": {
            "value": "Standard"
          },
          "locations": {
            "value": [
              {
                "locationName": "East US 2",
                "failoverPriority": 0,
                "isZoneRedundant": false
              }
            ]
          },
          "defaultConsistencyLevel": {
            "value": "Session"
          },
          "sqlDatabases": {
            "value": [
              {
                "name": "[format('{0}-sql-db', variables('cosmosDbName'))]",
                "containers": [
                  {
                    "name": "container-001",
                    "paths": [
                      "/myPartitionKey"
                    ],
                    "kind": "Hash"
                  }
                ]
              }
            ]
          },
          "diagnosticLogsRetentionInDays": {
            "value": "[parameters('diagnosticLogsRetentionInDays')]"
          },
          "workspaceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', variables('workspaceName')), '2020-10-01').outputs.logAnalyticsResourceId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1124.51302",
              "templateHash": "15431497968174913564"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the Database Account"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags of the Database Account resource."
              }
            },
            "systemAssignedIdentity": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Enables system assigned managed identity on the resource."
              }
            },
            "userAssignedIdentities": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. The ID(s) to assign to the resource."
              }
            },
            "databaseAccountOfferType": {
              "type": "string",
              "defaultValue": "Standard",
              "allowedValues": [
                "Standard"
              ],
              "metadata": {
                "description": "Optional. The offer type for the Cosmos DB database account."
              }
            },
            "locations": {
              "type": "array",
              "metadata": {
                "description": "Required. Locations enabled for the Cosmos DB account."
              }
            },
            "defaultConsistencyLevel": {
              "type": "string",
              "defaultValue": "Session",
              "metadata": {
                "description": "Optional. The default consistency level of the Cosmos DB account."
              },
              "allowedValues": [
                "Eventual",
                "ConsistentPrefix",
                "Session",
                "BoundedStaleness",
                "Strong"
              ]
            },
            "automaticFailover": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable automatic failover for regions"
              }
            },
            "maxStalenessPrefix": {
              "type": "int",
              "defaultValue": 100000,
              "metadata": {
                "description": "Optional. Max stale requests. Required for BoundedStaleness. Valid ranges, Single Region: 10 to 1000000. Multi Region: 100000 to 1000000."
              },
              "maxValue": 2147483647,
              "minValue": 10
            },
            "maxIntervalInSeconds": {
              "type": "int",
              "defaultValue": 300,
              "metadata": {
                "description": "Optional. Max lag time (minutes). Required for BoundedStaleness. Valid ranges, Single Region: 5 to 84600. Multi Region: 300 to 86400."
              },
              "maxValue": 86400,
              "minValue": 5
            },
            "serverVersion": {
              "type": "string",
              "defaultValue": "4.0",
              "allowedValues": [
                "3.2",
                "3.6",
                "4.0"
              ],
              "metadata": {
                "description": "Optional. Specifies the MongoDB server version to use."
              }
            },
            "sqlDatabases": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. SQL Databases configurations"
              }
            },
            "mongodbDatabases": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. MongoDB Databases configurations"
              }
            },
            "diagnosticLogsRetentionInDays": {
              "type": "int",
              "defaultValue": 365,
              "maxValue": 365,
              "minValue": 0,
              "metadata": {
                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
              }
            },
            "diagnosticStorageAccountId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic storage account."
              }
            },
            "workspaceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the log analytics workspace."
              }
            },
            "eventHubAuthorizationRuleId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
              }
            },
            "eventHubName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Name of the event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
              }
            },
            "logsToEnable": {
              "type": "array",
              "defaultValue": [
                "DataPlaneRequests",
                "MongoRequests",
                "QueryRuntimeStatistics",
                "PartitionKeyStatistics",
                "PartitionKeyRUConsumption",
                "ControlPlaneRequests",
                "CassandraRequests",
                "GremlinRequests",
                "TableApiRequests"
              ],
              "allowedValues": [
                "DataPlaneRequests",
                "MongoRequests",
                "QueryRuntimeStatistics",
                "PartitionKeyStatistics",
                "PartitionKeyRUConsumption",
                "ControlPlaneRequests",
                "CassandraRequests",
                "GremlinRequests",
                "TableApiRequests"
              ],
              "metadata": {
                "description": "Optional. The name of logs that will be streamed."
              }
            },
            "metricsToEnable": {
              "type": "array",
              "defaultValue": [
                "Requests"
              ],
              "allowedValues": [
                "Requests"
              ],
              "metadata": {
                "description": "Optional. The name of metrics that will be streamed."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "diagnosticsLogs",
                "count": "[length(parameters('logsToEnable'))]",
                "input": {
                  "category": "[parameters('logsToEnable')[copyIndex('diagnosticsLogs')]]",
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              },
              {
                "name": "diagnosticsMetrics",
                "count": "[length(parameters('metricsToEnable'))]",
                "input": {
                  "category": "[parameters('metricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                  "timeGrain": null,
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              },
              {
                "name": "databaseAccount_locations",
                "count": "[length(parameters('locations'))]",
                "input": {
                  "failoverPriority": "[parameters('locations')[copyIndex('databaseAccount_locations')].failoverPriority]",
                  "isZoneRedundant": "[parameters('locations')[copyIndex('databaseAccount_locations')].isZoneRedundant]",
                  "locationName": "[parameters('locations')[copyIndex('databaseAccount_locations')].locationName]"
                }
              }
            ],
            "identityType": "[if(parameters('systemAssignedIdentity'), if(not(empty(parameters('userAssignedIdentities'))), 'SystemAssigned, UserAssigned', 'SystemAssigned'), if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
            "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]",
            "consistencyPolicy": {
              "Eventual": {
                "defaultConsistencyLevel": "Eventual"
              },
              "ConsistentPrefix": {
                "defaultConsistencyLevel": "ConsistentPrefix"
              },
              "Session": {
                "defaultConsistencyLevel": "Session"
              },
              "BoundedStaleness": {
                "defaultConsistencyLevel": "BoundedStaleness",
                "maxStalenessPrefix": "[parameters('maxStalenessPrefix')]",
                "maxIntervalInSeconds": "[parameters('maxIntervalInSeconds')]"
              },
              "Strong": {
                "defaultConsistencyLevel": "Strong"
              }
            },
            "kind": "[if(not(empty(parameters('sqlDatabases'))), 'GlobalDocumentDB', if(not(empty(parameters('mongodbDatabases'))), 'MongoDB', 'Parse'))]",
            "databaseAccount_properties": "[if(not(empty(parameters('sqlDatabases'))), createObject('consistencyPolicy', variables('consistencyPolicy')[parameters('defaultConsistencyLevel')], 'locations', variables('databaseAccount_locations'), 'databaseAccountOfferType', parameters('databaseAccountOfferType'), 'enableAutomaticFailover', parameters('automaticFailover')), if(not(empty(parameters('mongodbDatabases'))), createObject('consistencyPolicy', variables('consistencyPolicy')[parameters('defaultConsistencyLevel')], 'locations', variables('databaseAccount_locations'), 'databaseAccountOfferType', parameters('databaseAccountOfferType'), 'apiProperties', createObject('serverVersion', parameters('serverVersion'))), createObject('databaseAccountOfferType', parameters('databaseAccountOfferType'))))]"
          },
          "resources": [
            {
              "type": "Microsoft.DocumentDB/databaseAccounts",
              "apiVersion": "2021-06-15",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "identity": "[variables('identity')]",
              "kind": "[variables('kind')]",
              "properties": "[variables('databaseAccount_properties')]"
            },
            {
              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('workspaceId')))), not(empty(parameters('eventHubAuthorizationRuleId')))), not(empty(parameters('eventHubName'))))]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.DocumentDB/databaseAccounts/{0}', parameters('name'))]",
              "name": "[format('{0}-diagnosticsetting', parameters('name'))]",
              "properties": {
                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                "workspaceId": "[if(not(empty(parameters('workspaceId'))), parameters('workspaceId'), null())]",
                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('eventHubAuthorizationRuleId'))), parameters('eventHubAuthorizationRuleId'), null())]",
                "eventHubName": "[if(not(empty(parameters('eventHubName'))), parameters('eventHubName'), null())]",
                "metrics": "[variables('diagnosticsMetrics')]",
                "logs": "[variables('diagnosticsLogs')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('name'))]"
              ]
            },
            {
              "copy": {
                "name": "sqlDatabases_resource",
                "count": "[length(parameters('sqlDatabases'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-sqldb-{1}', uniqueString(deployment().name, parameters('location')), parameters('sqlDatabases')[copyIndex()].name)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "databaseAccountName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[parameters('sqlDatabases')[copyIndex()].name]"
                  },
                  "containers": {
                    "value": "[if(contains(parameters('sqlDatabases')[copyIndex()], 'containers'), parameters('sqlDatabases')[copyIndex()].containers, createArray())]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1124.51302",
                      "templateHash": "3481068824643568988"
                    }
                  },
                  "parameters": {
                    "databaseAccountName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. ID of the Cosmos DB database account."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the SQL database "
                      }
                    },
                    "containers": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of containers to deploy in the SQL database."
                      }
                    },
                    "throughput": {
                      "type": "int",
                      "defaultValue": 400,
                      "metadata": {
                        "description": "Optional. Request units per second"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the SQL database resource."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
                      "apiVersion": "2021-06-15",
                      "name": "[format('{0}/{1}', parameters('databaseAccountName'), parameters('name'))]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "resource": {
                          "id": "[parameters('name')]"
                        },
                        "options": {
                          "throughput": "[parameters('throughput')]"
                        }
                      }
                    },
                    {
                      "copy": {
                        "name": "container",
                        "count": "[length(parameters('containers'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-sqldb-{1}', uniqueString(deployment().name, parameters('name')), parameters('containers')[copyIndex()].name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "databaseAccountName": {
                            "value": "[parameters('databaseAccountName')]"
                          },
                          "sqlDatabaseName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[parameters('containers')[copyIndex()].name]"
                          },
                          "paths": {
                            "value": "[parameters('containers')[copyIndex()].paths]"
                          },
                          "kind": {
                            "value": "[parameters('containers')[copyIndex()].kind]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1124.51302",
                              "templateHash": "6421364350723786297"
                            }
                          },
                          "parameters": {
                            "databaseAccountName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the Database Account"
                              }
                            },
                            "sqlDatabaseName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the SQL Database "
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the container."
                              }
                            },
                            "throughput": {
                              "type": "int",
                              "defaultValue": 400,
                              "metadata": {
                                "description": "Optional. Request Units per second"
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags of the SQL Database resource."
                              }
                            },
                            "paths": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. List of paths using which data within the container can be partitioned"
                              }
                            },
                            "kind": {
                              "type": "string",
                              "defaultValue": "Hash",
                              "allowedValues": [
                                "Hash",
                                "MultiHash",
                                "Range"
                              ],
                              "metadata": {
                                "description": "Optional. Indicates the kind of algorithm used for partitioning"
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
                              "apiVersion": "2021-07-01-preview",
                              "name": "[format('{0}/{1}/{2}', parameters('databaseAccountName'), parameters('sqlDatabaseName'), parameters('name'))]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "resource": {
                                  "id": "[parameters('name')]",
                                  "partitionKey": {
                                    "paths": "[parameters('paths')]",
                                    "kind": "[parameters('kind')]"
                                  }
                                },
                                "options": {
                                  "throughput": "[parameters('throughput')]"
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "containerName": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the container."
                              }
                            },
                            "containerResourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers', parameters('databaseAccountName'), parameters('sqlDatabaseName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the container."
                              }
                            },
                            "containerResourceGroup": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The name of the resource group the container was created in."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('databaseAccountName'), parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "sqlDatabaseName": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the SQL database."
                      }
                    },
                    "sqlDatabaseResourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('databaseAccountName'), parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the SQL database."
                      }
                    },
                    "sqlDatabaseResourceGroup": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The name of the resource group the SQL database was created in."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('name'))]"
              ]
            },
            {
              "copy": {
                "name": "mongodbDatabases_resource",
                "count": "[length(parameters('mongodbDatabases'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-mongodb-{1}', uniqueString(deployment().name, parameters('location')), parameters('mongodbDatabases')[copyIndex()].name)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "databaseAccountName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[parameters('mongodbDatabases')[copyIndex()].name]"
                  },
                  "collections": {
                    "value": "[if(contains(parameters('mongodbDatabases')[copyIndex()], 'collections'), parameters('mongodbDatabases')[copyIndex()].collections, createArray())]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1124.51302",
                      "templateHash": "16872464687804560194"
                    }
                  },
                  "parameters": {
                    "databaseAccountName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the Cosmos DB database account."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the mongodb database"
                      }
                    },
                    "throughput": {
                      "type": "int",
                      "defaultValue": 400,
                      "metadata": {
                        "description": "Optional. Name of the mongodb database"
                      }
                    },
                    "collections": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Collections in the mongodb database"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.DocumentDB/databaseAccounts/mongodbDatabases",
                      "apiVersion": "2021-07-01-preview",
                      "name": "[format('{0}/{1}', parameters('databaseAccountName'), parameters('name'))]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "resource": {
                          "id": "[parameters('name')]"
                        },
                        "options": {
                          "throughput": "[parameters('throughput')]"
                        }
                      }
                    },
                    {
                      "copy": {
                        "name": "mongodbDatabase_collections",
                        "count": "[length(parameters('collections'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-collection-{1}', uniqueString(deployment().name, parameters('name')), parameters('collections')[copyIndex()].name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "databaseAccountName": {
                            "value": "[parameters('databaseAccountName')]"
                          },
                          "mongodbDatabaseName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[parameters('collections')[copyIndex()].name]"
                          },
                          "indexes": {
                            "value": "[parameters('collections')[copyIndex()].indexes]"
                          },
                          "shardKey": {
                            "value": "[parameters('collections')[copyIndex()].shardKey]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1124.51302",
                              "templateHash": "8407057180408222091"
                            }
                          },
                          "parameters": {
                            "databaseAccountName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the Cosmos DB database account."
                              }
                            },
                            "mongodbDatabaseName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the mongodb database"
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the collection"
                              }
                            },
                            "throughput": {
                              "type": "int",
                              "defaultValue": 400,
                              "metadata": {
                                "description": "Optional. Name of the mongodb database"
                              }
                            },
                            "indexes": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. Indexes for the collection"
                              }
                            },
                            "shardKey": {
                              "type": "object",
                              "metadata": {
                                "description": "Required. ShardKey for the collection"
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.DocumentDB/databaseAccounts/mongodbDatabases/collections",
                              "apiVersion": "2021-07-01-preview",
                              "name": "[format('{0}/{1}/{2}', parameters('databaseAccountName'), parameters('mongodbDatabaseName'), parameters('name'))]",
                              "properties": {
                                "options": {
                                  "throughput": "[parameters('throughput')]"
                                },
                                "resource": {
                                  "id": "[parameters('name')]",
                                  "indexes": "[parameters('indexes')]",
                                  "shardKey": "[parameters('shardKey')]"
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "collectionName": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the mongodb database."
                              }
                            },
                            "collectionResourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts/mongodbDatabases/collections', parameters('databaseAccountName'), parameters('mongodbDatabaseName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the mongodb database."
                              }
                            },
                            "collectionResourceGroup": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The name of the resource group the mongodb database was created in."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DocumentDB/databaseAccounts/mongodbDatabases', parameters('databaseAccountName'), parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "mongodbDatabaseName": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the mongodb database."
                      }
                    },
                    "mongodbDatabaseResourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts/mongodbDatabases', parameters('databaseAccountName'), parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the mongodb database."
                      }
                    },
                    "mongodbDatabaseResourceGroup": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The name of the resource group the mongodb database was created in."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "databaseAccountName": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the database account."
              }
            },
            "databaseAccountResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the database account."
              }
            },
            "databaseAccountResourceGroup": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The name of the resource group the database account was created in."
              }
            },
            "systemAssignedPrincipalId": {
              "type": "string",
              "value": "[if(parameters('systemAssignedIdentity'), reference(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('name')), '2021-06-15', 'full').identity.principalId, '')]",
              "metadata": {
                "description": "The principal ID of the system assigned identity."
              }
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', parameters('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', variables('workspaceName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-private-dns-zone', variables('cosmosDbName'))]",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "privatelink.documents.azure.com"
          },
          "virtualNetworkLinks": {
            "value": [
              {
                "virtualNetworkResourceId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('virtualNetworkResourceGroupName')), 'Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]",
                "registrationEnabled": true
              }
            ]
          },
          "tags": {
            "value": "[variables('resourceTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1124.51302",
              "templateHash": "9320611352304243534"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Private DNS zone name."
              }
            },
            "virtualNetworkLinks": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Array of custom objects describing vNet links of the DNS zone. Each object should contain properties 'vnetResourceId' and 'registrationEnabled'. The 'vnetResourceId' is a resource ID of a vNet to link, 'registrationEnabled' (bool) enables automatic DNS registration in the zone for the linked vNet."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "global",
              "metadata": {
                "description": "Optional. The location of the PrivateDNSZone. Should be global."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]"
            },
            {
              "copy": {
                "name": "privateDnsZone_virtualNetworkLinks",
                "count": "[length(parameters('virtualNetworkLinks'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-PrivateDnsZone-VirtualNetworkLink-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "privateDnsZoneName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[if(contains(parameters('virtualNetworkLinks')[copyIndex()], 'name'), parameters('virtualNetworkLinks')[copyIndex()].name, format('{0}-vnetlink', last(split(parameters('virtualNetworkLinks')[copyIndex()].virtualNetworkResourceId, '/'))))]"
                  },
                  "virtualNetworkResourceId": {
                    "value": "[parameters('virtualNetworkLinks')[copyIndex()].virtualNetworkResourceId]"
                  },
                  "location": {
                    "value": "[if(contains(parameters('virtualNetworkLinks')[copyIndex()], 'location'), parameters('virtualNetworkLinks')[copyIndex()].location, 'global')]"
                  },
                  "registrationEnabled": {
                    "value": "[if(contains(parameters('virtualNetworkLinks')[copyIndex()], 'registrationEnabled'), parameters('virtualNetworkLinks')[copyIndex()].registrationEnabled, false())]"
                  },
                  "tags": {
                    "value": "[if(contains(parameters('virtualNetworkLinks')[copyIndex()], 'tags'), parameters('virtualNetworkLinks')[copyIndex()].tags, createObject())]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1124.51302",
                      "templateHash": "9834174724082607881"
                    }
                  },
                  "parameters": {
                    "privateDnsZoneName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Private DNS zone name."
                      }
                    },
                    "name": {
                      "type": "string",
                      "defaultValue": "[format('{0}-vnetlink', last(split(parameters('virtualNetworkResourceId'), '/')))]",
                      "metadata": {
                        "description": "Optional. The name of the virtual network link."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "global",
                      "metadata": {
                        "description": "Optional. The location of the PrivateDNSZone. Should be global."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "registrationEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Is auto-registration of virtual machine records in the virtual network in the Private DNS zone enabled?"
                      }
                    },
                    "virtualNetworkResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Link to another virtual network resource ID."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "registrationEnabled": "[parameters('registrationEnabled')]",
                        "virtualNetwork": {
                          "id": "[parameters('virtualNetworkResourceId')]"
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "virtualNetworkLinkName": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the deployed virtual network link"
                      }
                    },
                    "virtualNetworkLinkResourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/privateDnsZones/virtualNetworkLinks', parameters('privateDnsZoneName'), parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the deployed virtual network link"
                      }
                    },
                    "virtualNetworkLinkResourceGroup": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group of the deployed virtual network link"
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "privateDnsZoneResourceGroup": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The resource group the private DNS zone was deployed into"
              }
            },
            "privateDnsZoneName": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the private DNS zone"
              }
            },
            "privateDnsZoneResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the private DNS zone"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', variables('cosmosDbName'))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', parameters('resourceGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-private-endpoint', variables('cosmosDbName'))]",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('{0}-private-endpoint', variables('cosmosDbName'))]"
          },
          "targetSubnetResourceId": {
            "value": "[format('{0}/subnets/sharedSubnet', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('virtualNetworkResourceGroupName')), 'Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')))]"
          },
          "groupId": {
            "value": [
              "sql"
            ]
          },
          "serviceResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', variables('cosmosDbName')), '2020-10-01').outputs.databaseAccountResourceId.value]"
          },
          "privateDnsZoneGroups": {
            "value": [
              {
                "privateDNSResourceIds": [
                  "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-private-dns-zone', variables('cosmosDbName'))), '2020-10-01').outputs.privateDnsZoneResourceId.value]"
                ]
              }
            ]
          },
          "tags": {
            "value": "[variables('resourceTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1124.51302",
              "templateHash": "1204891240198710537"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the private endpoint resource to create."
              }
            },
            "targetSubnetResourceId": {
              "type": "string",
              "metadata": {
                "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
              }
            },
            "serviceResourceId": {
              "type": "string",
              "metadata": {
                "description": "Required. Resource ID of the resource that needs to be connected to the network."
              }
            },
            "groupId": {
              "type": "array",
              "metadata": {
                "description": "Required. Subtype(s) of the connection to be created. The allowed values depend on the type serviceResourceId refers to."
              }
            },
            "privateDnsZoneGroups": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Array of Private DNS zone groups configuration on the private endpoint."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all Resources."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2021-03-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "privateLinkServiceConnections": [
                  {
                    "name": "[parameters('name')]",
                    "properties": {
                      "privateLinkServiceId": "[parameters('serviceResourceId')]",
                      "groupIds": "[parameters('groupId')]"
                    }
                  }
                ],
                "manualPrivateLinkServiceConnections": [],
                "subnet": {
                  "id": "[parameters('targetSubnetResourceId')]"
                },
                "customDnsConfigs": []
              }
            },
            {
              "copy": {
                "name": "privateEndpoint_privateDnsZoneGroups",
                "count": "[length(parameters('privateDnsZoneGroups'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-PrivateEndpoint-PrivateDnsZoneGroup-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "privateDNSResourceIds": {
                    "value": "[parameters('privateDnsZoneGroups')[copyIndex()].privateDNSResourceIds]"
                  },
                  "privateEndpointName": {
                    "value": "[parameters('name')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1124.51302",
                      "templateHash": "18273707934466553696"
                    }
                  },
                  "parameters": {
                    "privateEndpointName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the private endpoint"
                      }
                    },
                    "privateDNSResourceIds": {
                      "type": "array",
                      "metadata": {
                        "description": "Required. List of private DNS resource IDs"
                      }
                    },
                    "name": {
                      "type": "string",
                      "defaultValue": "default",
                      "metadata": {
                        "description": "Optional. The name of the private DNS Zone Group"
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "privateDnsZoneConfigs",
                        "count": "[length(parameters('privateDNSResourceIds'))]",
                        "input": {
                          "name": "[parameters('privateEndpointName')]",
                          "properties": {
                            "privateDnsZoneId": "[parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')]]"
                          }
                        }
                      }
                    ]
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                      "properties": {
                        "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigs')]"
                      }
                    }
                  ],
                  "outputs": {
                    "privateDnsZoneGroupName": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the private endpoint DNS zone group"
                      }
                    },
                    "privateDnsZoneGroupResourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the private endpoint DNS zone group"
                      }
                    },
                    "privateDnsZoneGroupResourceGroup": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group the private endpoint DNS zone group was deployed into"
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "privateEndpointResourceGroup": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The resource group the private endpoint was deployed into"
              }
            },
            "privateEndpointResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the private endpoint"
              }
            },
            "privateEndpointName": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the private endpoint"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', variables('cosmosDbName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-private-dns-zone', variables('cosmosDbName')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', parameters('resourceGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[variables('apimName')]",
      "resourceGroup": "[parameters('apimResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('apimName')]"
          },
          "publisherEmail": {
            "value": "[parameters('apimPublisherEmail')]"
          },
          "publisherName": {
            "value": "[parameters('apimPublisherName')]"
          },
          "diagnosticLogsRetentionInDays": {
            "value": "[parameters('diagnosticLogsRetentionInDays')]"
          },
          "sku": {
            "value": "[parameters('apimSku')]"
          },
          "skuCount": {
            "value": 1
          },
          "subnetResourceId": {
            "value": "[format('{0}/subnets/ApiManagementSubnet', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('virtualNetworkResourceGroupName')), 'Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')))]"
          },
          "virtualNetworkType": {
            "value": "External"
          },
          "diagnosticWorkspaceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', variables('workspaceName')), '2020-10-01').outputs.logAnalyticsResourceId.value]"
          },
          "keyVaultResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-keyvault', variables('keyVaultName'))), '2020-10-01').outputs.keyVaultResourceId.value]"
          },
          "apis": {
            "value": "[parameters('apimApis')]"
          },
          "authorizationServers": {
            "value": "[parameters('apimAuthorizationServers')]"
          },
          "backends": {
            "value": "[parameters('apimBackends')]"
          },
          "caches": {
            "value": "[parameters('apimCaches')]"
          },
          "policies": {
            "value": "[parameters('apimPolicies')]"
          },
          "portalSettings": {
            "value": "[parameters('apimPortalSettings')]"
          },
          "subscriptions": {
            "value": "[parameters('apimSubscriptions')]"
          },
          "identityProviders": {
            "value": "[parameters('apimIdentityProviders')]"
          },
          "namedValues": {
            "value": "[parameters('apimNamedValues')]"
          },
          "products": {
            "value": "[parameters('apimProducts')]"
          },
          "tags": {
            "value": "[variables('resourceTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1124.51302",
              "templateHash": "2099547924981739724"
            }
          },
          "parameters": {
            "additionalLocations": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Additional datacenter locations of the API Management service."
              }
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the of the API Management service."
              }
            },
            "certificates": {
              "type": "array",
              "defaultValue": [],
              "maxLength": 10,
              "metadata": {
                "description": "Optional. List of Certificates that need to be installed in the API Management service. Max supported certificates that can be installed is 10."
              }
            },
            "customProperties": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Custom properties of the API Management service."
              }
            },
            "diagnosticLogsRetentionInDays": {
              "type": "int",
              "defaultValue": 90,
              "maxValue": 365,
              "minValue": 0,
              "metadata": {
                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
              }
            },
            "diagnosticStorageAccountId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic storage account."
              }
            },
            "disableGateway": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Property only valid for an API Management service deployed in multiple locations. This can be used to disable the gateway in master region."
              }
            },
            "enableClientCertificate": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Property only meant to be used for Consumption SKU Service. This enforces a client certificate to be presented on each request to the gateway. This also enables the ability to authenticate the certificate in the policy on the gateway."
              }
            },
            "diagnosticEventHubAuthorizationRuleId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
              }
            },
            "diagnosticEventHubName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
              }
            },
            "hostnameConfigurations": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Custom hostname configuration of the API Management service."
              }
            },
            "systemAssignedIdentity": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Enables system assigned managed identity on the resource."
              }
            },
            "userAssignedIdentities": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. The ID(s) to assign to the resource."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all Resources."
              }
            },
            "minApiVersion": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Limit control plane API calls to API Management service with version equal to or newer than this value."
              }
            },
            "notificationSenderEmail": {
              "type": "string",
              "defaultValue": "apimgmt-noreply@mail.windowsazure.com",
              "metadata": {
                "description": "Optional. The notification sender email address for the service."
              }
            },
            "publisherEmail": {
              "type": "string",
              "metadata": {
                "description": "Required. The email address of the owner of the service."
              }
            },
            "publisherName": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the owner of the service."
              }
            },
            "keyVaultResourceId": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the key vault that stores clientId and clientSecret for this authorization server."
              }
            },
            "restore": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Undelete API Management Service if it was previously soft-deleted. If this flag is specified and set to True all other properties will be ignored."
              }
            },
            "sku": {
              "type": "string",
              "defaultValue": "Developer",
              "allowedValues": [
                "Consumption",
                "Developer",
                "Basic",
                "Standard",
                "Premium"
              ],
              "metadata": {
                "description": "Optional. The pricing tier of this API Management service."
              }
            },
            "skuCount": {
              "type": "int",
              "defaultValue": 1,
              "allowedValues": [
                1,
                2
              ],
              "metadata": {
                "description": "Optional. The instance size of this API Management service."
              }
            },
            "subnetResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The full resource ID of a subnet in a virtual network to deploy the API Management service in."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "virtualNetworkType": {
              "type": "string",
              "defaultValue": "None",
              "allowedValues": [
                "None",
                "External",
                "Internal"
              ],
              "metadata": {
                "description": "Optional. The type of VPN in which API Management service needs to be configured in. None (Default Value) means the API Management service is not part of any Virtual Network, External means the API Management deployment is set up inside a Virtual Network having an internet Facing Endpoint, and Internal means that API Management deployment is setup inside a Virtual Network having an Intranet Facing Endpoint only."
              }
            },
            "diagnosticWorkspaceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic log analytics workspace."
              }
            },
            "zones": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. A list of availability zones denoting where the resource needs to come from."
              }
            },
            "logsToEnable": {
              "type": "array",
              "defaultValue": [
                "GatewayLogs"
              ],
              "allowedValues": [
                "GatewayLogs"
              ],
              "metadata": {
                "description": "Optional. The name of logs that will be streamed."
              }
            },
            "metricsToEnable": {
              "type": "array",
              "defaultValue": [
                "AllMetrics"
              ],
              "allowedValues": [
                "AllMetrics"
              ],
              "metadata": {
                "description": "Optional. The name of metrics that will be streamed."
              }
            },
            "newGuidValue": {
              "type": "string",
              "defaultValue": "[newGuid()]",
              "metadata": {
                "description": "Optional. Necessary to create a new GUID."
              }
            },
            "apis": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. APIs."
              }
            },
            "apiVersionSets": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. API Version Sets."
              }
            },
            "authorizationServers": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Authorization servers."
              }
            },
            "backends": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Backends."
              }
            },
            "caches": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Caches."
              }
            },
            "identityProviders": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Identity providers."
              }
            },
            "namedValues": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Named values."
              }
            },
            "policies": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Policies."
              }
            },
            "portalSettings": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Portal settings."
              }
            },
            "products": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Products."
              }
            },
            "subscriptions": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Subscriptions."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "diagnosticsLogs",
                "count": "[length(parameters('logsToEnable'))]",
                "input": {
                  "category": "[parameters('logsToEnable')[copyIndex('diagnosticsLogs')]]",
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              },
              {
                "name": "diagnosticsMetrics",
                "count": "[length(parameters('metricsToEnable'))]",
                "input": {
                  "category": "[parameters('metricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                  "timeGrain": null,
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              }
            ],
            "identityType": "[if(parameters('systemAssignedIdentity'), if(not(empty(parameters('userAssignedIdentities'))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
            "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]"
          },
          "resources": [
            {
              "type": "Microsoft.ApiManagement/service",
              "apiVersion": "2021-08-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "[parameters('sku')]",
                "capacity": "[parameters('skuCount')]"
              },
              "zones": "[parameters('zones')]",
              "identity": "[variables('identity')]",
              "properties": {
                "publisherEmail": "[parameters('publisherEmail')]",
                "publisherName": "[parameters('publisherName')]",
                "notificationSenderEmail": "[parameters('notificationSenderEmail')]",
                "hostnameConfigurations": "[parameters('hostnameConfigurations')]",
                "additionalLocations": "[parameters('additionalLocations')]",
                "customProperties": "[parameters('customProperties')]",
                "certificates": "[parameters('certificates')]",
                "enableClientCertificate": "[if(parameters('enableClientCertificate'), true(), null())]",
                "disableGateway": "[parameters('disableGateway')]",
                "virtualNetworkType": "[parameters('virtualNetworkType')]",
                "virtualNetworkConfiguration": "[if(not(empty(parameters('subnetResourceId'))), json(format('{{\"subnetResourceId\": \"{0}\"}}', parameters('subnetResourceId'))), null())]",
                "apiVersionConstraint": "[if(not(empty(parameters('minApiVersion'))), json(format('{{\"minApiVersion\": \"{0}\"}}', parameters('minApiVersion'))), null())]",
                "restore": "[parameters('restore')]"
              }
            },
            {
              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.ApiManagement/service/{0}', parameters('name'))]",
              "name": "[format('{0}-diagnosticSettings', parameters('name'))]",
              "properties": {
                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                "metrics": "[variables('diagnosticsMetrics')]",
                "logs": "[variables('diagnosticsLogs')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', parameters('name'))]"
              ]
            },
            {
              "copy": {
                "name": "apis_resource",
                "count": "[length(parameters('apis'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-Apim-Api-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "apiManagementServiceName": {
                    "value": "[parameters('name')]"
                  },
                  "displayName": {
                    "value": "[parameters('apis')[copyIndex()].displayName]"
                  },
                  "name": {
                    "value": "[parameters('apis')[copyIndex()].name]"
                  },
                  "path": {
                    "value": "[parameters('apis')[copyIndex()].path]"
                  },
                  "apiDescription": {
                    "value": "[if(contains(parameters('apis')[copyIndex()], 'apiDescription'), parameters('apis')[copyIndex()].apiDescription, '')]"
                  },
                  "apiRevision": {
                    "value": "[if(contains(parameters('apis')[copyIndex()], 'apiRevision'), parameters('apis')[copyIndex()].apiRevision, '')]"
                  },
                  "apiRevisionDescription": {
                    "value": "[if(contains(parameters('apis')[copyIndex()], 'apiRevisionDescription'), parameters('apis')[copyIndex()].apiRevisionDescription, '')]"
                  },
                  "apiType": {
                    "value": "[if(contains(parameters('apis')[copyIndex()], 'apiType'), parameters('apis')[copyIndex()].apiType, 'http')]"
                  },
                  "apiVersion": {
                    "value": "[if(contains(parameters('apis')[copyIndex()], 'apiVersion'), parameters('apis')[copyIndex()].apiVersion, '')]"
                  },
                  "apiVersionDescription": {
                    "value": "[if(contains(parameters('apis')[copyIndex()], 'apiVersionDescription'), parameters('apis')[copyIndex()].apiVersionDescription, '')]"
                  },
                  "apiVersionSetId": {
                    "value": "[if(contains(parameters('apis')[copyIndex()], 'apiVersionSetId'), parameters('apis')[copyIndex()].apiVersionSetId, '')]"
                  },
                  "authenticationSettings": {
                    "value": "[if(contains(parameters('apis')[copyIndex()], 'authenticationSettings'), parameters('apis')[copyIndex()].authenticationSettings, createObject())]"
                  },
                  "format": {
                    "value": "[if(contains(parameters('apis')[copyIndex()], 'format'), parameters('apis')[copyIndex()].format, 'openapi')]"
                  },
                  "isCurrent": {
                    "value": "[if(contains(parameters('apis')[copyIndex()], 'isCurrent'), parameters('apis')[copyIndex()].isCurrent, true())]"
                  },
                  "protocols": {
                    "value": "[if(contains(parameters('apis')[copyIndex()], 'protocols'), parameters('apis')[copyIndex()].protocols, createArray('https'))]"
                  },
                  "policies": {
                    "value": "[if(contains(parameters('apis')[copyIndex()], 'policies'), parameters('apis')[copyIndex()].policies, createArray())]"
                  },
                  "serviceUrl": {
                    "value": "[if(contains(parameters('apis')[copyIndex()], 'serviceUrl'), parameters('apis')[copyIndex()].serviceUrl, '')]"
                  },
                  "sourceApiId": {
                    "value": "[if(contains(parameters('apis')[copyIndex()], 'sourceApiId'), parameters('apis')[copyIndex()].sourceApiId, '')]"
                  },
                  "subscriptionKeyParameterNames": {
                    "value": "[if(contains(parameters('apis')[copyIndex()], 'subscriptionKeyParameterNames'), parameters('apis')[copyIndex()].subscriptionKeyParameterNames, createObject())]"
                  },
                  "subscriptionRequired": {
                    "value": "[if(contains(parameters('apis')[copyIndex()], 'subscriptionRequired'), parameters('apis')[copyIndex()].subscriptionRequired, false())]"
                  },
                  "type": {
                    "value": "[if(contains(parameters('apis')[copyIndex()], 'type'), parameters('apis')[copyIndex()].type, 'http')]"
                  },
                  "value": {
                    "value": "[if(contains(parameters('apis')[copyIndex()], 'value'), parameters('apis')[copyIndex()].value, '')]"
                  },
                  "wsdlSelector": {
                    "value": "[if(contains(parameters('apis')[copyIndex()], 'wsdlSelector'), parameters('apis')[copyIndex()].wsdlSelector, createObject())]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1124.51302",
                      "templateHash": "8158170151102741439"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number."
                      }
                    },
                    "policies": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of Policies to apply to the Service API."
                      }
                    },
                    "apiManagementServiceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the of the API Management service."
                      }
                    },
                    "apiRevision": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Describes the Revision of the API. If no value is provided, default revision 1 is created"
                      }
                    },
                    "apiRevisionDescription": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Description of the API Revision."
                      }
                    },
                    "apiType": {
                      "type": "string",
                      "defaultValue": "http",
                      "allowedValues": [
                        "http",
                        "soap"
                      ],
                      "metadata": {
                        "description": "Optional. Type of API to create. * http creates a SOAP to REST API * soap creates a SOAP pass-through API."
                      }
                    },
                    "apiVersion": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Indicates the Version identifier of the API if the API is versioned"
                      }
                    },
                    "apiVersionSetId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Indicates the Version identifier of the API version set"
                      }
                    },
                    "apiVersionDescription": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Description of the API Version."
                      }
                    },
                    "authenticationSettings": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Collection of authentication settings included into this API."
                      }
                    },
                    "apiDescription": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Description of the API. May include HTML formatting tags."
                      }
                    },
                    "displayName": {
                      "type": "string",
                      "maxLength": 300,
                      "metadata": {
                        "description": "Required. API name. Must be 1 to 300 characters long."
                      }
                    },
                    "format": {
                      "type": "string",
                      "defaultValue": "openapi",
                      "allowedValues": [
                        "wadl-xml",
                        "wadl-link-json",
                        "swagger-json",
                        "swagger-link-json",
                        "wsdl",
                        "wsdl-link",
                        "openapi",
                        "openapi+json",
                        "openapi-link",
                        "openapi+json-link"
                      ],
                      "metadata": {
                        "description": "Optional. Format of the Content in which the API is getting imported."
                      }
                    },
                    "isCurrent": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Indicates if API revision is current API revision."
                      }
                    },
                    "path": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Relative URL uniquely identifying this API and all of its resource paths within the API Management service instance. It is appended to the API endpoint base URL specified during the service instance creation to form a public URL for this API."
                      }
                    },
                    "protocols": {
                      "type": "array",
                      "defaultValue": [
                        "https"
                      ],
                      "metadata": {
                        "description": "Optional. Describes on which protocols the operations in this API can be invoked. - HTTP or HTTPS"
                      }
                    },
                    "serviceUrl": {
                      "type": "string",
                      "defaultValue": "",
                      "maxLength": 2000,
                      "metadata": {
                        "description": "Optional. Absolute URL of the backend service implementing this API. Cannot be more than 2000 characters long."
                      }
                    },
                    "sourceApiId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. API identifier of the source API."
                      }
                    },
                    "subscriptionKeyParameterNames": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Protocols over which API is made available."
                      }
                    },
                    "subscriptionRequired": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Specifies whether an API or Product subscription is required for accessing the API."
                      }
                    },
                    "type": {
                      "type": "string",
                      "defaultValue": "http",
                      "allowedValues": [
                        "http",
                        "soap"
                      ],
                      "metadata": {
                        "description": "Optional. Type of API."
                      }
                    },
                    "value": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Content value when Importing an API."
                      }
                    },
                    "wsdlSelector": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Criteria to limit import of WSDL to a subset of the document."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.ApiManagement/service/apis",
                      "apiVersion": "2021-08-01",
                      "name": "[format('{0}/{1}', parameters('apiManagementServiceName'), parameters('name'))]",
                      "properties": {
                        "apiRevision": "[if(not(empty(parameters('apiRevision'))), parameters('apiRevision'), null())]",
                        "apiRevisionDescription": "[if(not(empty(parameters('apiRevisionDescription'))), parameters('apiRevisionDescription'), null())]",
                        "apiType": "[if(not(empty(parameters('apiType'))), parameters('apiType'), null())]",
                        "apiVersion": "[if(not(empty(parameters('apiVersion'))), parameters('apiVersion'), null())]",
                        "apiVersionDescription": "[if(not(empty(parameters('apiVersionDescription'))), parameters('apiVersionDescription'), null())]",
                        "apiVersionSetId": "[if(not(empty(parameters('apiVersionSetId'))), parameters('apiVersionSetId'), null())]",
                        "authenticationSettings": "[parameters('authenticationSettings')]",
                        "description": "[parameters('apiDescription')]",
                        "displayName": "[parameters('displayName')]",
                        "format": "[if(not(empty(parameters('value'))), parameters('format'), null())]",
                        "isCurrent": "[parameters('isCurrent')]",
                        "path": "[parameters('path')]",
                        "protocols": "[parameters('protocols')]",
                        "serviceUrl": "[if(not(empty(parameters('serviceUrl'))), parameters('serviceUrl'), null())]",
                        "sourceApiId": "[if(not(empty(parameters('sourceApiId'))), parameters('sourceApiId'), null())]",
                        "subscriptionKeyParameterNames": "[if(not(empty(parameters('subscriptionKeyParameterNames'))), parameters('subscriptionKeyParameterNames'), null())]",
                        "subscriptionRequired": "[parameters('subscriptionRequired')]",
                        "type": "[parameters('type')]",
                        "value": "[if(not(empty(parameters('value'))), parameters('value'), null())]",
                        "wsdlSelector": "[parameters('wsdlSelector')]"
                      }
                    },
                    {
                      "copy": {
                        "name": "policy",
                        "count": "[length(parameters('policies'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-Policy-{1}', deployment().name, copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "apiManagementServiceName": {
                            "value": "[parameters('apiManagementServiceName')]"
                          },
                          "apiName": {
                            "value": "[parameters('name')]"
                          },
                          "format": {
                            "value": "[if(contains(parameters('policies')[copyIndex()], 'format'), parameters('policies')[copyIndex()].format, 'xml')]"
                          },
                          "value": {
                            "value": "[parameters('policies')[copyIndex()].value]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1124.51302",
                              "templateHash": "15458960929383913351"
                            }
                          },
                          "parameters": {
                            "apiManagementServiceName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the of the API Management service."
                              }
                            },
                            "apiName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the of the API."
                              }
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "policy",
                              "metadata": {
                                "description": "Optional. The name of the policy"
                              }
                            },
                            "format": {
                              "type": "string",
                              "defaultValue": "xml",
                              "allowedValues": [
                                "rawxml",
                                "rawxml-link",
                                "xml",
                                "xml-link"
                              ],
                              "metadata": {
                                "description": "Optional. Format of the policyContent."
                              }
                            },
                            "value": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Contents of the Policy as defined by the format."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.ApiManagement/service/apis/policies",
                              "apiVersion": "2021-08-01",
                              "name": "[format('{0}/{1}/{2}', parameters('apiManagementServiceName'), parameters('apiName'), parameters('name'))]",
                              "properties": {
                                "format": "[parameters('format')]",
                                "value": "[parameters('value')]"
                              }
                            }
                          ],
                          "outputs": {
                            "policyResourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.ApiManagement/service/apis/policies', parameters('apiManagementServiceName'), parameters('apiName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the API policy"
                              }
                            },
                            "policyName": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the API policy"
                              }
                            },
                            "policyResourceGroup": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group the API policy was deployed into"
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ApiManagement/service/apis', parameters('apiManagementServiceName'), parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "apiName": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the API management service API"
                      }
                    },
                    "apiResourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.ApiManagement/service/apis', parameters('apiManagementServiceName'), parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the API management service API"
                      }
                    },
                    "apiResourceGroup": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group the API management service API was deployed to"
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', parameters('name'))]",
                "apiVersionSet_resource"
              ]
            },
            {
              "copy": {
                "name": "apiVersionSet_resource",
                "count": "[length(parameters('apiVersionSets'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-Apim-ApiVersionSet-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "apiManagementServiceName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[parameters('apiVersionSets')[copyIndex()].name]"
                  },
                  "properties": {
                    "value": "[if(contains(parameters('apiVersionSets')[copyIndex()], 'properties'), parameters('apiVersionSets')[copyIndex()].properties, createObject())]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1124.51302",
                      "templateHash": "13004763108024141430"
                    }
                  },
                  "parameters": {
                    "apiManagementServiceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the of the API Management service."
                      }
                    },
                    "name": {
                      "type": "string",
                      "defaultValue": "default",
                      "metadata": {
                        "description": "Optional. API Version set name"
                      }
                    },
                    "properties": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. API Version set properties"
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.ApiManagement/service/apiVersionSets",
                      "apiVersion": "2021-08-01",
                      "name": "[format('{0}/{1}', parameters('apiManagementServiceName'), parameters('name'))]",
                      "properties": "[parameters('properties')]"
                    }
                  ],
                  "outputs": {
                    "apiVersionSetResourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.ApiManagement/service/apiVersionSets', parameters('apiManagementServiceName'), parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the API Version set"
                      }
                    },
                    "apiVersionSetName": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the API Version set"
                      }
                    },
                    "apiVersionSetResourceGroup": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group the API Version set was deployed into"
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', parameters('name'))]"
              ]
            },
            {
              "copy": {
                "name": "authorizationServers_resource",
                "count": "[length(parameters('authorizationServers'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-Apim-AuthorizationServer-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "apiManagementServiceName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[parameters('authorizationServers')[copyIndex()].name]"
                  },
                  "authorizationEndpoint": {
                    "value": "[parameters('authorizationServers')[copyIndex()].authorizationEndpoint]"
                  },
                  "authorizationMethods": {
                    "value": "[if(contains(parameters('authorizationServers')[copyIndex()], 'authorizationMethods'), parameters('authorizationServers')[copyIndex()].authorizationMethods, createArray('GET'))]"
                  },
                  "bearerTokenSendingMethods": {
                    "value": "[if(contains(parameters('authorizationServers')[copyIndex()], 'bearerTokenSendingMethods'), parameters('authorizationServers')[copyIndex()].bearerTokenSendingMethods, createArray('authorizationHeader'))]"
                  },
                  "clientAuthenticationMethod": {
                    "value": "[if(contains(parameters('authorizationServers')[copyIndex()], 'clientAuthenticationMethod'), parameters('authorizationServers')[copyIndex()].clientAuthenticationMethod, createArray('Basic'))]"
                  },
                  "clientId": {
                    "reference": {
                      "keyVault": {
                        "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('keyVaultResourceId'), '/')[2], split(parameters('keyVaultResourceId'), '/')[4]), 'Microsoft.KeyVault/vaults', last(split(parameters('keyVaultResourceId'), '/')))]"
                      },
                      "secretName": "[parameters('authorizationServers')[copyIndex()].clientIdSecretName]"
                    }
                  },
                  "clientSecret": {
                    "reference": {
                      "keyVault": {
                        "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('keyVaultResourceId'), '/')[2], split(parameters('keyVaultResourceId'), '/')[4]), 'Microsoft.KeyVault/vaults', last(split(parameters('keyVaultResourceId'), '/')))]"
                      },
                      "secretName": "[parameters('authorizationServers')[copyIndex()].clientSecretSecretName]"
                    }
                  },
                  "clientRegistrationEndpoint": {
                    "value": "[if(contains(parameters('authorizationServers')[copyIndex()], 'clientRegistrationEndpoint'), parameters('authorizationServers')[copyIndex()].clientRegistrationEndpoint, '')]"
                  },
                  "defaultScope": {
                    "value": "[if(contains(parameters('authorizationServers')[copyIndex()], 'defaultScope'), parameters('authorizationServers')[copyIndex()].defaultScope, '')]"
                  },
                  "grantTypes": {
                    "value": "[parameters('authorizationServers')[copyIndex()].grantTypes]"
                  },
                  "resourceOwnerPassword": {
                    "value": "[if(contains(parameters('authorizationServers')[copyIndex()], 'resourceOwnerPassword'), parameters('authorizationServers')[copyIndex()].resourceOwnerPassword, '')]"
                  },
                  "resourceOwnerUsername": {
                    "value": "[if(contains(parameters('authorizationServers')[copyIndex()], 'resourceOwnerUsername'), parameters('authorizationServers')[copyIndex()].resourceOwnerUsername, '')]"
                  },
                  "serverDescription": {
                    "value": "[if(contains(parameters('authorizationServers')[copyIndex()], 'serverDescription'), parameters('authorizationServers')[copyIndex()].serverDescription, '')]"
                  },
                  "supportState": {
                    "value": "[if(contains(parameters('authorizationServers')[copyIndex()], 'supportState'), parameters('authorizationServers')[copyIndex()].supportState, false())]"
                  },
                  "tokenBodyParameters": {
                    "value": "[if(contains(parameters('authorizationServers')[copyIndex()], 'tokenBodyParameters'), parameters('authorizationServers')[copyIndex()].tokenBodyParameters, createArray())]"
                  },
                  "tokenEndpoint": {
                    "value": "[if(contains(parameters('authorizationServers')[copyIndex()], 'tokenEndpoint'), parameters('authorizationServers')[copyIndex()].tokenEndpoint, '')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1124.51302",
                      "templateHash": "2984963692840673959"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Identifier of the authorization server."
                      }
                    },
                    "apiManagementServiceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the of the API Management service."
                      }
                    },
                    "authorizationEndpoint": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. OAuth authorization endpoint. See <http://tools.ietf.org/html/rfc6749#section-3.2>."
                      }
                    },
                    "authorizationMethods": {
                      "type": "array",
                      "defaultValue": [
                        "GET"
                      ],
                      "metadata": {
                        "description": "Optional. HTTP verbs supported by the authorization endpoint. GET must be always present. POST is optional. - HEAD, OPTIONS, TRACE, GET, POST, PUT, PATCH, DELETE"
                      }
                    },
                    "bearerTokenSendingMethods": {
                      "type": "array",
                      "defaultValue": [
                        "authorizationHeader"
                      ],
                      "metadata": {
                        "description": "Optional. Specifies the mechanism by which access token is passed to the API. - authorizationHeader or query"
                      }
                    },
                    "clientAuthenticationMethod": {
                      "type": "array",
                      "defaultValue": [
                        "Basic"
                      ],
                      "metadata": {
                        "description": "Optional. Method of authentication supported by the token endpoint of this authorization server. Possible values are Basic and/or Body. When Body is specified, client credentials and other parameters are passed within the request body in the application/x-www-form-urlencoded format. - Basic or Body"
                      }
                    },
                    "clientId": {
                      "type": "secureString",
                      "metadata": {
                        "description": "Required. Client or app ID registered with this authorization server."
                      }
                    },
                    "clientRegistrationEndpoint": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Optional reference to a page where client or app registration for this authorization server is performed. Contains absolute URL to entity being referenced."
                      }
                    },
                    "clientSecret": {
                      "type": "secureString",
                      "metadata": {
                        "description": "Required. Client or app secret registered with this authorization server. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value."
                      }
                    },
                    "defaultScope": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Access token scope that is going to be requested by default. Can be overridden at the API level. Should be provided in the form of a string containing space-delimited values."
                      }
                    },
                    "serverDescription": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Description of the authorization server. Can contain HTML formatting tags."
                      }
                    },
                    "grantTypes": {
                      "type": "array",
                      "metadata": {
                        "description": "Required. Form of an authorization grant, which the client uses to request the access token. - authorizationCode, implicit, resourceOwnerPassword, clientCredentials"
                      }
                    },
                    "resourceOwnerPassword": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Can be optionally specified when resource owner password grant type is supported by this authorization server. Default resource owner password."
                      }
                    },
                    "resourceOwnerUsername": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Can be optionally specified when resource owner password grant type is supported by this authorization server. Default resource owner username."
                      }
                    },
                    "supportState": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. If true, authorization server will include state parameter from the authorization request to its response. Client may use state parameter to raise protocol security."
                      }
                    },
                    "tokenBodyParameters": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Additional parameters required by the token endpoint of this authorization server represented as an array of JSON objects with name and value string properties, i.e. {\"name\" : \"name value\", \"value\": \"a value\"}. - TokenBodyParameterContract object"
                      }
                    },
                    "tokenEndpoint": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. OAuth token endpoint. Contains absolute URI to entity being referenced."
                      }
                    }
                  },
                  "variables": {
                    "defaultAuthorizationMethods": [
                      "GET"
                    ],
                    "setAuthorizationMethods": "[union(parameters('authorizationMethods'), variables('defaultAuthorizationMethods'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.ApiManagement/service/authorizationServers",
                      "apiVersion": "2021-08-01",
                      "name": "[format('{0}/{1}', parameters('apiManagementServiceName'), parameters('name'))]",
                      "properties": {
                        "description": "[parameters('serverDescription')]",
                        "authorizationMethods": "[variables('setAuthorizationMethods')]",
                        "clientAuthenticationMethod": "[parameters('clientAuthenticationMethod')]",
                        "tokenBodyParameters": "[parameters('tokenBodyParameters')]",
                        "tokenEndpoint": "[parameters('tokenEndpoint')]",
                        "supportState": "[parameters('supportState')]",
                        "defaultScope": "[parameters('defaultScope')]",
                        "bearerTokenSendingMethods": "[parameters('bearerTokenSendingMethods')]",
                        "resourceOwnerUsername": "[parameters('resourceOwnerUsername')]",
                        "resourceOwnerPassword": "[parameters('resourceOwnerPassword')]",
                        "displayName": "[parameters('name')]",
                        "clientRegistrationEndpoint": "[parameters('clientRegistrationEndpoint')]",
                        "authorizationEndpoint": "[parameters('authorizationEndpoint')]",
                        "grantTypes": "[parameters('grantTypes')]",
                        "clientId": "[parameters('clientId')]",
                        "clientSecret": "[parameters('clientSecret')]"
                      }
                    }
                  ],
                  "outputs": {
                    "authorizationServerName": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the API management service authorization server"
                      }
                    },
                    "authorizationServerResourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.ApiManagement/service/authorizationServers', parameters('apiManagementServiceName'), parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the API management service authorization server"
                      }
                    },
                    "authorizationServerResourceGroup": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group the API management service authorization server was deployed into"
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', parameters('name'))]"
              ]
            },
            {
              "copy": {
                "name": "backends_resource",
                "count": "[length(parameters('backends'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-Apim-Backend-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "apiManagementServiceName": {
                    "value": "[parameters('name')]"
                  },
                  "url": {
                    "value": "[if(contains(parameters('backends')[copyIndex()], 'url'), parameters('backends')[copyIndex()].url, '')]"
                  },
                  "backendDescription": {
                    "value": "[if(contains(parameters('backends')[copyIndex()], 'backendDescription'), parameters('backends')[copyIndex()].backendDescription, '')]"
                  },
                  "credentials": {
                    "value": "[if(contains(parameters('backends')[copyIndex()], 'credentials'), parameters('backends')[copyIndex()].credentials, createObject())]"
                  },
                  "name": {
                    "value": "[parameters('backends')[copyIndex()].name]"
                  },
                  "protocol": {
                    "value": "[if(contains(parameters('backends')[copyIndex()], 'protocol'), parameters('backends')[copyIndex()].protocol, 'http')]"
                  },
                  "proxy": {
                    "value": "[if(contains(parameters('backends')[copyIndex()], 'proxy'), parameters('backends')[copyIndex()].proxy, createObject())]"
                  },
                  "resourceId": {
                    "value": "[if(contains(parameters('backends')[copyIndex()], 'resourceId'), parameters('backends')[copyIndex()].resourceId, '')]"
                  },
                  "serviceFabricCluster": {
                    "value": "[if(contains(parameters('backends')[copyIndex()], 'serviceFabricCluster'), parameters('backends')[copyIndex()].serviceFabricCluster, createObject())]"
                  },
                  "title": {
                    "value": "[if(contains(parameters('backends')[copyIndex()], 'title'), parameters('backends')[copyIndex()].title, '')]"
                  },
                  "tls": {
                    "value": "[if(contains(parameters('backends')[copyIndex()], 'tls'), parameters('backends')[copyIndex()].tls, createObject('validateCertificateChain', false(), 'validateCertificateName', false()))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1124.51302",
                      "templateHash": "2183679898779194846"
                    }
                  },
                  "parameters": {
                    "apiManagementServiceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the of the API Management service."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Backend Name."
                      }
                    },
                    "credentials": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Backend Credentials Contract Properties."
                      }
                    },
                    "backendDescription": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Backend Description."
                      }
                    },
                    "protocol": {
                      "type": "string",
                      "defaultValue": "http",
                      "metadata": {
                        "description": "Optional. Backend communication protocol. - http or soap"
                      }
                    },
                    "proxy": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Backend Proxy Contract Properties"
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Management Uri of the Resource in External System. This URL can be the Arm Resource ID of Logic Apps, Function Apps or API Apps."
                      }
                    },
                    "serviceFabricCluster": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Backend Service Fabric Cluster Properties."
                      }
                    },
                    "title": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Backend Title."
                      }
                    },
                    "tls": {
                      "type": "object",
                      "defaultValue": {
                        "validateCertificateChain": false,
                        "validateCertificateName": false
                      },
                      "metadata": {
                        "description": "Optional. Backend TLS Properties"
                      }
                    },
                    "url": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Runtime URL of the Backend."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.ApiManagement/service/backends",
                      "apiVersion": "2021-08-01",
                      "name": "[format('{0}/{1}', parameters('apiManagementServiceName'), parameters('name'))]",
                      "properties": {
                        "title": "[if(not(empty(parameters('title'))), parameters('title'), null())]",
                        "description": "[if(not(empty(parameters('backendDescription'))), parameters('backendDescription'), null())]",
                        "resourceId": "[if(not(empty(parameters('resourceId'))), parameters('resourceId'), null())]",
                        "properties": {
                          "serviceFabricCluster": "[if(not(empty(parameters('serviceFabricCluster'))), parameters('serviceFabricCluster'), null())]"
                        },
                        "credentials": "[if(not(empty(parameters('credentials'))), parameters('credentials'), null())]",
                        "proxy": "[if(not(empty(parameters('proxy'))), parameters('proxy'), null())]",
                        "tls": "[if(not(empty(parameters('tls'))), parameters('tls'), null())]",
                        "url": "[parameters('url')]",
                        "protocol": "[parameters('protocol')]"
                      }
                    }
                  ],
                  "outputs": {
                    "backendResourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.ApiManagement/service/backends', parameters('apiManagementServiceName'), parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the API management service backend"
                      }
                    },
                    "backendName": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the API management service backend"
                      }
                    },
                    "backendResourceGroup": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group the API management service backend was deployed into"
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', parameters('name'))]"
              ]
            },
            {
              "copy": {
                "name": "caches_resource",
                "count": "[length(parameters('caches'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-Apim-Cache-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "apiManagementServiceName": {
                    "value": "[parameters('name')]"
                  },
                  "cacheDescription": {
                    "value": "[if(contains(parameters('caches')[copyIndex()], 'cacheDescription'), parameters('caches')[copyIndex()].cacheDescription, '')]"
                  },
                  "connectionString": {
                    "value": "[parameters('caches')[copyIndex()].connectionString]"
                  },
                  "name": {
                    "value": "[parameters('caches')[copyIndex()].name]"
                  },
                  "resourceId": {
                    "value": "[if(contains(parameters('caches')[copyIndex()], 'resourceId'), parameters('caches')[copyIndex()].resourceId, '')]"
                  },
                  "useFromLocation": {
                    "value": "[parameters('caches')[copyIndex()].useFromLocation]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1124.51302",
                      "templateHash": "6767048535768028231"
                    }
                  },
                  "parameters": {
                    "apiManagementServiceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the of the API Management service."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Identifier of the Cache entity. Cache identifier (should be either 'default' or valid Azure region identifier)."
                      }
                    },
                    "connectionString": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Runtime connection string to cache. Can be referenced by a named value like so, {{<named-value>}}"
                      }
                    },
                    "cacheDescription": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Cache description"
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Original uri of entity in external system cache points to."
                      }
                    },
                    "useFromLocation": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Location identifier to use cache from (should be either 'default' or valid Azure region identifier)"
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.ApiManagement/service/caches",
                      "apiVersion": "2021-08-01",
                      "name": "[format('{0}/{1}', parameters('apiManagementServiceName'), parameters('name'))]",
                      "properties": {
                        "description": "[if(not(empty(parameters('cacheDescription'))), parameters('cacheDescription'), null())]",
                        "connectionString": "[parameters('connectionString')]",
                        "useFromLocation": "[parameters('useFromLocation')]",
                        "resourceId": "[if(not(empty(parameters('resourceId'))), parameters('resourceId'), null())]"
                      }
                    }
                  ],
                  "outputs": {
                    "cacheResourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.ApiManagement/service/caches', parameters('apiManagementServiceName'), parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the API management service cache"
                      }
                    },
                    "cacheResourceName": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the API management service cache"
                      }
                    },
                    "cacheResourceGroup": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group the API management service cache was deployed into"
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', parameters('name'))]"
              ]
            },
            {
              "copy": {
                "name": "identityProvider_resource",
                "count": "[length(parameters('identityProviders'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-Apim-IdentityProvider-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "apiManagementServiceName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[parameters('identityProviders')[copyIndex()].name]"
                  },
                  "enableIdentityProviders": {
                    "value": "[if(contains(parameters('identityProviders')[copyIndex()], 'enableIdentityProviders'), parameters('identityProviders')[copyIndex()].enableIdentityProviders, false())]"
                  },
                  "identityProviderAllowedTenants": {
                    "value": "[if(contains(parameters('identityProviders')[copyIndex()], 'identityProviderAllowedTenants'), parameters('identityProviders')[copyIndex()].identityProviderAllowedTenants, createArray())]"
                  },
                  "identityProviderAuthority": {
                    "value": "[if(contains(parameters('identityProviders')[copyIndex()], 'identityProviderAuthority'), parameters('identityProviders')[copyIndex()].identityProviderAuthority, '')]"
                  },
                  "identityProviderClientId": {
                    "value": "[if(contains(parameters('identityProviders')[copyIndex()], 'identityProviderClientId'), parameters('identityProviders')[copyIndex()].identityProviderClientId, '')]"
                  },
                  "identityProviderClientSecret": {
                    "value": "[if(contains(parameters('identityProviders')[copyIndex()], 'identityProviderClientSecret'), parameters('identityProviders')[copyIndex()].identityProviderClientSecret, '')]"
                  },
                  "identityProviderPasswordResetPolicyName": {
                    "value": "[if(contains(parameters('identityProviders')[copyIndex()], 'identityProviderPasswordResetPolicyName'), parameters('identityProviders')[copyIndex()].identityProviderPasswordResetPolicyName, '')]"
                  },
                  "identityProviderProfileEditingPolicyName": {
                    "value": "[if(contains(parameters('identityProviders')[copyIndex()], 'identityProviderProfileEditingPolicyName'), parameters('identityProviders')[copyIndex()].identityProviderProfileEditingPolicyName, '')]"
                  },
                  "identityProviderSignInPolicyName": {
                    "value": "[if(contains(parameters('identityProviders')[copyIndex()], 'identityProviderSignInPolicyName'), parameters('identityProviders')[copyIndex()].identityProviderSignInPolicyName, '')]"
                  },
                  "identityProviderSignInTenant": {
                    "value": "[if(contains(parameters('identityProviders')[copyIndex()], 'identityProviderSignInTenant'), parameters('identityProviders')[copyIndex()].identityProviderSignInTenant, '')]"
                  },
                  "identityProviderSignUpPolicyName": {
                    "value": "[if(contains(parameters('identityProviders')[copyIndex()], 'identityProviderSignUpPolicyName'), parameters('identityProviders')[copyIndex()].identityProviderSignUpPolicyName, '')]"
                  },
                  "identityProviderType": {
                    "value": "[if(contains(parameters('identityProviders')[copyIndex()], 'identityProviderType'), parameters('identityProviders')[copyIndex()].identityProviderType, 'aad')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1124.51302",
                      "templateHash": "6333886248594325479"
                    }
                  },
                  "parameters": {
                    "apiManagementServiceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the of the API Management service."
                      }
                    },
                    "enableIdentityProviders": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Used to enable the deployment of the identityProviders child resource."
                      }
                    },
                    "identityProviderAllowedTenants": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. List of Allowed Tenants when configuring Azure Active Directory login. - string"
                      }
                    },
                    "identityProviderAuthority": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. OpenID Connect discovery endpoint hostname for AAD or AAD B2C."
                      }
                    },
                    "identityProviderClientId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Client ID of the Application in the external Identity Provider. Required if identity provider is used."
                      }
                    },
                    "identityProviderClientSecret": {
                      "type": "secureString",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Client secret of the Application in external Identity Provider, used to authenticate login request. Required if identity provider is used."
                      }
                    },
                    "identityProviderPasswordResetPolicyName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Password Reset Policy Name. Only applies to AAD B2C Identity Provider."
                      }
                    },
                    "identityProviderProfileEditingPolicyName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Profile Editing Policy Name. Only applies to AAD B2C Identity Provider."
                      }
                    },
                    "identityProviderSignInPolicyName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Signin Policy Name. Only applies to AAD B2C Identity Provider."
                      }
                    },
                    "identityProviderSignInTenant": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The TenantId to use instead of Common when logging into Active Directory"
                      }
                    },
                    "identityProviderSignUpPolicyName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Signup Policy Name. Only applies to AAD B2C Identity Provider."
                      }
                    },
                    "identityProviderType": {
                      "type": "string",
                      "defaultValue": "aad",
                      "allowedValues": [
                        "aad",
                        "aadB2C",
                        "facebook",
                        "google",
                        "microsoft",
                        "twitter"
                      ],
                      "metadata": {
                        "description": "Optional. Identity Provider Type identifier."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Identity provider name"
                      }
                    }
                  },
                  "variables": {
                    "isAadB2C": "[equals(parameters('identityProviderType'), 'aadB2C')]"
                  },
                  "resources": [
                    {
                      "condition": "[parameters('enableIdentityProviders')]",
                      "type": "Microsoft.ApiManagement/service/identityProviders",
                      "apiVersion": "2021-08-01",
                      "name": "[format('{0}/{1}', parameters('apiManagementServiceName'), parameters('name'))]",
                      "properties": {
                        "type": "[parameters('identityProviderType')]",
                        "signinTenant": "[parameters('identityProviderSignInTenant')]",
                        "allowedTenants": "[parameters('identityProviderAllowedTenants')]",
                        "authority": "[parameters('identityProviderAuthority')]",
                        "signupPolicyName": "[if(variables('isAadB2C'), parameters('identityProviderSignUpPolicyName'), null())]",
                        "signinPolicyName": "[if(variables('isAadB2C'), parameters('identityProviderSignInPolicyName'), null())]",
                        "profileEditingPolicyName": "[if(variables('isAadB2C'), parameters('identityProviderProfileEditingPolicyName'), null())]",
                        "passwordResetPolicyName": "[if(variables('isAadB2C'), parameters('identityProviderPasswordResetPolicyName'), null())]",
                        "clientId": "[parameters('identityProviderClientId')]",
                        "clientSecret": "[parameters('identityProviderClientSecret')]"
                      }
                    }
                  ],
                  "outputs": {
                    "identityProviderResourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.ApiManagement/service/identityProviders', parameters('apiManagementServiceName'), parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the API management service identity provider"
                      }
                    },
                    "identityProviderName": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the API management service identity provider"
                      }
                    },
                    "identityProviderResourceGroup": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group the API management service identity provider was deployed into"
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', parameters('name'))]"
              ]
            },
            {
              "copy": {
                "name": "namedValues_resource",
                "count": "[length(parameters('namedValues'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-Apim-NamedValue-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "apiManagementServiceName": {
                    "value": "[parameters('name')]"
                  },
                  "displayName": {
                    "value": "[parameters('namedValues')[copyIndex()].displayName]"
                  },
                  "keyVault": {
                    "value": "[if(contains(parameters('namedValues')[copyIndex()], 'keyVault'), parameters('namedValues')[copyIndex()].keyVault, createObject())]"
                  },
                  "name": {
                    "value": "[parameters('namedValues')[copyIndex()].name]"
                  },
                  "namedValueTags": {
                    "value": "[if(contains(parameters('namedValues')[copyIndex()], 'namedValueTags'), parameters('namedValues')[copyIndex()].namedValueTags, createArray())]"
                  },
                  "secret": {
                    "value": "[if(contains(parameters('namedValues')[copyIndex()], 'secret'), parameters('namedValues')[copyIndex()].secret, false())]"
                  },
                  "value": {
                    "value": "[if(contains(parameters('namedValues')[copyIndex()], 'value'), parameters('namedValues')[copyIndex()].value, parameters('newGuidValue'))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1124.51302",
                      "templateHash": "15886681562079574648"
                    }
                  },
                  "parameters": {
                    "apiManagementServiceName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Required. The name of the of the API Management service."
                      }
                    },
                    "displayName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Unique name of NamedValue. It may contain only letters, digits, period, dash, and underscore characters."
                      }
                    },
                    "keyVault": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. KeyVault location details of the namedValue. "
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Named value Name."
                      }
                    },
                    "namedValueTags": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Tags that when provided can be used to filter the NamedValue list. - string"
                      }
                    },
                    "secret": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Determines whether the value is a secret and should be encrypted or not. Default value is false."
                      }
                    },
                    "value": {
                      "type": "string",
                      "defaultValue": "[newGuid()]",
                      "metadata": {
                        "description": "Optional. Value of the NamedValue. Can contain policy expressions. It may not be empty or consist only of whitespace. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value."
                      }
                    }
                  },
                  "variables": {
                    "keyVaultEmpty": "[empty(parameters('keyVault'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.ApiManagement/service/namedValues",
                      "apiVersion": "2021-08-01",
                      "name": "[format('{0}/{1}', parameters('apiManagementServiceName'), parameters('name'))]",
                      "properties": {
                        "tags": "[if(not(empty(parameters('namedValueTags'))), parameters('namedValueTags'), null())]",
                        "secret": "[parameters('secret')]",
                        "displayName": "[parameters('displayName')]",
                        "value": "[if(variables('keyVaultEmpty'), parameters('value'), null())]",
                        "keyVault": "[if(not(variables('keyVaultEmpty')), parameters('keyVault'), null())]"
                      }
                    }
                  ],
                  "outputs": {
                    "namedValueResourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.ApiManagement/service/namedValues', parameters('apiManagementServiceName'), parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the named value"
                      }
                    },
                    "namedValueName": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the named value"
                      }
                    },
                    "namedValueResourceGroup": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group the named value was deployed into"
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', parameters('name'))]"
              ]
            },
            {
              "copy": {
                "name": "portalSettings_resource",
                "count": "[length(parameters('portalSettings'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-Apim-PortalSetting-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "apiManagementServiceName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[parameters('portalSettings')[copyIndex()].name]"
                  },
                  "properties": {
                    "value": "[if(contains(parameters('portalSettings')[copyIndex()], 'properties'), parameters('portalSettings')[copyIndex()].properties, createObject())]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1124.51302",
                      "templateHash": "1744988547262548947"
                    }
                  },
                  "parameters": {
                    "apiManagementServiceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the of the API Management service."
                      }
                    },
                    "name": {
                      "type": "string",
                      "allowedValues": [
                        "delegation",
                        "signin",
                        "signup"
                      ],
                      "metadata": {
                        "description": "Required. Portal setting name"
                      }
                    },
                    "properties": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Portal setting properties."
                      }
                    }
                  },
                  "resources": [
                    {
                      "condition": "[not(empty(parameters('properties')))]",
                      "type": "Microsoft.ApiManagement/service/portalsettings",
                      "apiVersion": "2021-08-01",
                      "name": "[format('{0}/{1}', parameters('apiManagementServiceName'), parameters('name'))]",
                      "properties": "[parameters('properties')]"
                    }
                  ],
                  "outputs": {
                    "portalSettingsResourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.ApiManagement/service/portalsettings', parameters('apiManagementServiceName'), parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the API management service portal setting"
                      }
                    },
                    "portalSettingsName": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the API management service portal setting"
                      }
                    },
                    "portalSettingsResourceGroup": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group the API management service portal setting was deployed into"
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', parameters('name'))]"
              ]
            },
            {
              "copy": {
                "name": "policy_resource",
                "count": "[length(parameters('policies'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-Apim-Policy-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "apiManagementServiceName": {
                    "value": "[parameters('name')]"
                  },
                  "value": {
                    "value": "[parameters('policies')[copyIndex()].value]"
                  },
                  "format": {
                    "value": "[if(contains(parameters('policies')[copyIndex()], 'format'), parameters('policies')[copyIndex()].format, 'xml')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1124.51302",
                      "templateHash": "15008877177969034543"
                    }
                  },
                  "parameters": {
                    "apiManagementServiceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the of the API Management service."
                      }
                    },
                    "name": {
                      "type": "string",
                      "defaultValue": "policy",
                      "metadata": {
                        "description": "Optional. The name of the policy"
                      }
                    },
                    "format": {
                      "type": "string",
                      "defaultValue": "xml",
                      "allowedValues": [
                        "rawxml",
                        "rawxml-link",
                        "xml",
                        "xml-link"
                      ],
                      "metadata": {
                        "description": "Optional. Format of the policyContent."
                      }
                    },
                    "value": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Contents of the Policy as defined by the format."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.ApiManagement/service/policies",
                      "apiVersion": "2021-08-01",
                      "name": "[format('{0}/{1}', parameters('apiManagementServiceName'), parameters('name'))]",
                      "properties": {
                        "format": "[parameters('format')]",
                        "value": "[parameters('value')]"
                      }
                    }
                  ],
                  "outputs": {
                    "policyResourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.ApiManagement/service/policies', parameters('apiManagementServiceName'), parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the API management service policy"
                      }
                    },
                    "policyName": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the API management service policy"
                      }
                    },
                    "policyResourceGroup": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group the API management service policy was deployed into"
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', parameters('name'))]"
              ]
            },
            {
              "copy": {
                "name": "products_resource",
                "count": "[length(parameters('products'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-Apim-Product-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "apiManagementServiceName": {
                    "value": "[parameters('name')]"
                  },
                  "apis": {
                    "value": "[if(contains(parameters('products')[copyIndex()], 'apis'), parameters('products')[copyIndex()].apis, createArray())]"
                  },
                  "approvalRequired": {
                    "value": "[if(contains(parameters('products')[copyIndex()], 'approvalRequired'), parameters('products')[copyIndex()].approvalRequired, false())]"
                  },
                  "groups": {
                    "value": "[if(contains(parameters('products')[copyIndex()], 'groups'), parameters('products')[copyIndex()].groups, createArray())]"
                  },
                  "name": {
                    "value": "[parameters('products')[copyIndex()].name]"
                  },
                  "productDescription": {
                    "value": "[if(contains(parameters('products')[copyIndex()], 'productDescription'), parameters('products')[copyIndex()].productDescription, '')]"
                  },
                  "state": {
                    "value": "[if(contains(parameters('products')[copyIndex()], 'state'), parameters('products')[copyIndex()].state, 'published')]"
                  },
                  "subscriptionRequired": {
                    "value": "[if(contains(parameters('products')[copyIndex()], 'subscriptionRequired'), parameters('products')[copyIndex()].subscriptionRequired, false())]"
                  },
                  "subscriptionsLimit": {
                    "value": "[if(contains(parameters('products')[copyIndex()], 'subscriptionsLimit'), parameters('products')[copyIndex()].subscriptionsLimit, 1)]"
                  },
                  "terms": {
                    "value": "[if(contains(parameters('products')[copyIndex()], 'terms'), parameters('products')[copyIndex()].terms, '')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1124.51302",
                      "templateHash": "3252929454540627283"
                    }
                  },
                  "parameters": {
                    "apiManagementServiceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the of the API Management service."
                      }
                    },
                    "approvalRequired": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Whether subscription approval is required. If false, new subscriptions will be approved automatically enabling developers to call the products APIs immediately after subscribing. If true, administrators must manually approve the subscription before the developer can any of the products APIs. Can be present only if subscriptionRequired property is present and has a value of false."
                      }
                    },
                    "productDescription": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Product description. May include HTML formatting tags."
                      }
                    },
                    "apis": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of Product APIs."
                      }
                    },
                    "groups": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of Product Groups."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Product Name."
                      }
                    },
                    "state": {
                      "type": "string",
                      "defaultValue": "published",
                      "metadata": {
                        "description": "Optional. whether product is published or not. Published products are discoverable by users of developer portal. Non published products are visible only to administrators. Default state of Product is notPublished. - notPublished or published"
                      }
                    },
                    "subscriptionRequired": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Whether a product subscription is required for accessing APIs included in this product. If true, the product is referred to as \"protected\" and a valid subscription key is required for a request to an API included in the product to succeed. If false, the product is referred to as \"open\" and requests to an API included in the product can be made without a subscription key. If property is omitted when creating a new product it's value is assumed to be true."
                      }
                    },
                    "subscriptionsLimit": {
                      "type": "int",
                      "defaultValue": 1,
                      "metadata": {
                        "description": "Optional. Whether the number of subscriptions a user can have to this product at the same time. Set to null or omit to allow unlimited per user subscriptions. Can be present only if subscriptionRequired property is present and has a value of false."
                      }
                    },
                    "terms": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Product terms of use. Developers trying to subscribe to the product will be presented and required to accept these terms before they can complete the subscription process."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.ApiManagement/service/products",
                      "apiVersion": "2021-08-01",
                      "name": "[format('{0}/{1}', parameters('apiManagementServiceName'), parameters('name'))]",
                      "properties": {
                        "description": "[parameters('productDescription')]",
                        "displayName": "[parameters('name')]",
                        "terms": "[parameters('terms')]",
                        "subscriptionRequired": "[parameters('subscriptionRequired')]",
                        "approvalRequired": "[if(parameters('subscriptionRequired'), parameters('approvalRequired'), null())]",
                        "subscriptionsLimit": "[if(parameters('subscriptionRequired'), parameters('subscriptionsLimit'), null())]",
                        "state": "[parameters('state')]"
                      }
                    },
                    {
                      "copy": {
                        "name": "api",
                        "count": "[length(parameters('apis'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-Api-{1}', deployment().name, copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "apiManagementServiceName": {
                            "value": "[parameters('apiManagementServiceName')]"
                          },
                          "name": {
                            "value": "[parameters('apis')[copyIndex()].name]"
                          },
                          "productName": {
                            "value": "[parameters('name')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1124.51302",
                              "templateHash": "7611735242129341396"
                            }
                          },
                          "parameters": {
                            "apiManagementServiceName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the of the API Management service."
                              }
                            },
                            "productName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the of the Product."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the product API."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.ApiManagement/service/products/apis",
                              "apiVersion": "2021-08-01",
                              "name": "[format('{0}/{1}/{2}', parameters('apiManagementServiceName'), parameters('productName'), parameters('name'))]"
                            }
                          ],
                          "outputs": {
                            "apiResourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.ApiManagement/service/products/apis', parameters('apiManagementServiceName'), parameters('productName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the product API"
                              }
                            },
                            "apiName": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the product API"
                              }
                            },
                            "apiResourceGroup": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group the product API was deployed into"
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "copy": {
                        "name": "group",
                        "count": "[length(parameters('groups'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-Group-{1}', deployment().name, copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "apiManagementServiceName": {
                            "value": "[parameters('apiManagementServiceName')]"
                          },
                          "name": {
                            "value": "[parameters('groups')[copyIndex()].name]"
                          },
                          "productName": {
                            "value": "[parameters('name')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1124.51302",
                              "templateHash": "3444212521753639629"
                            }
                          },
                          "parameters": {
                            "apiManagementServiceName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the of the API Management service."
                              }
                            },
                            "productName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the of the Product."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the product group."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.ApiManagement/service/products/groups",
                              "apiVersion": "2021-08-01",
                              "name": "[format('{0}/{1}/{2}', parameters('apiManagementServiceName'), parameters('productName'), parameters('name'))]"
                            }
                          ],
                          "outputs": {
                            "groupResourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.ApiManagement/service/products/groups', parameters('apiManagementServiceName'), parameters('productName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the product group"
                              }
                            },
                            "groupName": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the product group"
                              }
                            },
                            "groupResourceGroup": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group the product group was deployed into"
                              }
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "productResourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.ApiManagement/service/products', parameters('apiManagementServiceName'), parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the API management service product"
                      }
                    },
                    "productName": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the API management service product"
                      }
                    },
                    "productResourceGroup": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group the API management service product was deployed into"
                      }
                    },
                    "productApisResourceIds": {
                      "type": "array",
                      "copy": {
                        "count": "[length(parameters('apis'))]",
                        "input": "[resourceId('Microsoft.ApiManagement/service/products/apis', parameters('apiManagementServiceName'), parameters('name'), parameters('apis')[copyIndex()].name)]"
                      },
                      "metadata": {
                        "description": "The Resources IDs of the API management service product APIs"
                      }
                    },
                    "productGroupsResourceIds": {
                      "type": "array",
                      "copy": {
                        "count": "[length(parameters('groups'))]",
                        "input": "[resourceId('Microsoft.ApiManagement/service/products/groups', parameters('apiManagementServiceName'), parameters('name'), parameters('groups')[copyIndex()].name)]"
                      },
                      "metadata": {
                        "description": "The Resources IDs of the API management service product groups"
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', parameters('name'))]",
                "apis_resource"
              ]
            },
            {
              "copy": {
                "name": "subscriptions_resource",
                "count": "[length(parameters('subscriptions'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-Apim-Subscription-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "apiManagementServiceName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[if(contains(parameters('subscriptions')[copyIndex()], 'name'), parameters('subscriptions')[copyIndex()].name, '')]"
                  },
                  "allowTracing": {
                    "value": "[if(contains(parameters('subscriptions')[copyIndex()], 'allowTracing'), parameters('subscriptions')[copyIndex()].allowTracing, false())]"
                  },
                  "ownerId": {
                    "value": "[if(contains(parameters('subscriptions')[copyIndex()], 'ownerId'), parameters('subscriptions')[copyIndex()].ownerId, '')]"
                  },
                  "primaryKey": {
                    "value": "[if(contains(parameters('subscriptions')[copyIndex()], 'primaryKey'), parameters('subscriptions')[copyIndex()].primaryKey, '')]"
                  },
                  "scope": {
                    "value": "[if(contains(parameters('subscriptions')[copyIndex()], 'scope'), parameters('subscriptions')[copyIndex()].scope, '/apis')]"
                  },
                  "secondaryKey": {
                    "value": "[if(contains(parameters('subscriptions')[copyIndex()], 'secondaryKey'), parameters('subscriptions')[copyIndex()].secondaryKey, '')]"
                  },
                  "state": {
                    "value": "[if(contains(parameters('subscriptions')[copyIndex()], 'state'), parameters('subscriptions')[copyIndex()].state, '')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1124.51302",
                      "templateHash": "4802022924279266247"
                    }
                  },
                  "parameters": {
                    "allowTracing": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Determines whether tracing can be enabled."
                      }
                    },
                    "apiManagementServiceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the of the API Management service."
                      }
                    },
                    "ownerId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. User (user ID path) for whom subscription is being created in form /users/{userId}"
                      }
                    },
                    "primaryKey": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Primary subscription key. If not specified during request key will be generated automatically."
                      }
                    },
                    "scope": {
                      "type": "string",
                      "defaultValue": "/apis",
                      "metadata": {
                        "description": "Optional. Scope type to choose between a product, \"allAPIs\" or a specific API. Scope like \"/products/{productId}\" or \"/apis\" or \"/apis/{apiId}\"."
                      }
                    },
                    "secondaryKey": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Secondary subscription key. If not specified during request key will be generated automatically."
                      }
                    },
                    "state": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Initial subscription state. If no value is specified, subscription is created with Submitted state. Possible states are \"*\" active \"?\" the subscription is active, \"*\" suspended \"?\" the subscription is blocked, and the subscriber cannot call any APIs of the product, * submitted ? the subscription request has been made by the developer, but has not yet been approved or rejected, * rejected ? the subscription request has been denied by an administrator, * cancelled ? the subscription has been cancelled by the developer or administrator, * expired ? the subscription reached its expiration date and was deactivated. - suspended, active, expired, submitted, rejected, cancelled"
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Subscription name."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.ApiManagement/service/subscriptions",
                      "apiVersion": "2021-08-01",
                      "name": "[format('{0}/{1}', parameters('apiManagementServiceName'), parameters('name'))]",
                      "properties": {
                        "scope": "[parameters('scope')]",
                        "displayName": "[parameters('name')]",
                        "ownerId": "[if(not(empty(parameters('ownerId'))), parameters('ownerId'), null())]",
                        "primaryKey": "[if(not(empty(parameters('primaryKey'))), parameters('primaryKey'), null())]",
                        "secondaryKey": "[if(not(empty(parameters('secondaryKey'))), parameters('secondaryKey'), null())]",
                        "state": "[if(not(empty(parameters('state'))), parameters('state'), null())]",
                        "allowTracing": "[parameters('allowTracing')]"
                      }
                    }
                  ],
                  "outputs": {
                    "subscriptionResourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.ApiManagement/service/subscriptions', parameters('apiManagementServiceName'), parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the API management service subscription"
                      }
                    },
                    "subscriptionName": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the API management service subscription"
                      }
                    },
                    "subscriptionResourceGroup": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group the API management service subscription was deployed into"
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "serviceName": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the API management service"
              }
            },
            "serviceResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.ApiManagement/service', parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the API management service"
              }
            },
            "serviceResourceGroup": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The resource group the API management service was deployed into"
              }
            },
            "systemAssignedPrincipalId": {
              "type": "string",
              "value": "[if(and(parameters('systemAssignedIdentity'), contains(reference(resourceId('Microsoft.ApiManagement/service', parameters('name')), '2021-08-01', 'full').identity, 'principalId')), reference(resourceId('Microsoft.ApiManagement/service', parameters('name')), '2021-08-01', 'full').identity.principalId, '')]",
              "metadata": {
                "description": "The principal ID of the system assigned identity."
              }
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-keyvault', variables('keyVaultName')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', variables('workspaceName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[variables('workspaceName')]",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('workspaceName')]"
          },
          "serviceTier": {
            "value": "PerGB2018"
          },
          "solutions": {
            "value": [
              "Updates",
              "AntiMalware",
              "SQLAssessment",
              "Security",
              "SecurityCenterFree",
              "ChangeTracking",
              "KeyVaultAnalytics",
              "AzureSQLAnalytics",
              "ServiceMap",
              "AgentHealthAssessment",
              "AlertManagement",
              "AzureActivity",
              "AzureDataFactoryAnalytics",
              "AzureNSGAnalytics",
              "InfrastructureInsights",
              "NetworkMonitoring",
              "VMInsights"
            ]
          },
          "tags": {
            "value": "[variables('resourceTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1124.51302",
              "templateHash": "17656029045474116261"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the Log Analytics workspace"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "serviceTier": {
              "type": "string",
              "defaultValue": "PerGB2018",
              "allowedValues": [
                "Free",
                "Standalone",
                "PerNode",
                "PerGB2018"
              ],
              "metadata": {
                "description": "Required. Service Tier: PerGB2018, Free, Standalone, PerGB or PerNode"
              }
            },
            "solutions": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. LAW gallerySolutions from the gallery."
              }
            },
            "dataRetention": {
              "type": "int",
              "defaultValue": 90,
              "maxValue": 730,
              "minValue": 0,
              "metadata": {
                "description": "Required. Number of days data will be retained for"
              }
            },
            "dailyQuotaGb": {
              "type": "int",
              "defaultValue": -1,
              "minValue": -1,
              "metadata": {
                "description": "Optional. The workspace daily quota for ingestion."
              }
            },
            "publicNetworkAccessForIngestion": {
              "type": "string",
              "defaultValue": "Enabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. The network access type for accessing Log Analytics ingestion."
              }
            },
            "publicNetworkAccessForQuery": {
              "type": "string",
              "defaultValue": "Enabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. The network access type for accessing Log Analytics query."
              }
            },
            "useResourcePermissions": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Set to 'true' to use resource or workspace permissions and 'false' (or leave empty) to require workspace permissions."
              }
            },
            "diagnosticLogsRetentionInDays": {
              "type": "int",
              "defaultValue": 90,
              "maxValue": 365,
              "minValue": 0,
              "metadata": {
                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
              }
            },
            "diagnosticStorageAccountId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic storage account."
              }
            },
            "workspaceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of a log analytics workspace."
              }
            },
            "eventHubAuthorizationRuleId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
              }
            },
            "eventHubName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Name of the event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "logsToEnable": {
              "type": "array",
              "defaultValue": [
                "Audit"
              ],
              "allowedValues": [
                "Audit"
              ],
              "metadata": {
                "description": "Optional. The name of logs that will be streamed."
              }
            },
            "metricsToEnable": {
              "type": "array",
              "defaultValue": [
                "AllMetrics"
              ],
              "allowedValues": [
                "AllMetrics"
              ],
              "metadata": {
                "description": "Optional. The name of metrics that will be streamed."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "diagnosticsLogs",
                "count": "[length(parameters('logsToEnable'))]",
                "input": {
                  "category": "[parameters('logsToEnable')[copyIndex('diagnosticsLogs')]]",
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              },
              {
                "name": "diagnosticsMetrics",
                "count": "[length(parameters('metricsToEnable'))]",
                "input": {
                  "category": "[parameters('metricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                  "timeGrain": null,
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              }
            ],
            "logAnalyticsSearchVersion": 1
          },
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2020-08-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "features": {
                  "searchVersion": "[variables('logAnalyticsSearchVersion')]",
                  "enableLogAccessUsingOnlyResourcePermissions": "[parameters('useResourcePermissions')]"
                },
                "sku": {
                  "name": "[parameters('serviceTier')]"
                },
                "retentionInDays": "[parameters('dataRetention')]",
                "workspaceCapping": {
                  "dailyQuotaGb": "[parameters('dailyQuotaGb')]"
                },
                "publicNetworkAccessForIngestion": "[parameters('publicNetworkAccessForIngestion')]",
                "publicNetworkAccessForQuery": "[parameters('publicNetworkAccessForQuery')]"
              }
            },
            {
              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('workspaceId')))), not(empty(parameters('eventHubAuthorizationRuleId')))), not(empty(parameters('eventHubName'))))]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}', parameters('name'))]",
              "name": "[format('{0}-diagnosticSettings', parameters('name'))]",
              "properties": {
                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                "workspaceId": "[if(not(empty(parameters('workspaceId'))), parameters('workspaceId'), null())]",
                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('eventHubAuthorizationRuleId'))), parameters('eventHubAuthorizationRuleId'), null())]",
                "eventHubName": "[if(not(empty(parameters('eventHubName'))), parameters('eventHubName'), null())]",
                "metrics": "[variables('diagnosticsMetrics')]",
                "logs": "[variables('diagnosticsLogs')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('solutions')))]",
              "copy": {
                "name": "logAnalyticsSolutions",
                "count": "[length(range(0, if(greater(length(parameters('solutions')), 0), length(parameters('solutions')), 1)))]",
                "mode": "serial",
                "batchSize": 1
              },
              "type": "Microsoft.OperationsManagement/solutions",
              "apiVersion": "2015-11-01-preview",
              "name": "[if(empty(parameters('solutions')), 'dummy', format('{0}({1})', parameters('solutions')[range(0, if(greater(length(parameters('solutions')), 0), length(parameters('solutions')), 1))[copyIndex()]], parameters('name')))]",
              "location": "[parameters('location')]",
              "properties": {
                "workspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]"
              },
              "plan": {
                "name": "[if(empty(parameters('solutions')), 'dummy', format('{0}({1})', parameters('solutions')[range(0, if(greater(length(parameters('solutions')), 0), length(parameters('solutions')), 1))[copyIndex()]], parameters('name')))]",
                "product": "[if(empty(parameters('solutions')), 'dummy', format('OMSGallery/{0}', parameters('solutions')[range(0, if(greater(length(parameters('solutions')), 0), length(parameters('solutions')), 1))[copyIndex()]]))]",
                "promotionCode": "",
                "publisher": "Microsoft"
              },
              "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "logAnalyticsResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the deployed log analytics workspace"
              }
            },
            "logAnalyticsResourceGroup": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The resource group of the deployed log analytics workspace"
              }
            },
            "logAnalyticsName": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the deployed log analytics workspace"
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))).customerId]",
              "metadata": {
                "description": "The ID associated with the workspace"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', parameters('resourceGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[variables('storageAccountName')]",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "environmentName": {
            "value": "[parameters('environmentName')]"
          },
          "name": {
            "value": "[variables('storageAccountName')]"
          },
          "kind": {
            "value": "StorageV2"
          },
          "skuName": {
            "value": "Standard_LRS"
          },
          "accessTier": {
            "value": "Hot"
          },
          "allowBlobPublicAccess": {
            "value": false
          },
          "allowedVirtualNetworks": {
            "value": [
              "[format('{0}/subnets/sharedSubnet', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('virtualNetworkResourceGroupName')), 'Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')))]"
            ]
          },
          "routingPreference": {
            "value": "MicrosoftRouting"
          },
          "minimumTlsVersion": {
            "value": "TLS1_2"
          },
          "diagnosticLogsRetentionInDays": {
            "value": "[parameters('diagnosticLogsRetentionInDays')]"
          },
          "diagnosticWorkspaceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', variables('workspaceName')), '2020-10-01').outputs.logAnalyticsResourceId.value]"
          },
          "tags": {
            "value": "[variables('resourceTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1124.51302",
              "templateHash": "13062811444630698706"
            }
          },
          "parameters": {
            "environmentName": {
              "type": "string",
              "metadata": {
                "description": "The name of the deployment environment."
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "description": "Sets a list of key value pairs that describe the resource. These tags can be used for viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key with a length no greater than 128 characters and a value with a length no greater than 256 characters.",
                "required": "no"
              }
            },
            "name": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Name of the Storage Account."
              },
              "maxLength": 24
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "skuName": {
              "type": "string",
              "defaultValue": "Standard_LRS",
              "allowedValues": [
                "Standard_LRS",
                "Standard_GRS",
                "Standard_RAGRS",
                "Standard_ZRS",
                "Premium_LRS",
                "Premium_ZRS",
                "Standard_GZRS",
                "Standard_RAGZRS"
              ],
              "metadata": {
                "description": "The SKU name. Required for account creation; optional for update. Note that in older versions, SKU name was called accountType.",
                "required": "yes"
              }
            },
            "kind": {
              "type": "string",
              "defaultValue": "StorageV2",
              "allowedValues": [
                "StorageV2",
                "BlobStorage",
                "FileStorage",
                "BlockBlobStorage"
              ],
              "metadata": {
                "description": "Required. Indicates the type of storage account.",
                "required": "yes"
              }
            },
            "accessTier": {
              "type": "string",
              "defaultValue": "Hot",
              "allowedValues": [
                "Hot",
                "Cool"
              ],
              "metadata": {
                "description": "Required for storage accounts. The access tier used for billing.",
                "required": "no"
              }
            },
            "largeFileSharesState": {
              "type": "string",
              "defaultValue": "Disabled",
              "allowedValues": [
                "Disabled",
                "Enabled"
              ],
              "metadata": {
                "description": "Allow large file shares if sets to Enabled. It cannot be disabled once it is enabled.",
                "required": "no"
              }
            },
            "allowedVirtualNetworks": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "List of virtual networks that are allowed to talk to this resource.",
                "required": "no",
                "subType": "string"
              }
            },
            "allowedIpAddresses": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "List of IpRules",
                "subType": "ipv4"
              }
            },
            "routingPreference": {
              "type": "string",
              "defaultValue": "MicrosoftRouting",
              "allowedValues": [
                "MicrosoftRouting",
                "InternetRouting"
              ],
              "metadata": {
                "description": "Routing Choice defines the kind of network routing opted by the user.",
                "required": "no"
              }
            },
            "allowBlobPublicAccess": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Allow or disallow public access to all blobs or containers in the storage account. The default interpretation is true for this property.",
                "required": "no"
              }
            },
            "minimumTlsVersion": {
              "type": "string",
              "defaultValue": "TLS1_2",
              "metadata": {
                "description": "Optional. Set the minimum TLS version on request to storage."
              },
              "allowedValues": [
                "TLS1_0",
                "TLS1_1",
                "TLS1_2"
              ]
            },
            "diagnosticLogsRetentionInDays": {
              "type": "int",
              "defaultValue": 90,
              "maxValue": 365,
              "minValue": 0,
              "metadata": {
                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
              }
            },
            "diagnosticStorageAccountId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic storage account."
              }
            },
            "diagnosticWorkspaceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of a log analytics workspace."
              }
            },
            "eventHubAuthorizationRuleId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
              }
            },
            "eventHubName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Name of the event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
              }
            },
            "metricsToEnable": {
              "type": "array",
              "defaultValue": [
                "Transaction"
              ],
              "allowedValues": [
                "Transaction"
              ],
              "metadata": {
                "description": "Optional. The name of metrics that will be streamed."
              }
            },
            "managementPolicyRules": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. The Storage Account ManagementPolicies Rules."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "diagnosticsMetrics",
                "count": "[length(parameters('metricsToEnable'))]",
                "input": {
                  "category": "[parameters('metricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                  "timeGrain": null,
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              },
              {
                "name": "networkAclsVirtualNetworkRules",
                "count": "[length(parameters('allowedVirtualNetworks'))]",
                "input": {
                  "id": "[parameters('allowedVirtualNetworks')[copyIndex('networkAclsVirtualNetworkRules')]]",
                  "action": "Allow"
                }
              },
              {
                "name": "networkAclsIpRules",
                "count": "[length(variables('allowedIpAddresses_var'))]",
                "input": {
                  "value": "[variables('allowedIpAddresses_var')[copyIndex('networkAclsIpRules')]]",
                  "action": "Allow"
                }
              }
            ],
            "isProd": "[equals(parameters('environmentName'), 'prod')]",
            "gatewayIpAddresses": [
              "204.15.117.96/30",
              "204.15.117.100/30",
              "204.15.117.104/29"
            ],
            "datacenterIpAddresses": [
              "63.73.199.0/24",
              "63.239.17.0/24",
              "204.15.116.0/22",
              "209.65.11.0/24"
            ],
            "prodIpAddresses": [
              "40.67.188.50",
              "52.177.84.230",
              "52.155.224.242",
              "51.105.163.210",
              "20.36.252.188"
            ],
            "nonProdIpAddresses": [
              "52.230.220.128",
              "40.65.233.76",
              "52.155.224.148",
              "51.105.144.11"
            ],
            "allowedIpAddresses_var": "[union(variables('gatewayIpAddresses'), variables('datacenterIpAddresses'), if(variables('isProd'), variables('prodIpAddresses'), variables('nonProdIpAddresses')), parameters('allowedIpAddresses'))]",
            "routingPreference_var": {
              "routingChoice": "[parameters('routingPreference')]",
              "publishMicrosoftEndpoints": false,
              "publishInternetEndpoints": false
            },
            "skuTier": "[split(parameters('skuName'), '_')[0]]"
          },
          "resources": [
            {
              "condition": "[true()]",
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2019-06-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "sku": {
                "tier": "[variables('skuTier')]",
                "name": "[parameters('skuName')]"
              },
              "kind": "[parameters('kind')]",
              "tags": "[parameters('tags')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "networkAcls": {
                  "bypass": "AzureServices",
                  "virtualNetworkRules": "[variables('networkAclsVirtualNetworkRules')]",
                  "ipRules": "[variables('networkAclsIpRules')]",
                  "defaultAction": "Deny"
                },
                "accessTier": "[parameters('accessTier')]",
                "supportsHttpsTrafficOnly": true,
                "largeFileSharesState": "[parameters('largeFileSharesState')]",
                "routingPreference": "[variables('routingPreference_var')]",
                "allowBlobPublicAccess": "[parameters('allowBlobPublicAccess')]",
                "minimumTlsVersion": "[parameters('minimumTlsVersion')]"
              }
            },
            {
              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('eventHubAuthorizationRuleId')))), not(empty(parameters('eventHubName'))))]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('name'))]",
              "name": "[format('{0}-diagnosticSettings', parameters('name'))]",
              "properties": {
                "storageAccountId": "[if(empty(parameters('diagnosticStorageAccountId')), null(), parameters('diagnosticStorageAccountId'))]",
                "workspaceId": "[if(empty(parameters('diagnosticWorkspaceId')), null(), parameters('diagnosticWorkspaceId'))]",
                "eventHubAuthorizationRuleId": "[if(empty(parameters('eventHubAuthorizationRuleId')), null(), parameters('eventHubAuthorizationRuleId'))]",
                "eventHubName": "[if(empty(parameters('eventHubName')), null(), parameters('eventHubName'))]",
                "metrics": "[variables('diagnosticsMetrics')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('managementPolicyRules')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-Storage-ManagementPolicies', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "storageAccountName": {
                    "value": "[parameters('name')]"
                  },
                  "rules": {
                    "value": "[parameters('managementPolicyRules')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1124.51302",
                      "templateHash": "18256414113412247031"
                    }
                  },
                  "parameters": {
                    "storageAccountName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the Storage Account."
                      },
                      "maxLength": 24
                    },
                    "name": {
                      "type": "string",
                      "defaultValue": "default",
                      "metadata": {
                        "description": "Optional. The name of the storage container to deploy"
                      }
                    },
                    "rules": {
                      "type": "array",
                      "metadata": {
                        "description": "Required. The Storage Account ManagementPolicies Rules"
                      }
                    }
                  },
                  "resources": [
                    {
                      "condition": "[not(empty(parameters('rules')))]",
                      "type": "Microsoft.Storage/storageAccounts/managementPolicies",
                      "apiVersion": "2019-06-01",
                      "name": "[format('{0}/{1}', parameters('storageAccountName'), parameters('name'))]",
                      "properties": {
                        "policy": {
                          "rules": "[parameters('rules')]"
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "managementPoliciesResourceId": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The resource ID of the deployed management policy"
                      }
                    },
                    "managementPoliciesName": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the deployed management policy"
                      }
                    },
                    "managementPoliciesResourceGroup": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group of the deployed management policy"
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "storageAccountResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the deployed storage account"
              }
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the deployed storage account"
              }
            },
            "resourceGroupName": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The resource group of the deployed storage account"
              }
            },
            "systemAssignedPrincipalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Storage/storageAccounts', parameters('name')), '2019-06-01', 'full').identity.principalId]",
              "metadata": {
                "description": "The principal ID of the system assigned identity."
              }
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', parameters('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', variables('workspaceName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-private-endpoint', variables('storageAccountName'))]",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('{0}-private-endpoint', variables('storageAccountName'))]"
          },
          "targetSubnetResourceId": {
            "value": "[format('{0}/subnets/sharedSubnet', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('virtualNetworkResourceGroupName')), 'Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')))]"
          },
          "groupId": {
            "value": [
              "blob"
            ]
          },
          "serviceResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', variables('storageAccountName')), '2020-10-01').outputs.storageAccountResourceId.value]"
          },
          "tags": {
            "value": "[variables('resourceTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1124.51302",
              "templateHash": "1204891240198710537"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the private endpoint resource to create."
              }
            },
            "targetSubnetResourceId": {
              "type": "string",
              "metadata": {
                "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
              }
            },
            "serviceResourceId": {
              "type": "string",
              "metadata": {
                "description": "Required. Resource ID of the resource that needs to be connected to the network."
              }
            },
            "groupId": {
              "type": "array",
              "metadata": {
                "description": "Required. Subtype(s) of the connection to be created. The allowed values depend on the type serviceResourceId refers to."
              }
            },
            "privateDnsZoneGroups": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Array of Private DNS zone groups configuration on the private endpoint."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all Resources."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2021-03-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "privateLinkServiceConnections": [
                  {
                    "name": "[parameters('name')]",
                    "properties": {
                      "privateLinkServiceId": "[parameters('serviceResourceId')]",
                      "groupIds": "[parameters('groupId')]"
                    }
                  }
                ],
                "manualPrivateLinkServiceConnections": [],
                "subnet": {
                  "id": "[parameters('targetSubnetResourceId')]"
                },
                "customDnsConfigs": []
              }
            },
            {
              "copy": {
                "name": "privateEndpoint_privateDnsZoneGroups",
                "count": "[length(parameters('privateDnsZoneGroups'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-PrivateEndpoint-PrivateDnsZoneGroup-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "privateDNSResourceIds": {
                    "value": "[parameters('privateDnsZoneGroups')[copyIndex()].privateDNSResourceIds]"
                  },
                  "privateEndpointName": {
                    "value": "[parameters('name')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1124.51302",
                      "templateHash": "18273707934466553696"
                    }
                  },
                  "parameters": {
                    "privateEndpointName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the private endpoint"
                      }
                    },
                    "privateDNSResourceIds": {
                      "type": "array",
                      "metadata": {
                        "description": "Required. List of private DNS resource IDs"
                      }
                    },
                    "name": {
                      "type": "string",
                      "defaultValue": "default",
                      "metadata": {
                        "description": "Optional. The name of the private DNS Zone Group"
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "privateDnsZoneConfigs",
                        "count": "[length(parameters('privateDNSResourceIds'))]",
                        "input": {
                          "name": "[parameters('privateEndpointName')]",
                          "properties": {
                            "privateDnsZoneId": "[parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')]]"
                          }
                        }
                      }
                    ]
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                      "properties": {
                        "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigs')]"
                      }
                    }
                  ],
                  "outputs": {
                    "privateDnsZoneGroupName": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the private endpoint DNS zone group"
                      }
                    },
                    "privateDnsZoneGroupResourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the private endpoint DNS zone group"
                      }
                    },
                    "privateDnsZoneGroupResourceGroup": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group the private endpoint DNS zone group was deployed into"
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "privateEndpointResourceGroup": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The resource group the private endpoint was deployed into"
              }
            },
            "privateEndpointResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the private endpoint"
              }
            },
            "privateEndpointName": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the private endpoint"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', parameters('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', variables('storageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-keyvault', variables('keyVaultName'))]",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "environmentName": {
            "value": "[parameters('environmentName')]"
          },
          "name": {
            "value": "[variables('keyVaultName')]"
          },
          "tenantId": {
            "value": "[subscription().tenantId]"
          },
          "skuName": {
            "value": "premium"
          },
          "accessPolicies": {
            "value": []
          },
          "enabledForTemplateDeployment": {
            "value": true
          },
          "enabledForDiskEncryption": {
            "value": false
          },
          "enabledForDeployment": {
            "value": true
          },
          "softDeleteRetentionInDays": {
            "value": 7
          },
          "allowedVirtualNetworks": {
            "value": [
              "[format('{0}/subnets/sharedSubnet', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('virtualNetworkResourceGroupName')), 'Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')))]"
            ]
          },
          "allowedIpAddresses": {
            "value": []
          },
          "diagnosticLogsRetentionInDays": {
            "value": "[parameters('diagnosticLogsRetentionInDays')]"
          },
          "workspaceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', variables('workspaceName')), '2020-10-01').outputs.logAnalyticsResourceId.value]"
          },
          "tags": {
            "value": "[variables('resourceTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1124.51302",
              "templateHash": "10330554266694216056"
            }
          },
          "parameters": {
            "environmentName": {
              "type": "string",
              "metadata": {
                "description": "The name of the deployment environment."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Resource tags."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "name": {
              "type": "string",
              "defaultValue": "",
              "maxLength": 24,
              "metadata": {
                "description": "Optional. Name of the Key Vault. If no name is provided, then unique name will be created."
              }
            },
            "tenantId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.",
                "required": "yes"
              }
            },
            "skuFamily": {
              "type": "string",
              "defaultValue": "A",
              "allowedValues": [
                "A"
              ],
              "metadata": {
                "description": "SKU family name",
                "required": "yes"
              }
            },
            "skuName": {
              "type": "string",
              "defaultValue": "premium",
              "allowedValues": [
                "premium"
              ],
              "metadata": {
                "description": "SKU name to specify whether the key vault is a standard vault or a premium vault.",
                "required": "yes"
              }
            },
            "accessPolicies": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Array of access policies object"
              }
            },
            "secrets": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. All secrets to create"
              }
            },
            "keys": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. All keys to create"
              }
            },
            "enabledForDeployment": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Property to specify whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault.",
                "required": "no"
              }
            },
            "enabledForDiskEncryption": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Property to specify whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys.",
                "required": "no"
              }
            },
            "enabledForTemplateDeployment": {
              "type": "bool",
              "defaultValue": true,
              "allowedValues": [
                true
              ],
              "metadata": {
                "description": "Property to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault.",
                "required": "no"
              }
            },
            "enableSoftDelete": {
              "type": "bool",
              "defaultValue": true,
              "allowedValues": [
                true
              ],
              "metadata": {
                "description": "Property to specify whether the 'soft delete' functionality is enabled for this key vault. If it's not set to any value(true or false) when creating new key vault, it will be set to true by default. Once set to true, it cannot be reverted to false.",
                "required": "no"
              }
            },
            "softDeleteRetentionInDays": {
              "type": "int",
              "defaultValue": 90,
              "maxValue": 90,
              "minValue": 7,
              "metadata": {
                "description": "softDelete data retention days. It accepts >=7 and <=90.",
                "required": "no"
              }
            },
            "enableRbacAuthorization": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be ignored (warning: this is a preview feature). When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. If null or not specified, the vault is created with the default value of false. Note that management actions are always authorized with RBAC.",
                "required": "no"
              }
            },
            "createMode": {
              "type": "string",
              "defaultValue": "default",
              "allowedValues": [
                "default",
                "recover"
              ],
              "metadata": {
                "description": "The vault's create mode to indicate whether the vault need to be recovered or not.",
                "required": "no"
              }
            },
            "enablePurgeProtection": {
              "type": "bool",
              "defaultValue": true,
              "allowedValues": [
                true
              ],
              "metadata": {
                "description": "Property specifying whether protection against purge is enabled for this vault. Setting this property to true activates protection against purge for this vault and its content - only the Key Vault service may initiate a hard, irrecoverable deletion. The setting is effective only if soft delete is also enabled. Enabling this functionality is irreversible - that is, the property does not accept false as its value.",
                "required": "no"
              }
            },
            "networkAclsDefaultAction": {
              "type": "string",
              "defaultValue": "Deny",
              "allowedValues": [
                "Deny"
              ],
              "metadata": {
                "description": "The default action when no rule from ipRules and from virtualNetworkRules match. This is only used after the bypass property has been evaluated.",
                "required": "no"
              }
            },
            "allowedIpAddresses": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "The list of IPv4 address range in CIDR notation, such as '124.56.78.91' (simple IP address) or '124.56.78.0/24' (all addresses that start with 124.56.78).",
                "required": "no",
                "subType": "ipv4"
              }
            },
            "allowedVirtualNetworks": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "The list of full resource id of a vnet subnet, such as '/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/subnet1'.",
                "required": "no",
                "subType": "resourceId"
              }
            },
            "diagnosticLogsRetentionInDays": {
              "type": "int",
              "defaultValue": 365,
              "maxValue": 365,
              "minValue": 0,
              "metadata": {
                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
              }
            },
            "diagnosticStorageAccountId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic storage account."
              }
            },
            "workspaceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of log analytics."
              }
            },
            "eventHubAuthorizationRuleId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
              }
            },
            "eventHubName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Name of the event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
              }
            },
            "baseTime": {
              "type": "string",
              "defaultValue": "[utcNow('u')]",
              "metadata": {
                "description": "Generated. Do not provide a value! This date value is used to generate a SAS token to access the modules."
              }
            },
            "logsToEnable": {
              "type": "array",
              "defaultValue": [
                "AuditEvent"
              ],
              "allowedValues": [
                "AuditEvent"
              ],
              "metadata": {
                "description": "Optional. The name of logs that will be streamed."
              }
            },
            "metricsToEnable": {
              "type": "array",
              "defaultValue": [
                "AllMetrics"
              ],
              "allowedValues": [
                "AllMetrics"
              ],
              "metadata": {
                "description": "Optional. The name of metrics that will be streamed."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "diagnosticsLogs",
                "count": "[length(parameters('logsToEnable'))]",
                "input": {
                  "category": "[parameters('logsToEnable')[copyIndex('diagnosticsLogs')]]",
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              },
              {
                "name": "diagnosticsMetrics",
                "count": "[length(parameters('metricsToEnable'))]",
                "input": {
                  "category": "[parameters('metricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                  "timeGrain": null,
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              },
              {
                "name": "networkAclsIpRules",
                "count": "[length(variables('allowedIpAddresses_var'))]",
                "input": {
                  "value": "[variables('allowedIpAddresses_var')[copyIndex('networkAclsIpRules')]]"
                }
              },
              {
                "name": "networkAclsVirtualNetworkRules",
                "count": "[length(parameters('allowedVirtualNetworks'))]",
                "input": {
                  "id": "[parameters('allowedVirtualNetworks')[copyIndex('networkAclsVirtualNetworkRules')]]"
                }
              },
              {
                "name": "formattedAccessPolicies",
                "count": "[length(parameters('accessPolicies'))]",
                "input": {
                  "applicationId": "[if(contains(parameters('accessPolicies')[copyIndex('formattedAccessPolicies')], 'applicationId'), parameters('accessPolicies')[copyIndex('formattedAccessPolicies')].applicationId, '')]",
                  "objectId": "[if(contains(parameters('accessPolicies')[copyIndex('formattedAccessPolicies')], 'objectId'), parameters('accessPolicies')[copyIndex('formattedAccessPolicies')].objectId, '')]",
                  "permissions": "[parameters('accessPolicies')[copyIndex('formattedAccessPolicies')].permissions]",
                  "tenantId": "[if(contains(parameters('accessPolicies')[copyIndex('formattedAccessPolicies')], 'tenantId'), parameters('accessPolicies')[copyIndex('formattedAccessPolicies')].tenantId, tenant().tenantId)]"
                }
              }
            ],
            "isProd": "[equals(parameters('environmentName'), 'prod')]",
            "datacenterIpAddresses": [
              "63.73.199.0/24",
              "63.239.17.0/24",
              "204.15.116.0/22",
              "209.65.11.0/24"
            ],
            "prodIpAddresses": [
              "40.67.188.50",
              "52.177.84.230",
              "52.155.224.242",
              "51.105.163.210",
              "20.36.252.188"
            ],
            "nonProdIpAddresses": [
              "52.230.220.128",
              "40.65.233.76",
              "52.155.224.148",
              "51.105.144.11"
            ],
            "allowedIpAddresses_var": "[union(parameters('allowedIpAddresses'), variables('datacenterIpAddresses'), if(variables('isProd'), variables('prodIpAddresses'), variables('nonProdIpAddresses')))]",
            "maxNameLength": 24,
            "uniquenameUntrim": "[uniqueString(format('Key Vault{0}', parameters('baseTime')))]",
            "uniquename": "[if(greater(length(variables('uniquenameUntrim')), variables('maxNameLength')), substring(variables('uniquenameUntrim'), 0, variables('maxNameLength')), variables('uniquenameUntrim'))]",
            "name_var": "[if(empty(parameters('name')), variables('uniquename'), parameters('name'))]"
          },
          "resources": [
            {
              "condition": "[true()]",
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2021-06-01-preview",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "tenantId": "[parameters('tenantId')]",
                "sku": {
                  "family": "[parameters('skuFamily')]",
                  "name": "[parameters('skuName')]"
                },
                "accessPolicies": "[variables('formattedAccessPolicies')]",
                "enabledForDeployment": "[parameters('enabledForDeployment')]",
                "enabledForDiskEncryption": "[parameters('enabledForDiskEncryption')]",
                "enabledForTemplateDeployment": "[parameters('enabledForTemplateDeployment')]",
                "enableSoftDelete": "[parameters('enableSoftDelete')]",
                "softDeleteRetentionInDays": "[parameters('softDeleteRetentionInDays')]",
                "enableRbacAuthorization": "[parameters('enableRbacAuthorization')]",
                "createMode": "[parameters('createMode')]",
                "enablePurgeProtection": "[parameters('enablePurgeProtection')]",
                "networkAcls": {
                  "bypass": "[if(or(parameters('enabledForDeployment'), parameters('enabledForTemplateDeployment')), 'AzureServices', 'None')]",
                  "defaultAction": "[parameters('networkAclsDefaultAction')]",
                  "ipRules": "[variables('networkAclsIpRules')]",
                  "virtualNetworkRules": "[variables('networkAclsVirtualNetworkRules')]"
                }
              }
            },
            {
              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('workspaceId')))), not(empty(parameters('eventHubAuthorizationRuleId')))), not(empty(parameters('eventHubName'))))]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('name'))]",
              "name": "[format('{0}-diagnosticSettingName', variables('name_var'))]",
              "properties": {
                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                "workspaceId": "[if(not(empty(parameters('workspaceId'))), parameters('workspaceId'), null())]",
                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('eventHubAuthorizationRuleId'))), parameters('eventHubAuthorizationRuleId'), null())]",
                "eventHubName": "[if(not(empty(parameters('eventHubName'))), parameters('eventHubName'), null())]",
                "metrics": "[variables('diagnosticsMetrics')]",
                "logs": "[variables('diagnosticsLogs')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('name'))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('accessPolicies')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-KeyVault-AccessPolicies', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "keyVaultName": {
                    "value": "[parameters('name')]"
                  },
                  "accessPolicies": {
                    "value": "[variables('formattedAccessPolicies')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1124.51302",
                      "templateHash": "16360856520765002823"
                    }
                  },
                  "parameters": {
                    "keyVaultName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the key vault"
                      }
                    },
                    "name": {
                      "type": "string",
                      "defaultValue": "add",
                      "metadata": {
                        "description": "Optional. The access policy deployment"
                      }
                    },
                    "accessPolicies": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. An array of 0 to 16 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedAccessPolicies",
                        "count": "[length(parameters('accessPolicies'))]",
                        "input": {
                          "applicationId": "[if(contains(parameters('accessPolicies')[copyIndex('formattedAccessPolicies')], 'applicationId'), parameters('accessPolicies')[copyIndex('formattedAccessPolicies')].applicationId, '')]",
                          "objectId": "[if(contains(parameters('accessPolicies')[copyIndex('formattedAccessPolicies')], 'objectId'), parameters('accessPolicies')[copyIndex('formattedAccessPolicies')].objectId, '')]",
                          "permissions": "[parameters('accessPolicies')[copyIndex('formattedAccessPolicies')].permissions]",
                          "tenantId": "[if(contains(parameters('accessPolicies')[copyIndex('formattedAccessPolicies')], 'tenantId'), parameters('accessPolicies')[copyIndex('formattedAccessPolicies')].tenantId, tenant().tenantId)]"
                        }
                      }
                    ]
                  },
                  "resources": [
                    {
                      "type": "Microsoft.KeyVault/vaults/accessPolicies",
                      "apiVersion": "2021-06-01-preview",
                      "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('name'))]",
                      "properties": {
                        "accessPolicies": "[variables('formattedAccessPolicies')]"
                      }
                    }
                  ],
                  "outputs": {
                    "accessPolicyResourceGroup": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The name of the resource group the access policies assignment was created in."
                      }
                    },
                    "accessPolicyName": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the access policies assignment"
                      }
                    },
                    "accessPolicyResourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.KeyVault/vaults/accessPolicies', parameters('keyVaultName'), parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the access policies assignment"
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('name'))]"
              ]
            },
            {
              "copy": {
                "name": "keyVault_secrets",
                "count": "[length(parameters('secrets'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-KeyVault-Secret-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('secrets')[copyIndex()].name]"
                  },
                  "value": {
                    "value": "[parameters('secrets')[copyIndex()].value]"
                  },
                  "keyVaultName": {
                    "value": "[parameters('name')]"
                  },
                  "attributesEnabled": {
                    "value": "[if(contains(parameters('secrets')[copyIndex()], 'attributesEnabled'), parameters('secrets')[copyIndex()].attributesEnabled, true())]"
                  },
                  "attributesExp": {
                    "value": "[if(contains(parameters('secrets')[copyIndex()], 'attributesExp'), parameters('secrets')[copyIndex()].attributesExp, -1)]"
                  },
                  "attributesNbf": {
                    "value": "[if(contains(parameters('secrets')[copyIndex()], 'attributesNbf'), parameters('secrets')[copyIndex()].attributesNbf, -1)]"
                  },
                  "contentType": {
                    "value": "[if(contains(parameters('secrets')[copyIndex()], 'contentType'), parameters('secrets')[copyIndex()].contentType, '')]"
                  },
                  "tags": {
                    "value": "[if(contains(parameters('secrets')[copyIndex()], 'tags'), parameters('secrets')[copyIndex()].tags, createObject())]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1124.51302",
                      "templateHash": "6070891538572065458"
                    }
                  },
                  "parameters": {
                    "keyVaultName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the key vault"
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the secret"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Resource tags."
                      }
                    },
                    "attributesEnabled": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Determines whether the object is enabled."
                      }
                    },
                    "attributesExp": {
                      "type": "int",
                      "defaultValue": -1,
                      "metadata": {
                        "description": "Optional. Expiry date in seconds since 1970-01-01T00:00:00Z."
                      }
                    },
                    "attributesNbf": {
                      "type": "int",
                      "defaultValue": -1,
                      "metadata": {
                        "description": "Optional. Not before date in seconds since 1970-01-01T00:00:00Z."
                      }
                    },
                    "contentType": {
                      "type": "secureString",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The content type of the secret."
                      }
                    },
                    "value": {
                      "type": "secureString",
                      "metadata": {
                        "description": "Required. The value of the secret. NOTE: \"value\" will never be returned from the service, as APIs using this model are is intended for internal use in ARM deployments. Users should use the data-plane REST service for interaction with vault secrets."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.KeyVault/vaults/secrets",
                      "apiVersion": "2019-09-01",
                      "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('name'))]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "contentType": "[parameters('contentType')]",
                        "attributes": {
                          "enabled": "[parameters('attributesEnabled')]",
                          "exp": "[if(not(equals(parameters('attributesExp'), -1)), parameters('attributesExp'), null())]",
                          "nbf": "[if(not(equals(parameters('attributesNbf'), -1)), parameters('attributesNbf'), null())]"
                        },
                        "value": "[parameters('value')]"
                      }
                    }
                  ],
                  "outputs": {
                    "secretName": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the secret."
                      }
                    },
                    "secretResourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the secret."
                      }
                    },
                    "secretResourceGroup": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The name of the resource group the secret was created in."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('name'))]"
              ]
            },
            {
              "copy": {
                "name": "keyVault_keys",
                "count": "[length(parameters('keys'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-KeyVault-Key-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('keys')[copyIndex()].name]"
                  },
                  "keyVaultName": {
                    "value": "[parameters('name')]"
                  },
                  "attributesEnabled": {
                    "value": "[if(contains(parameters('keys')[copyIndex()], 'attributesEnabled'), parameters('keys')[copyIndex()].attributesEnabled, true())]"
                  },
                  "attributesExp": {
                    "value": "[if(contains(parameters('keys')[copyIndex()], 'attributesExp'), parameters('keys')[copyIndex()].attributesExp, -1)]"
                  },
                  "attributesNbf": {
                    "value": "[if(contains(parameters('keys')[copyIndex()], 'attributesNbf'), parameters('keys')[copyIndex()].attributesNbf, -1)]"
                  },
                  "curveName": {
                    "value": "[if(contains(parameters('keys')[copyIndex()], 'curveName'), parameters('keys')[copyIndex()].curveName, 'P-256')]"
                  },
                  "keyOps": {
                    "value": "[if(contains(parameters('keys')[copyIndex()], 'keyOps'), parameters('keys')[copyIndex()].keyOps, createArray())]"
                  },
                  "keySize": {
                    "value": "[if(contains(parameters('keys')[copyIndex()], 'keySize'), parameters('keys')[copyIndex()].keySize, -1)]"
                  },
                  "kty": {
                    "value": "[if(contains(parameters('keys')[copyIndex()], 'kty'), parameters('keys')[copyIndex()].kty, 'EC')]"
                  },
                  "tags": {
                    "value": "[if(contains(parameters('keys')[copyIndex()], 'tags'), parameters('keys')[copyIndex()].tags, createObject())]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1124.51302",
                      "templateHash": "7740237786117904330"
                    }
                  },
                  "parameters": {
                    "keyVaultName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the key vault"
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the key"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Resource tags."
                      }
                    },
                    "attributesEnabled": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Determines whether the object is enabled."
                      }
                    },
                    "attributesExp": {
                      "type": "int",
                      "defaultValue": -1,
                      "metadata": {
                        "description": "Optional. Expiry date in seconds since 1970-01-01T00:00:00Z."
                      }
                    },
                    "attributesNbf": {
                      "type": "int",
                      "defaultValue": -1,
                      "metadata": {
                        "description": "Optional. Not before date in seconds since 1970-01-01T00:00:00Z."
                      }
                    },
                    "curveName": {
                      "type": "string",
                      "defaultValue": "P-256",
                      "allowedValues": [
                        "P-256",
                        "P-256K",
                        "P-384",
                        "P-521"
                      ],
                      "metadata": {
                        "description": "Optional. The elliptic curve name."
                      }
                    },
                    "keyOps": {
                      "type": "array",
                      "defaultValue": [],
                      "allowedValues": [
                        "decrypt",
                        "encrypt",
                        "import",
                        "sign",
                        "unwrapKey",
                        "verify",
                        "wrapKey"
                      ],
                      "metadata": {
                        "description": "Optional. Array of JsonWebKeyOperation"
                      }
                    },
                    "keySize": {
                      "type": "int",
                      "defaultValue": -1,
                      "metadata": {
                        "description": "Optional. The key size in bits. For example: 2048, 3072, or 4096 for RSA."
                      }
                    },
                    "kty": {
                      "type": "string",
                      "defaultValue": "EC",
                      "allowedValues": [
                        "EC",
                        "EC-HSM",
                        "RSA",
                        "RSA-HSM"
                      ],
                      "metadata": {
                        "description": "Optional. The type of the key."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.KeyVault/vaults/keys",
                      "apiVersion": "2019-09-01",
                      "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('name'))]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "attributes": {
                          "enabled": "[parameters('attributesEnabled')]",
                          "exp": "[if(not(equals(parameters('attributesExp'), -1)), parameters('attributesExp'), null())]",
                          "nbf": "[if(not(equals(parameters('attributesNbf'), -1)), parameters('attributesNbf'), null())]"
                        },
                        "curveName": "[parameters('curveName')]",
                        "keyOps": "[parameters('keyOps')]",
                        "keySize": "[if(not(equals(parameters('keySize'), -1)), parameters('keySize'), null())]",
                        "kty": "[parameters('kty')]"
                      }
                    }
                  ],
                  "outputs": {
                    "keyName": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the key."
                      }
                    },
                    "keyResourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the key."
                      }
                    },
                    "keyResourceGroup": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The name of the resource group the key was created in."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "keyVaultResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the key vault."
              }
            },
            "keyVaultResourceGroup": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The name of the resource group the key vault was created in."
              }
            },
            "keyVaultName": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the key vault."
              }
            },
            "keyVaultUrl": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('name'))).vaultUri]",
              "metadata": {
                "description": "The URL of the key vault."
              }
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', parameters('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', variables('workspaceName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-private-endpoint', variables('keyVaultName'))]",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('{0}-private-endpoint', variables('keyVaultName'))]"
          },
          "targetSubnetResourceId": {
            "value": "[format('{0}/subnets/sharedSubnet', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('virtualNetworkResourceGroupName')), 'Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')))]"
          },
          "groupId": {
            "value": [
              "vault"
            ]
          },
          "serviceResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-keyvault', variables('keyVaultName'))), '2020-10-01').outputs.keyVaultResourceId.value]"
          },
          "tags": {
            "value": "[variables('resourceTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1124.51302",
              "templateHash": "1204891240198710537"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the private endpoint resource to create."
              }
            },
            "targetSubnetResourceId": {
              "type": "string",
              "metadata": {
                "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
              }
            },
            "serviceResourceId": {
              "type": "string",
              "metadata": {
                "description": "Required. Resource ID of the resource that needs to be connected to the network."
              }
            },
            "groupId": {
              "type": "array",
              "metadata": {
                "description": "Required. Subtype(s) of the connection to be created. The allowed values depend on the type serviceResourceId refers to."
              }
            },
            "privateDnsZoneGroups": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Array of Private DNS zone groups configuration on the private endpoint."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all Resources."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2021-03-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "privateLinkServiceConnections": [
                  {
                    "name": "[parameters('name')]",
                    "properties": {
                      "privateLinkServiceId": "[parameters('serviceResourceId')]",
                      "groupIds": "[parameters('groupId')]"
                    }
                  }
                ],
                "manualPrivateLinkServiceConnections": [],
                "subnet": {
                  "id": "[parameters('targetSubnetResourceId')]"
                },
                "customDnsConfigs": []
              }
            },
            {
              "copy": {
                "name": "privateEndpoint_privateDnsZoneGroups",
                "count": "[length(parameters('privateDnsZoneGroups'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-PrivateEndpoint-PrivateDnsZoneGroup-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "privateDNSResourceIds": {
                    "value": "[parameters('privateDnsZoneGroups')[copyIndex()].privateDNSResourceIds]"
                  },
                  "privateEndpointName": {
                    "value": "[parameters('name')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1124.51302",
                      "templateHash": "18273707934466553696"
                    }
                  },
                  "parameters": {
                    "privateEndpointName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the private endpoint"
                      }
                    },
                    "privateDNSResourceIds": {
                      "type": "array",
                      "metadata": {
                        "description": "Required. List of private DNS resource IDs"
                      }
                    },
                    "name": {
                      "type": "string",
                      "defaultValue": "default",
                      "metadata": {
                        "description": "Optional. The name of the private DNS Zone Group"
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "privateDnsZoneConfigs",
                        "count": "[length(parameters('privateDNSResourceIds'))]",
                        "input": {
                          "name": "[parameters('privateEndpointName')]",
                          "properties": {
                            "privateDnsZoneId": "[parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')]]"
                          }
                        }
                      }
                    ]
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                      "properties": {
                        "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigs')]"
                      }
                    }
                  ],
                  "outputs": {
                    "privateDnsZoneGroupName": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the private endpoint DNS zone group"
                      }
                    },
                    "privateDnsZoneGroupResourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the private endpoint DNS zone group"
                      }
                    },
                    "privateDnsZoneGroupResourceGroup": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group the private endpoint DNS zone group was deployed into"
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "privateEndpointResourceGroup": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The resource group the private endpoint was deployed into"
              }
            },
            "privateEndpointResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the private endpoint"
              }
            },
            "privateEndpointName": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the private endpoint"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-keyvault', variables('keyVaultName')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', parameters('resourceGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-appins', variables('appInsightsName'))]",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "appInsightsWorkspaceResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', variables('workspaceName')), '2020-10-01').outputs.logAnalyticsResourceId.value]"
          },
          "name": {
            "value": "[variables('appInsightsName')]"
          },
          "tags": {
            "value": "[variables('resourceTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1124.51302",
              "templateHash": "9890686526493610162"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the Application Insights"
              }
            },
            "appInsightsType": {
              "type": "string",
              "defaultValue": "web",
              "allowedValues": [
                "web",
                "other"
              ],
              "metadata": {
                "description": "Optional. Application type"
              }
            },
            "appInsightsWorkspaceResourceId": {
              "type": "string",
              "metadata": {
                "description": "Required. Resource ID of the log analytics workspace which the data will be ingested to. This property is required to create an application with this API version. Applications from older versions will not have this property."
              }
            },
            "appInsightsPublicNetworkAccessForIngestion": {
              "type": "string",
              "defaultValue": "Enabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. The network access type for accessing Application Insights ingestion. - Enabled or Disabled"
              }
            },
            "appInsightsPublicNetworkAccessForQuery": {
              "type": "string",
              "defaultValue": "Enabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. The network access type for accessing Application Insights query. - Enabled or Disabled"
              }
            },
            "kind": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The kind of application that this component refers to, used to customize UI. This value is a freeform string, values should typically be one of the following: web, ios, other, store, java, phone."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all Resources"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Insights/components",
              "apiVersion": "2020-02-02",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "kind": "[parameters('kind')]",
              "properties": {
                "Application_Type": "[parameters('appInsightsType')]",
                "WorkspaceResourceId": "[parameters('appInsightsWorkspaceResourceId')]",
                "publicNetworkAccessForIngestion": "[parameters('appInsightsPublicNetworkAccessForIngestion')]",
                "publicNetworkAccessForQuery": "[parameters('appInsightsPublicNetworkAccessForQuery')]"
              }
            }
          ],
          "outputs": {
            "appInsightsName": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the application insights component"
              }
            },
            "appInsightsResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Insights/components', parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the application insights component"
              }
            },
            "appInsightsResourceGroup": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The resource group the application insights component was deployed into"
              }
            },
            "appInsightsAppId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Insights/components', parameters('name'))).AppId]",
              "metadata": {
                "description": "The application ID of the application insights component"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', parameters('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', variables('workspaceName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[parameters('appServicePlanName')]",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[parameters('appServicePlanName')]"
          },
          "skuName": {
            "value": "I1V2"
          },
          "skuTier": {
            "value": "IsolatedV2"
          },
          "appServiceEnvironmentId": {
            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('sharedResourceGroupName')), 'Microsoft.Web/hostingEnvironments', parameters('appServiceEnvironmentName'))]"
          },
          "tags": {
            "value": "[variables('resourceTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1124.51302",
              "templateHash": "8025097068450534095"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "maxLength": 40,
              "minLength": 1,
              "metadata": {
                "description": "Required. The name of the app service plan to deploy."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "skuName": {
              "type": "string",
              "allowedValues": [
                "S1",
                "S2",
                "S3",
                "P1",
                "P2",
                "P3",
                "P1V2",
                "P2V2",
                "P3V2",
                "P1V3",
                "P2V3",
                "P3V3",
                "I1",
                "I2",
                "I3",
                "EP1",
                "EP2",
                "EP3",
                "I1V2"
              ],
              "metadata": {
                "description": "Name of the resource SKU.",
                "required": "no"
              }
            },
            "serverOS": {
              "type": "string",
              "defaultValue": "Windows",
              "allowedValues": [
                "Windows",
                "Linux"
              ],
              "metadata": {
                "description": "Optional. Kind of server OS."
              }
            },
            "appServiceEnvironmentId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The Resource ID of the App Service Environment to use for the App Service Plan."
              }
            },
            "workerTierName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Target worker tier assigned to the App Service plan."
              }
            },
            "perSiteScaling": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. If true, apps assigned to this App Service plan can be scaled independently. If false, apps assigned to this App Service plan will scale to all instances of the plan."
              }
            },
            "maximumElasticWorkerCount": {
              "type": "int",
              "defaultValue": 1,
              "metadata": {
                "description": "Optional. Maximum number of total workers allowed for this ElasticScaleEnabled App Service Plan."
              }
            },
            "targetWorkerCount": {
              "type": "int",
              "defaultValue": 0,
              "metadata": {
                "description": "Optional. Scaling worker count."
              }
            },
            "targetWorkerSize": {
              "type": "int",
              "defaultValue": 0,
              "allowedValues": [
                0,
                1,
                2
              ],
              "metadata": {
                "description": "Optional. The instance size of the hosting plan (small, medium, or large)."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "skuTier": {
              "type": "string",
              "defaultValue": "IsolatedV2",
              "metadata": {
                "description": "App service plan sku."
              }
            }
          },
          "variables": {
            "hostingEnvironmentProfile": {
              "id": "[parameters('appServiceEnvironmentId')]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Web/serverfarms",
              "apiVersion": "2021-02-01",
              "name": "[parameters('name')]",
              "kind": "[if(equals(parameters('serverOS'), 'Windows'), '', 'linux')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "[parameters('skuName')]",
                "tier": "[parameters('skuTier')]"
              },
              "properties": {
                "workerTierName": "[parameters('workerTierName')]",
                "hostingEnvironmentProfile": "[if(not(empty(parameters('appServiceEnvironmentId'))), variables('hostingEnvironmentProfile'), null())]",
                "perSiteScaling": "[parameters('perSiteScaling')]",
                "maximumElasticWorkerCount": "[parameters('maximumElasticWorkerCount')]",
                "reserved": "[equals(parameters('serverOS'), 'Linux')]",
                "targetWorkerCount": "[parameters('targetWorkerCount')]",
                "targetWorkerSizeId": "[parameters('targetWorkerSize')]"
              }
            }
          ],
          "outputs": {
            "appServicePlanResourceGroup": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The resource group the app service plan was deployed into"
              }
            },
            "appServicePlanName": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the app service plan"
              }
            },
            "appServicePlanResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Web/serverfarms', parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the app service plan"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', parameters('resourceGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-api-portal-app', variables('namingPrefixHyphen'))]",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "kind": {
            "value": "app"
          },
          "name": {
            "value": "[format('{0}-api-portal-app', variables('namingPrefixHyphen'))]"
          },
          "storageAccountId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', variables('storageAccountName')), '2020-10-01').outputs.storageAccountResourceId.value]"
          },
          "appInsightId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-appins', variables('appInsightsName'))), '2020-10-01').outputs.appInsightsResourceId.value]"
          },
          "appServicePlanId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', parameters('appServicePlanName')), '2020-10-01').outputs.appServicePlanResourceId.value]"
          },
          "diagnosticLogsRetentionInDays": {
            "value": "[parameters('diagnosticLogsRetentionInDays')]"
          },
          "appServiceEnvironmentId": {
            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('sharedResourceGroupName')), 'Microsoft.Web/hostingEnvironments', parameters('appServiceEnvironmentName'))]"
          },
          "tags": {
            "value": "[variables('resourceTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1124.51302",
              "templateHash": "5086708811691693692"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the site."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all Resources."
              }
            },
            "kind": {
              "type": "string",
              "allowedValues": [
                "functionapp",
                "app"
              ],
              "metadata": {
                "description": "Required. Type of site to deploy."
              }
            },
            "httpsOnly": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Configures a site to accept only HTTPS requests. Issues redirect for HTTP requests."
              }
            },
            "clientAffinityEnabled": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. If client affinity is enabled."
              }
            },
            "siteConfig": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Configuration of the app."
              }
            },
            "storageAccountId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Required if functionapp kind. The resource ID of the storage account to manage triggers and logging function executions."
              }
            },
            "functionsWorkerRuntime": {
              "type": "string",
              "defaultValue": "",
              "allowedValues": [
                "dotnet",
                "node",
                "python",
                "java",
                "powershell",
                ""
              ],
              "metadata": {
                "description": "Optional. Runtime of the function worker."
              }
            },
            "functionsExtensionVersion": {
              "type": "string",
              "defaultValue": "~3",
              "metadata": {
                "description": "Optional. Version if the function extension."
              }
            },
            "appServicePlanId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The resource ID of the app service plan to use for the site. If not provided, the appServicePlanObject is used to create a new plan."
              }
            },
            "appInsightId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The resource ID of the existing app insight to leverage for the app. If the resource ID is not provided, the appInsightObject can be used to create a new app insight."
              }
            },
            "appServiceEnvironmentId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The resource ID of the app service environment to use for this resource."
              }
            },
            "systemAssignedIdentity": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Enables system assigned managed identity on the resource."
              }
            },
            "userAssignedIdentities": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. The ID(s) to assign to the resource."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "diagnosticLogsRetentionInDays": {
              "type": "int",
              "defaultValue": 90,
              "maxValue": 365,
              "minValue": 0,
              "metadata": {
                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
              }
            },
            "diagnosticStorageAccountId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic storage account."
              }
            },
            "workspaceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of log analytics workspace."
              }
            },
            "eventHubAuthorizationRuleId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the event hub authorization rule for the event hub namespace in which the event hub should be created or streamed to."
              }
            },
            "eventHubName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Name of the event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
              }
            },
            "logsToEnable": {
              "type": "array",
              "defaultValue": "[if(equals(parameters('kind'), 'functionapp'), createArray('FunctionAppLogs'), createArray('AppServiceHTTPLogs', 'AppServiceConsoleLogs', 'AppServiceAppLogs', 'AppServiceFileAuditLogs', 'AppServiceAuditLogs'))]",
              "allowedValues": [
                "AppServiceHTTPLogs",
                "AppServiceConsoleLogs",
                "AppServiceAppLogs",
                "AppServiceFileAuditLogs",
                "AppServiceAuditLogs",
                "FunctionAppLogs"
              ],
              "metadata": {
                "description": "Optional. The name of logs that will be streamed."
              }
            },
            "metricsToEnable": {
              "type": "array",
              "defaultValue": [
                "AllMetrics"
              ],
              "allowedValues": [
                "AllMetrics"
              ],
              "metadata": {
                "description": "Optional. The name of metrics that will be streamed."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "diagnosticsLogs",
                "count": "[length(parameters('logsToEnable'))]",
                "input": {
                  "category": "[parameters('logsToEnable')[copyIndex('diagnosticsLogs')]]",
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              },
              {
                "name": "diagnosticsMetrics",
                "count": "[length(parameters('metricsToEnable'))]",
                "input": {
                  "category": "[parameters('metricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                  "timeGrain": null,
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              }
            ],
            "identityType": "[if(parameters('systemAssignedIdentity'), if(not(empty(parameters('userAssignedIdentities'))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
            "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]"
          },
          "resources": [
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2020-12-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "kind": "[parameters('kind')]",
              "tags": "[parameters('tags')]",
              "identity": "[variables('identity')]",
              "properties": {
                "serverFarmId": "[parameters('appServicePlanId')]",
                "httpsOnly": "[parameters('httpsOnly')]",
                "hostingEnvironmentProfile": "[if(not(empty(parameters('appServiceEnvironmentId'))), createObject('id', parameters('appServiceEnvironmentId')), null())]",
                "clientAffinityEnabled": "[parameters('clientAffinityEnabled')]",
                "siteConfig": "[parameters('siteConfig')]"
              }
            },
            {
              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('workspaceId')))), not(empty(parameters('eventHubAuthorizationRuleId')))), not(empty(parameters('eventHubName'))))]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Web/sites/{0}', parameters('name'))]",
              "name": "[format('{0}-diagnosticSettings', parameters('name'))]",
              "properties": {
                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                "workspaceId": "[if(not(empty(parameters('workspaceId'))), parameters('workspaceId'), null())]",
                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('eventHubAuthorizationRuleId'))), parameters('eventHubAuthorizationRuleId'), null())]",
                "eventHubName": "[if(not(empty(parameters('eventHubName'))), parameters('eventHubName'), null())]",
                "metrics": "[variables('diagnosticsMetrics')]",
                "logs": "[variables('diagnosticsLogs')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-Site-Config', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "appsettings"
                  },
                  "appName": {
                    "value": "[parameters('name')]"
                  },
                  "storageAccountId": {
                    "value": "[if(not(empty(parameters('storageAccountId'))), parameters('storageAccountId'), '')]"
                  },
                  "appInsightId": {
                    "value": "[if(not(empty(parameters('appInsightId'))), parameters('appInsightId'), '')]"
                  },
                  "functionsWorkerRuntime": {
                    "value": "[if(not(empty(parameters('functionsWorkerRuntime'))), parameters('functionsWorkerRuntime'), '')]"
                  },
                  "functionsExtensionVersion": {
                    "value": "[if(not(empty(parameters('functionsExtensionVersion'))), parameters('functionsExtensionVersion'), '~3')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1124.51302",
                      "templateHash": "13050009928190282449"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "allowedValues": [
                        "appsettings"
                      ],
                      "metadata": {
                        "description": "Required. Name of the site config."
                      }
                    },
                    "appName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the site parent resource."
                      }
                    },
                    "storageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Required if app of kind functionapp. Resource ID of the storage account to manage triggers and logging function executions."
                      }
                    },
                    "functionsWorkerRuntime": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "dotnet",
                        "node",
                        "python",
                        "java",
                        "powershell",
                        ""
                      ],
                      "metadata": {
                        "description": "Optional. Runtime of the function worker."
                      }
                    },
                    "functionsExtensionVersion": {
                      "type": "string",
                      "defaultValue": "~3",
                      "metadata": {
                        "description": "Optional. Version of the function extension."
                      }
                    },
                    "appInsightId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the app insight to leverage for this resource."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Web/sites/config",
                      "apiVersion": "2021-02-01",
                      "name": "[format('{0}/{1}', parameters('appName'), parameters('name'))]",
                      "properties": {
                        "AzureWebJobsStorage": "[if(not(empty(parameters('storageAccountId'))), format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};', last(split(parameters('storageAccountId'), '/')), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('storageAccountId'), '/')[2], split(parameters('storageAccountId'), '/')[4]), 'Microsoft.Storage/storageAccounts', last(split(parameters('storageAccountId'), '/'))), '2021-02-01').keys[0].value), null())]",
                        "AzureWebJobsDashboard": "[if(not(empty(parameters('storageAccountId'))), format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};', last(split(parameters('storageAccountId'), '/')), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('storageAccountId'), '/')[2], split(parameters('storageAccountId'), '/')[4]), 'Microsoft.Storage/storageAccounts', last(split(parameters('storageAccountId'), '/'))), '2021-02-01').keys[0].value), null())]",
                        "FUNCTIONS_EXTENSION_VERSION": "[if(and(equals(reference(resourceId('Microsoft.Web/sites', parameters('appName')), '2020-12-01', 'full').kind, 'functionapp'), not(empty(parameters('functionsExtensionVersion')))), parameters('functionsExtensionVersion'), null())]",
                        "FUNCTIONS_WORKER_RUNTIME": "[if(and(equals(reference(resourceId('Microsoft.Web/sites', parameters('appName')), '2020-12-01', 'full').kind, 'functionapp'), not(empty(parameters('functionsWorkerRuntime')))), parameters('functionsWorkerRuntime'), null())]",
                        "APPINSIGHTS_INSTRUMENTATIONKEY": "[if(not(empty(parameters('appInsightId'))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('appInsightId'), '/')[2], split(parameters('appInsightId'), '/')[4]), 'Microsoft.Insights/components', last(split(parameters('appInsightId'), '/'))), '2020-02-02').InstrumentationKey, '')]",
                        "APPLICATIONINSIGHTS_CONNECTION_STRING": "[if(not(empty(parameters('appInsightId'))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('appInsightId'), '/')[2], split(parameters('appInsightId'), '/')[4]), 'Microsoft.Insights/components', last(split(parameters('appInsightId'), '/'))), '2020-02-02').ConnectionString, '')]"
                      }
                    }
                  ],
                  "outputs": {
                    "configName": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the site config."
                      }
                    },
                    "configResourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Web/sites/config', parameters('appName'), parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the site config."
                      }
                    },
                    "configResourceGroup": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group the site config was deployed into."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "siteName": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the site."
              }
            },
            "siteResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Web/sites', parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the site."
              }
            },
            "siteResourceGroup": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The resource group the site was deployed into."
              }
            },
            "systemAssignedPrincipalId": {
              "type": "string",
              "value": "[if(parameters('systemAssignedIdentity'), reference(resourceId('Microsoft.Web/sites', parameters('name')), '2020-12-01', 'full').identity.principalId, '')]",
              "metadata": {
                "description": "The principal ID of the system assigned identity."
              }
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-appins', variables('appInsightsName')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', parameters('appServicePlanName'))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', parameters('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', variables('storageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-vendor-setup-api-func', variables('namingPrefixHyphen'))]",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "kind": {
            "value": "functionapp"
          },
          "name": {
            "value": "[format('{0}-vendor-setup-api-func', variables('namingPrefixHyphen'))]"
          },
          "storageAccountId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', variables('storageAccountName')), '2020-10-01').outputs.storageAccountResourceId.value]"
          },
          "functionsWorkerRuntime": {
            "value": "java"
          },
          "appInsightId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-appins', variables('appInsightsName'))), '2020-10-01').outputs.appInsightsResourceId.value]"
          },
          "appServicePlanId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', parameters('appServicePlanName')), '2020-10-01').outputs.appServicePlanResourceId.value]"
          },
          "diagnosticLogsRetentionInDays": {
            "value": "[parameters('diagnosticLogsRetentionInDays')]"
          },
          "appServiceEnvironmentId": {
            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('sharedResourceGroupName')), 'Microsoft.Web/hostingEnvironments', parameters('appServiceEnvironmentName'))]"
          },
          "tags": {
            "value": "[variables('resourceTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1124.51302",
              "templateHash": "5086708811691693692"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the site."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all Resources."
              }
            },
            "kind": {
              "type": "string",
              "allowedValues": [
                "functionapp",
                "app"
              ],
              "metadata": {
                "description": "Required. Type of site to deploy."
              }
            },
            "httpsOnly": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Configures a site to accept only HTTPS requests. Issues redirect for HTTP requests."
              }
            },
            "clientAffinityEnabled": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. If client affinity is enabled."
              }
            },
            "siteConfig": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Configuration of the app."
              }
            },
            "storageAccountId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Required if functionapp kind. The resource ID of the storage account to manage triggers and logging function executions."
              }
            },
            "functionsWorkerRuntime": {
              "type": "string",
              "defaultValue": "",
              "allowedValues": [
                "dotnet",
                "node",
                "python",
                "java",
                "powershell",
                ""
              ],
              "metadata": {
                "description": "Optional. Runtime of the function worker."
              }
            },
            "functionsExtensionVersion": {
              "type": "string",
              "defaultValue": "~3",
              "metadata": {
                "description": "Optional. Version if the function extension."
              }
            },
            "appServicePlanId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The resource ID of the app service plan to use for the site. If not provided, the appServicePlanObject is used to create a new plan."
              }
            },
            "appInsightId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The resource ID of the existing app insight to leverage for the app. If the resource ID is not provided, the appInsightObject can be used to create a new app insight."
              }
            },
            "appServiceEnvironmentId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The resource ID of the app service environment to use for this resource."
              }
            },
            "systemAssignedIdentity": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Enables system assigned managed identity on the resource."
              }
            },
            "userAssignedIdentities": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. The ID(s) to assign to the resource."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "diagnosticLogsRetentionInDays": {
              "type": "int",
              "defaultValue": 90,
              "maxValue": 365,
              "minValue": 0,
              "metadata": {
                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
              }
            },
            "diagnosticStorageAccountId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic storage account."
              }
            },
            "workspaceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of log analytics workspace."
              }
            },
            "eventHubAuthorizationRuleId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the event hub authorization rule for the event hub namespace in which the event hub should be created or streamed to."
              }
            },
            "eventHubName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Name of the event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
              }
            },
            "logsToEnable": {
              "type": "array",
              "defaultValue": "[if(equals(parameters('kind'), 'functionapp'), createArray('FunctionAppLogs'), createArray('AppServiceHTTPLogs', 'AppServiceConsoleLogs', 'AppServiceAppLogs', 'AppServiceFileAuditLogs', 'AppServiceAuditLogs'))]",
              "allowedValues": [
                "AppServiceHTTPLogs",
                "AppServiceConsoleLogs",
                "AppServiceAppLogs",
                "AppServiceFileAuditLogs",
                "AppServiceAuditLogs",
                "FunctionAppLogs"
              ],
              "metadata": {
                "description": "Optional. The name of logs that will be streamed."
              }
            },
            "metricsToEnable": {
              "type": "array",
              "defaultValue": [
                "AllMetrics"
              ],
              "allowedValues": [
                "AllMetrics"
              ],
              "metadata": {
                "description": "Optional. The name of metrics that will be streamed."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "diagnosticsLogs",
                "count": "[length(parameters('logsToEnable'))]",
                "input": {
                  "category": "[parameters('logsToEnable')[copyIndex('diagnosticsLogs')]]",
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              },
              {
                "name": "diagnosticsMetrics",
                "count": "[length(parameters('metricsToEnable'))]",
                "input": {
                  "category": "[parameters('metricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                  "timeGrain": null,
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              }
            ],
            "identityType": "[if(parameters('systemAssignedIdentity'), if(not(empty(parameters('userAssignedIdentities'))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
            "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]"
          },
          "resources": [
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2020-12-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "kind": "[parameters('kind')]",
              "tags": "[parameters('tags')]",
              "identity": "[variables('identity')]",
              "properties": {
                "serverFarmId": "[parameters('appServicePlanId')]",
                "httpsOnly": "[parameters('httpsOnly')]",
                "hostingEnvironmentProfile": "[if(not(empty(parameters('appServiceEnvironmentId'))), createObject('id', parameters('appServiceEnvironmentId')), null())]",
                "clientAffinityEnabled": "[parameters('clientAffinityEnabled')]",
                "siteConfig": "[parameters('siteConfig')]"
              }
            },
            {
              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('workspaceId')))), not(empty(parameters('eventHubAuthorizationRuleId')))), not(empty(parameters('eventHubName'))))]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Web/sites/{0}', parameters('name'))]",
              "name": "[format('{0}-diagnosticSettings', parameters('name'))]",
              "properties": {
                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                "workspaceId": "[if(not(empty(parameters('workspaceId'))), parameters('workspaceId'), null())]",
                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('eventHubAuthorizationRuleId'))), parameters('eventHubAuthorizationRuleId'), null())]",
                "eventHubName": "[if(not(empty(parameters('eventHubName'))), parameters('eventHubName'), null())]",
                "metrics": "[variables('diagnosticsMetrics')]",
                "logs": "[variables('diagnosticsLogs')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-Site-Config', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "appsettings"
                  },
                  "appName": {
                    "value": "[parameters('name')]"
                  },
                  "storageAccountId": {
                    "value": "[if(not(empty(parameters('storageAccountId'))), parameters('storageAccountId'), '')]"
                  },
                  "appInsightId": {
                    "value": "[if(not(empty(parameters('appInsightId'))), parameters('appInsightId'), '')]"
                  },
                  "functionsWorkerRuntime": {
                    "value": "[if(not(empty(parameters('functionsWorkerRuntime'))), parameters('functionsWorkerRuntime'), '')]"
                  },
                  "functionsExtensionVersion": {
                    "value": "[if(not(empty(parameters('functionsExtensionVersion'))), parameters('functionsExtensionVersion'), '~3')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1124.51302",
                      "templateHash": "13050009928190282449"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "allowedValues": [
                        "appsettings"
                      ],
                      "metadata": {
                        "description": "Required. Name of the site config."
                      }
                    },
                    "appName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the site parent resource."
                      }
                    },
                    "storageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Required if app of kind functionapp. Resource ID of the storage account to manage triggers and logging function executions."
                      }
                    },
                    "functionsWorkerRuntime": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "dotnet",
                        "node",
                        "python",
                        "java",
                        "powershell",
                        ""
                      ],
                      "metadata": {
                        "description": "Optional. Runtime of the function worker."
                      }
                    },
                    "functionsExtensionVersion": {
                      "type": "string",
                      "defaultValue": "~3",
                      "metadata": {
                        "description": "Optional. Version of the function extension."
                      }
                    },
                    "appInsightId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the app insight to leverage for this resource."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Web/sites/config",
                      "apiVersion": "2021-02-01",
                      "name": "[format('{0}/{1}', parameters('appName'), parameters('name'))]",
                      "properties": {
                        "AzureWebJobsStorage": "[if(not(empty(parameters('storageAccountId'))), format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};', last(split(parameters('storageAccountId'), '/')), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('storageAccountId'), '/')[2], split(parameters('storageAccountId'), '/')[4]), 'Microsoft.Storage/storageAccounts', last(split(parameters('storageAccountId'), '/'))), '2021-02-01').keys[0].value), null())]",
                        "AzureWebJobsDashboard": "[if(not(empty(parameters('storageAccountId'))), format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};', last(split(parameters('storageAccountId'), '/')), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('storageAccountId'), '/')[2], split(parameters('storageAccountId'), '/')[4]), 'Microsoft.Storage/storageAccounts', last(split(parameters('storageAccountId'), '/'))), '2021-02-01').keys[0].value), null())]",
                        "FUNCTIONS_EXTENSION_VERSION": "[if(and(equals(reference(resourceId('Microsoft.Web/sites', parameters('appName')), '2020-12-01', 'full').kind, 'functionapp'), not(empty(parameters('functionsExtensionVersion')))), parameters('functionsExtensionVersion'), null())]",
                        "FUNCTIONS_WORKER_RUNTIME": "[if(and(equals(reference(resourceId('Microsoft.Web/sites', parameters('appName')), '2020-12-01', 'full').kind, 'functionapp'), not(empty(parameters('functionsWorkerRuntime')))), parameters('functionsWorkerRuntime'), null())]",
                        "APPINSIGHTS_INSTRUMENTATIONKEY": "[if(not(empty(parameters('appInsightId'))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('appInsightId'), '/')[2], split(parameters('appInsightId'), '/')[4]), 'Microsoft.Insights/components', last(split(parameters('appInsightId'), '/'))), '2020-02-02').InstrumentationKey, '')]",
                        "APPLICATIONINSIGHTS_CONNECTION_STRING": "[if(not(empty(parameters('appInsightId'))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('appInsightId'), '/')[2], split(parameters('appInsightId'), '/')[4]), 'Microsoft.Insights/components', last(split(parameters('appInsightId'), '/'))), '2020-02-02').ConnectionString, '')]"
                      }
                    }
                  ],
                  "outputs": {
                    "configName": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the site config."
                      }
                    },
                    "configResourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Web/sites/config', parameters('appName'), parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the site config."
                      }
                    },
                    "configResourceGroup": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group the site config was deployed into."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "siteName": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the site."
              }
            },
            "siteResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Web/sites', parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the site."
              }
            },
            "siteResourceGroup": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The resource group the site was deployed into."
              }
            },
            "systemAssignedPrincipalId": {
              "type": "string",
              "value": "[if(parameters('systemAssignedIdentity'), reference(resourceId('Microsoft.Web/sites', parameters('name')), '2020-12-01', 'full').identity.principalId, '')]",
              "metadata": {
                "description": "The principal ID of the system assigned identity."
              }
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-appins', variables('appInsightsName')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', parameters('appServicePlanName'))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', parameters('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', variables('storageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-vendor-setup-ui-app', variables('namingPrefixHyphen'))]",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "kind": {
            "value": "app"
          },
          "name": {
            "value": "[format('{0}-vendor-setup-ui-app', variables('namingPrefixHyphen'))]"
          },
          "storageAccountId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', variables('storageAccountName')), '2020-10-01').outputs.storageAccountResourceId.value]"
          },
          "appInsightId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-appins', variables('appInsightsName'))), '2020-10-01').outputs.appInsightsResourceId.value]"
          },
          "appServicePlanId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', parameters('appServicePlanName')), '2020-10-01').outputs.appServicePlanResourceId.value]"
          },
          "diagnosticLogsRetentionInDays": {
            "value": "[parameters('diagnosticLogsRetentionInDays')]"
          },
          "appServiceEnvironmentId": {
            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('sharedResourceGroupName')), 'Microsoft.Web/hostingEnvironments', parameters('appServiceEnvironmentName'))]"
          },
          "tags": {
            "value": "[variables('resourceTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1124.51302",
              "templateHash": "5086708811691693692"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the site."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all Resources."
              }
            },
            "kind": {
              "type": "string",
              "allowedValues": [
                "functionapp",
                "app"
              ],
              "metadata": {
                "description": "Required. Type of site to deploy."
              }
            },
            "httpsOnly": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Configures a site to accept only HTTPS requests. Issues redirect for HTTP requests."
              }
            },
            "clientAffinityEnabled": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. If client affinity is enabled."
              }
            },
            "siteConfig": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Configuration of the app."
              }
            },
            "storageAccountId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Required if functionapp kind. The resource ID of the storage account to manage triggers and logging function executions."
              }
            },
            "functionsWorkerRuntime": {
              "type": "string",
              "defaultValue": "",
              "allowedValues": [
                "dotnet",
                "node",
                "python",
                "java",
                "powershell",
                ""
              ],
              "metadata": {
                "description": "Optional. Runtime of the function worker."
              }
            },
            "functionsExtensionVersion": {
              "type": "string",
              "defaultValue": "~3",
              "metadata": {
                "description": "Optional. Version if the function extension."
              }
            },
            "appServicePlanId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The resource ID of the app service plan to use for the site. If not provided, the appServicePlanObject is used to create a new plan."
              }
            },
            "appInsightId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The resource ID of the existing app insight to leverage for the app. If the resource ID is not provided, the appInsightObject can be used to create a new app insight."
              }
            },
            "appServiceEnvironmentId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The resource ID of the app service environment to use for this resource."
              }
            },
            "systemAssignedIdentity": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Enables system assigned managed identity on the resource."
              }
            },
            "userAssignedIdentities": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. The ID(s) to assign to the resource."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "diagnosticLogsRetentionInDays": {
              "type": "int",
              "defaultValue": 90,
              "maxValue": 365,
              "minValue": 0,
              "metadata": {
                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
              }
            },
            "diagnosticStorageAccountId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic storage account."
              }
            },
            "workspaceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of log analytics workspace."
              }
            },
            "eventHubAuthorizationRuleId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the event hub authorization rule for the event hub namespace in which the event hub should be created or streamed to."
              }
            },
            "eventHubName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Name of the event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
              }
            },
            "logsToEnable": {
              "type": "array",
              "defaultValue": "[if(equals(parameters('kind'), 'functionapp'), createArray('FunctionAppLogs'), createArray('AppServiceHTTPLogs', 'AppServiceConsoleLogs', 'AppServiceAppLogs', 'AppServiceFileAuditLogs', 'AppServiceAuditLogs'))]",
              "allowedValues": [
                "AppServiceHTTPLogs",
                "AppServiceConsoleLogs",
                "AppServiceAppLogs",
                "AppServiceFileAuditLogs",
                "AppServiceAuditLogs",
                "FunctionAppLogs"
              ],
              "metadata": {
                "description": "Optional. The name of logs that will be streamed."
              }
            },
            "metricsToEnable": {
              "type": "array",
              "defaultValue": [
                "AllMetrics"
              ],
              "allowedValues": [
                "AllMetrics"
              ],
              "metadata": {
                "description": "Optional. The name of metrics that will be streamed."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "diagnosticsLogs",
                "count": "[length(parameters('logsToEnable'))]",
                "input": {
                  "category": "[parameters('logsToEnable')[copyIndex('diagnosticsLogs')]]",
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              },
              {
                "name": "diagnosticsMetrics",
                "count": "[length(parameters('metricsToEnable'))]",
                "input": {
                  "category": "[parameters('metricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                  "timeGrain": null,
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              }
            ],
            "identityType": "[if(parameters('systemAssignedIdentity'), if(not(empty(parameters('userAssignedIdentities'))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
            "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]"
          },
          "resources": [
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2020-12-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "kind": "[parameters('kind')]",
              "tags": "[parameters('tags')]",
              "identity": "[variables('identity')]",
              "properties": {
                "serverFarmId": "[parameters('appServicePlanId')]",
                "httpsOnly": "[parameters('httpsOnly')]",
                "hostingEnvironmentProfile": "[if(not(empty(parameters('appServiceEnvironmentId'))), createObject('id', parameters('appServiceEnvironmentId')), null())]",
                "clientAffinityEnabled": "[parameters('clientAffinityEnabled')]",
                "siteConfig": "[parameters('siteConfig')]"
              }
            },
            {
              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('workspaceId')))), not(empty(parameters('eventHubAuthorizationRuleId')))), not(empty(parameters('eventHubName'))))]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Web/sites/{0}', parameters('name'))]",
              "name": "[format('{0}-diagnosticSettings', parameters('name'))]",
              "properties": {
                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                "workspaceId": "[if(not(empty(parameters('workspaceId'))), parameters('workspaceId'), null())]",
                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('eventHubAuthorizationRuleId'))), parameters('eventHubAuthorizationRuleId'), null())]",
                "eventHubName": "[if(not(empty(parameters('eventHubName'))), parameters('eventHubName'), null())]",
                "metrics": "[variables('diagnosticsMetrics')]",
                "logs": "[variables('diagnosticsLogs')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-Site-Config', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "appsettings"
                  },
                  "appName": {
                    "value": "[parameters('name')]"
                  },
                  "storageAccountId": {
                    "value": "[if(not(empty(parameters('storageAccountId'))), parameters('storageAccountId'), '')]"
                  },
                  "appInsightId": {
                    "value": "[if(not(empty(parameters('appInsightId'))), parameters('appInsightId'), '')]"
                  },
                  "functionsWorkerRuntime": {
                    "value": "[if(not(empty(parameters('functionsWorkerRuntime'))), parameters('functionsWorkerRuntime'), '')]"
                  },
                  "functionsExtensionVersion": {
                    "value": "[if(not(empty(parameters('functionsExtensionVersion'))), parameters('functionsExtensionVersion'), '~3')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1124.51302",
                      "templateHash": "13050009928190282449"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "allowedValues": [
                        "appsettings"
                      ],
                      "metadata": {
                        "description": "Required. Name of the site config."
                      }
                    },
                    "appName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the site parent resource."
                      }
                    },
                    "storageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Required if app of kind functionapp. Resource ID of the storage account to manage triggers and logging function executions."
                      }
                    },
                    "functionsWorkerRuntime": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "dotnet",
                        "node",
                        "python",
                        "java",
                        "powershell",
                        ""
                      ],
                      "metadata": {
                        "description": "Optional. Runtime of the function worker."
                      }
                    },
                    "functionsExtensionVersion": {
                      "type": "string",
                      "defaultValue": "~3",
                      "metadata": {
                        "description": "Optional. Version of the function extension."
                      }
                    },
                    "appInsightId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the app insight to leverage for this resource."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Web/sites/config",
                      "apiVersion": "2021-02-01",
                      "name": "[format('{0}/{1}', parameters('appName'), parameters('name'))]",
                      "properties": {
                        "AzureWebJobsStorage": "[if(not(empty(parameters('storageAccountId'))), format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};', last(split(parameters('storageAccountId'), '/')), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('storageAccountId'), '/')[2], split(parameters('storageAccountId'), '/')[4]), 'Microsoft.Storage/storageAccounts', last(split(parameters('storageAccountId'), '/'))), '2021-02-01').keys[0].value), null())]",
                        "AzureWebJobsDashboard": "[if(not(empty(parameters('storageAccountId'))), format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};', last(split(parameters('storageAccountId'), '/')), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('storageAccountId'), '/')[2], split(parameters('storageAccountId'), '/')[4]), 'Microsoft.Storage/storageAccounts', last(split(parameters('storageAccountId'), '/'))), '2021-02-01').keys[0].value), null())]",
                        "FUNCTIONS_EXTENSION_VERSION": "[if(and(equals(reference(resourceId('Microsoft.Web/sites', parameters('appName')), '2020-12-01', 'full').kind, 'functionapp'), not(empty(parameters('functionsExtensionVersion')))), parameters('functionsExtensionVersion'), null())]",
                        "FUNCTIONS_WORKER_RUNTIME": "[if(and(equals(reference(resourceId('Microsoft.Web/sites', parameters('appName')), '2020-12-01', 'full').kind, 'functionapp'), not(empty(parameters('functionsWorkerRuntime')))), parameters('functionsWorkerRuntime'), null())]",
                        "APPINSIGHTS_INSTRUMENTATIONKEY": "[if(not(empty(parameters('appInsightId'))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('appInsightId'), '/')[2], split(parameters('appInsightId'), '/')[4]), 'Microsoft.Insights/components', last(split(parameters('appInsightId'), '/'))), '2020-02-02').InstrumentationKey, '')]",
                        "APPLICATIONINSIGHTS_CONNECTION_STRING": "[if(not(empty(parameters('appInsightId'))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('appInsightId'), '/')[2], split(parameters('appInsightId'), '/')[4]), 'Microsoft.Insights/components', last(split(parameters('appInsightId'), '/'))), '2020-02-02').ConnectionString, '')]"
                      }
                    }
                  ],
                  "outputs": {
                    "configName": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the site config."
                      }
                    },
                    "configResourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Web/sites/config', parameters('appName'), parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the site config."
                      }
                    },
                    "configResourceGroup": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group the site config was deployed into."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "siteName": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the site."
              }
            },
            "siteResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Web/sites', parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the site."
              }
            },
            "siteResourceGroup": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The resource group the site was deployed into."
              }
            },
            "systemAssignedPrincipalId": {
              "type": "string",
              "value": "[if(parameters('systemAssignedIdentity'), reference(resourceId('Microsoft.Web/sites', parameters('name')), '2020-12-01', 'full').identity.principalId, '')]",
              "metadata": {
                "description": "The principal ID of the system assigned identity."
              }
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-appins', variables('appInsightsName')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', parameters('appServicePlanName'))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', parameters('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', variables('storageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-photo-prints-app', variables('namingPrefixHyphen'))]",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "kind": {
            "value": "app"
          },
          "name": {
            "value": "[format('{0}-photo-prints-app', variables('namingPrefixHyphen'))]"
          },
          "storageAccountId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', variables('storageAccountName')), '2020-10-01').outputs.storageAccountResourceId.value]"
          },
          "appInsightId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-appins', variables('appInsightsName'))), '2020-10-01').outputs.appInsightsResourceId.value]"
          },
          "appServicePlanId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', parameters('appServicePlanName')), '2020-10-01').outputs.appServicePlanResourceId.value]"
          },
          "diagnosticLogsRetentionInDays": {
            "value": "[parameters('diagnosticLogsRetentionInDays')]"
          },
          "appServiceEnvironmentId": {
            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('sharedResourceGroupName')), 'Microsoft.Web/hostingEnvironments', parameters('appServiceEnvironmentName'))]"
          },
          "tags": {
            "value": "[variables('resourceTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1124.51302",
              "templateHash": "5086708811691693692"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the site."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all Resources."
              }
            },
            "kind": {
              "type": "string",
              "allowedValues": [
                "functionapp",
                "app"
              ],
              "metadata": {
                "description": "Required. Type of site to deploy."
              }
            },
            "httpsOnly": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Configures a site to accept only HTTPS requests. Issues redirect for HTTP requests."
              }
            },
            "clientAffinityEnabled": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. If client affinity is enabled."
              }
            },
            "siteConfig": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Configuration of the app."
              }
            },
            "storageAccountId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Required if functionapp kind. The resource ID of the storage account to manage triggers and logging function executions."
              }
            },
            "functionsWorkerRuntime": {
              "type": "string",
              "defaultValue": "",
              "allowedValues": [
                "dotnet",
                "node",
                "python",
                "java",
                "powershell",
                ""
              ],
              "metadata": {
                "description": "Optional. Runtime of the function worker."
              }
            },
            "functionsExtensionVersion": {
              "type": "string",
              "defaultValue": "~3",
              "metadata": {
                "description": "Optional. Version if the function extension."
              }
            },
            "appServicePlanId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The resource ID of the app service plan to use for the site. If not provided, the appServicePlanObject is used to create a new plan."
              }
            },
            "appInsightId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The resource ID of the existing app insight to leverage for the app. If the resource ID is not provided, the appInsightObject can be used to create a new app insight."
              }
            },
            "appServiceEnvironmentId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The resource ID of the app service environment to use for this resource."
              }
            },
            "systemAssignedIdentity": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Enables system assigned managed identity on the resource."
              }
            },
            "userAssignedIdentities": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. The ID(s) to assign to the resource."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "diagnosticLogsRetentionInDays": {
              "type": "int",
              "defaultValue": 90,
              "maxValue": 365,
              "minValue": 0,
              "metadata": {
                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
              }
            },
            "diagnosticStorageAccountId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic storage account."
              }
            },
            "workspaceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of log analytics workspace."
              }
            },
            "eventHubAuthorizationRuleId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the event hub authorization rule for the event hub namespace in which the event hub should be created or streamed to."
              }
            },
            "eventHubName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Name of the event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
              }
            },
            "logsToEnable": {
              "type": "array",
              "defaultValue": "[if(equals(parameters('kind'), 'functionapp'), createArray('FunctionAppLogs'), createArray('AppServiceHTTPLogs', 'AppServiceConsoleLogs', 'AppServiceAppLogs', 'AppServiceFileAuditLogs', 'AppServiceAuditLogs'))]",
              "allowedValues": [
                "AppServiceHTTPLogs",
                "AppServiceConsoleLogs",
                "AppServiceAppLogs",
                "AppServiceFileAuditLogs",
                "AppServiceAuditLogs",
                "FunctionAppLogs"
              ],
              "metadata": {
                "description": "Optional. The name of logs that will be streamed."
              }
            },
            "metricsToEnable": {
              "type": "array",
              "defaultValue": [
                "AllMetrics"
              ],
              "allowedValues": [
                "AllMetrics"
              ],
              "metadata": {
                "description": "Optional. The name of metrics that will be streamed."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "diagnosticsLogs",
                "count": "[length(parameters('logsToEnable'))]",
                "input": {
                  "category": "[parameters('logsToEnable')[copyIndex('diagnosticsLogs')]]",
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              },
              {
                "name": "diagnosticsMetrics",
                "count": "[length(parameters('metricsToEnable'))]",
                "input": {
                  "category": "[parameters('metricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                  "timeGrain": null,
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              }
            ],
            "identityType": "[if(parameters('systemAssignedIdentity'), if(not(empty(parameters('userAssignedIdentities'))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
            "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]"
          },
          "resources": [
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2020-12-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "kind": "[parameters('kind')]",
              "tags": "[parameters('tags')]",
              "identity": "[variables('identity')]",
              "properties": {
                "serverFarmId": "[parameters('appServicePlanId')]",
                "httpsOnly": "[parameters('httpsOnly')]",
                "hostingEnvironmentProfile": "[if(not(empty(parameters('appServiceEnvironmentId'))), createObject('id', parameters('appServiceEnvironmentId')), null())]",
                "clientAffinityEnabled": "[parameters('clientAffinityEnabled')]",
                "siteConfig": "[parameters('siteConfig')]"
              }
            },
            {
              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('workspaceId')))), not(empty(parameters('eventHubAuthorizationRuleId')))), not(empty(parameters('eventHubName'))))]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Web/sites/{0}', parameters('name'))]",
              "name": "[format('{0}-diagnosticSettings', parameters('name'))]",
              "properties": {
                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                "workspaceId": "[if(not(empty(parameters('workspaceId'))), parameters('workspaceId'), null())]",
                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('eventHubAuthorizationRuleId'))), parameters('eventHubAuthorizationRuleId'), null())]",
                "eventHubName": "[if(not(empty(parameters('eventHubName'))), parameters('eventHubName'), null())]",
                "metrics": "[variables('diagnosticsMetrics')]",
                "logs": "[variables('diagnosticsLogs')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-Site-Config', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "appsettings"
                  },
                  "appName": {
                    "value": "[parameters('name')]"
                  },
                  "storageAccountId": {
                    "value": "[if(not(empty(parameters('storageAccountId'))), parameters('storageAccountId'), '')]"
                  },
                  "appInsightId": {
                    "value": "[if(not(empty(parameters('appInsightId'))), parameters('appInsightId'), '')]"
                  },
                  "functionsWorkerRuntime": {
                    "value": "[if(not(empty(parameters('functionsWorkerRuntime'))), parameters('functionsWorkerRuntime'), '')]"
                  },
                  "functionsExtensionVersion": {
                    "value": "[if(not(empty(parameters('functionsExtensionVersion'))), parameters('functionsExtensionVersion'), '~3')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1124.51302",
                      "templateHash": "13050009928190282449"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "allowedValues": [
                        "appsettings"
                      ],
                      "metadata": {
                        "description": "Required. Name of the site config."
                      }
                    },
                    "appName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the site parent resource."
                      }
                    },
                    "storageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Required if app of kind functionapp. Resource ID of the storage account to manage triggers and logging function executions."
                      }
                    },
                    "functionsWorkerRuntime": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "dotnet",
                        "node",
                        "python",
                        "java",
                        "powershell",
                        ""
                      ],
                      "metadata": {
                        "description": "Optional. Runtime of the function worker."
                      }
                    },
                    "functionsExtensionVersion": {
                      "type": "string",
                      "defaultValue": "~3",
                      "metadata": {
                        "description": "Optional. Version of the function extension."
                      }
                    },
                    "appInsightId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the app insight to leverage for this resource."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Web/sites/config",
                      "apiVersion": "2021-02-01",
                      "name": "[format('{0}/{1}', parameters('appName'), parameters('name'))]",
                      "properties": {
                        "AzureWebJobsStorage": "[if(not(empty(parameters('storageAccountId'))), format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};', last(split(parameters('storageAccountId'), '/')), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('storageAccountId'), '/')[2], split(parameters('storageAccountId'), '/')[4]), 'Microsoft.Storage/storageAccounts', last(split(parameters('storageAccountId'), '/'))), '2021-02-01').keys[0].value), null())]",
                        "AzureWebJobsDashboard": "[if(not(empty(parameters('storageAccountId'))), format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};', last(split(parameters('storageAccountId'), '/')), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('storageAccountId'), '/')[2], split(parameters('storageAccountId'), '/')[4]), 'Microsoft.Storage/storageAccounts', last(split(parameters('storageAccountId'), '/'))), '2021-02-01').keys[0].value), null())]",
                        "FUNCTIONS_EXTENSION_VERSION": "[if(and(equals(reference(resourceId('Microsoft.Web/sites', parameters('appName')), '2020-12-01', 'full').kind, 'functionapp'), not(empty(parameters('functionsExtensionVersion')))), parameters('functionsExtensionVersion'), null())]",
                        "FUNCTIONS_WORKER_RUNTIME": "[if(and(equals(reference(resourceId('Microsoft.Web/sites', parameters('appName')), '2020-12-01', 'full').kind, 'functionapp'), not(empty(parameters('functionsWorkerRuntime')))), parameters('functionsWorkerRuntime'), null())]",
                        "APPINSIGHTS_INSTRUMENTATIONKEY": "[if(not(empty(parameters('appInsightId'))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('appInsightId'), '/')[2], split(parameters('appInsightId'), '/')[4]), 'Microsoft.Insights/components', last(split(parameters('appInsightId'), '/'))), '2020-02-02').InstrumentationKey, '')]",
                        "APPLICATIONINSIGHTS_CONNECTION_STRING": "[if(not(empty(parameters('appInsightId'))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('appInsightId'), '/')[2], split(parameters('appInsightId'), '/')[4]), 'Microsoft.Insights/components', last(split(parameters('appInsightId'), '/'))), '2020-02-02').ConnectionString, '')]"
                      }
                    }
                  ],
                  "outputs": {
                    "configName": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the site config."
                      }
                    },
                    "configResourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Web/sites/config', parameters('appName'), parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the site config."
                      }
                    },
                    "configResourceGroup": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group the site config was deployed into."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "siteName": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the site."
              }
            },
            "siteResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Web/sites', parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the site."
              }
            },
            "siteResourceGroup": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The resource group the site was deployed into."
              }
            },
            "systemAssignedPrincipalId": {
              "type": "string",
              "value": "[if(parameters('systemAssignedIdentity'), reference(resourceId('Microsoft.Web/sites', parameters('name')), '2020-12-01', 'full').identity.principalId, '')]",
              "metadata": {
                "description": "The principal ID of the system assigned identity."
              }
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-appins', variables('appInsightsName')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', parameters('appServicePlanName'))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', parameters('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', variables('storageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-rx-checkout-app', variables('namingPrefixHyphen'))]",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "kind": {
            "value": "app"
          },
          "name": {
            "value": "[format('{0}-rx-checkout-app', variables('namingPrefixHyphen'))]"
          },
          "storageAccountId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', variables('storageAccountName')), '2020-10-01').outputs.storageAccountResourceId.value]"
          },
          "appInsightId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-appins', variables('appInsightsName'))), '2020-10-01').outputs.appInsightsResourceId.value]"
          },
          "appServicePlanId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', parameters('appServicePlanName')), '2020-10-01').outputs.appServicePlanResourceId.value]"
          },
          "diagnosticLogsRetentionInDays": {
            "value": "[parameters('diagnosticLogsRetentionInDays')]"
          },
          "appServiceEnvironmentId": {
            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('sharedResourceGroupName')), 'Microsoft.Web/hostingEnvironments', parameters('appServiceEnvironmentName'))]"
          },
          "tags": {
            "value": "[variables('resourceTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1124.51302",
              "templateHash": "5086708811691693692"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the site."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all Resources."
              }
            },
            "kind": {
              "type": "string",
              "allowedValues": [
                "functionapp",
                "app"
              ],
              "metadata": {
                "description": "Required. Type of site to deploy."
              }
            },
            "httpsOnly": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Configures a site to accept only HTTPS requests. Issues redirect for HTTP requests."
              }
            },
            "clientAffinityEnabled": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. If client affinity is enabled."
              }
            },
            "siteConfig": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Configuration of the app."
              }
            },
            "storageAccountId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Required if functionapp kind. The resource ID of the storage account to manage triggers and logging function executions."
              }
            },
            "functionsWorkerRuntime": {
              "type": "string",
              "defaultValue": "",
              "allowedValues": [
                "dotnet",
                "node",
                "python",
                "java",
                "powershell",
                ""
              ],
              "metadata": {
                "description": "Optional. Runtime of the function worker."
              }
            },
            "functionsExtensionVersion": {
              "type": "string",
              "defaultValue": "~3",
              "metadata": {
                "description": "Optional. Version if the function extension."
              }
            },
            "appServicePlanId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The resource ID of the app service plan to use for the site. If not provided, the appServicePlanObject is used to create a new plan."
              }
            },
            "appInsightId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The resource ID of the existing app insight to leverage for the app. If the resource ID is not provided, the appInsightObject can be used to create a new app insight."
              }
            },
            "appServiceEnvironmentId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The resource ID of the app service environment to use for this resource."
              }
            },
            "systemAssignedIdentity": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Enables system assigned managed identity on the resource."
              }
            },
            "userAssignedIdentities": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. The ID(s) to assign to the resource."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "diagnosticLogsRetentionInDays": {
              "type": "int",
              "defaultValue": 90,
              "maxValue": 365,
              "minValue": 0,
              "metadata": {
                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
              }
            },
            "diagnosticStorageAccountId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic storage account."
              }
            },
            "workspaceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of log analytics workspace."
              }
            },
            "eventHubAuthorizationRuleId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the event hub authorization rule for the event hub namespace in which the event hub should be created or streamed to."
              }
            },
            "eventHubName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Name of the event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
              }
            },
            "logsToEnable": {
              "type": "array",
              "defaultValue": "[if(equals(parameters('kind'), 'functionapp'), createArray('FunctionAppLogs'), createArray('AppServiceHTTPLogs', 'AppServiceConsoleLogs', 'AppServiceAppLogs', 'AppServiceFileAuditLogs', 'AppServiceAuditLogs'))]",
              "allowedValues": [
                "AppServiceHTTPLogs",
                "AppServiceConsoleLogs",
                "AppServiceAppLogs",
                "AppServiceFileAuditLogs",
                "AppServiceAuditLogs",
                "FunctionAppLogs"
              ],
              "metadata": {
                "description": "Optional. The name of logs that will be streamed."
              }
            },
            "metricsToEnable": {
              "type": "array",
              "defaultValue": [
                "AllMetrics"
              ],
              "allowedValues": [
                "AllMetrics"
              ],
              "metadata": {
                "description": "Optional. The name of metrics that will be streamed."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "diagnosticsLogs",
                "count": "[length(parameters('logsToEnable'))]",
                "input": {
                  "category": "[parameters('logsToEnable')[copyIndex('diagnosticsLogs')]]",
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              },
              {
                "name": "diagnosticsMetrics",
                "count": "[length(parameters('metricsToEnable'))]",
                "input": {
                  "category": "[parameters('metricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                  "timeGrain": null,
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              }
            ],
            "identityType": "[if(parameters('systemAssignedIdentity'), if(not(empty(parameters('userAssignedIdentities'))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
            "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]"
          },
          "resources": [
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2020-12-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "kind": "[parameters('kind')]",
              "tags": "[parameters('tags')]",
              "identity": "[variables('identity')]",
              "properties": {
                "serverFarmId": "[parameters('appServicePlanId')]",
                "httpsOnly": "[parameters('httpsOnly')]",
                "hostingEnvironmentProfile": "[if(not(empty(parameters('appServiceEnvironmentId'))), createObject('id', parameters('appServiceEnvironmentId')), null())]",
                "clientAffinityEnabled": "[parameters('clientAffinityEnabled')]",
                "siteConfig": "[parameters('siteConfig')]"
              }
            },
            {
              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('workspaceId')))), not(empty(parameters('eventHubAuthorizationRuleId')))), not(empty(parameters('eventHubName'))))]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Web/sites/{0}', parameters('name'))]",
              "name": "[format('{0}-diagnosticSettings', parameters('name'))]",
              "properties": {
                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                "workspaceId": "[if(not(empty(parameters('workspaceId'))), parameters('workspaceId'), null())]",
                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('eventHubAuthorizationRuleId'))), parameters('eventHubAuthorizationRuleId'), null())]",
                "eventHubName": "[if(not(empty(parameters('eventHubName'))), parameters('eventHubName'), null())]",
                "metrics": "[variables('diagnosticsMetrics')]",
                "logs": "[variables('diagnosticsLogs')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-Site-Config', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "appsettings"
                  },
                  "appName": {
                    "value": "[parameters('name')]"
                  },
                  "storageAccountId": {
                    "value": "[if(not(empty(parameters('storageAccountId'))), parameters('storageAccountId'), '')]"
                  },
                  "appInsightId": {
                    "value": "[if(not(empty(parameters('appInsightId'))), parameters('appInsightId'), '')]"
                  },
                  "functionsWorkerRuntime": {
                    "value": "[if(not(empty(parameters('functionsWorkerRuntime'))), parameters('functionsWorkerRuntime'), '')]"
                  },
                  "functionsExtensionVersion": {
                    "value": "[if(not(empty(parameters('functionsExtensionVersion'))), parameters('functionsExtensionVersion'), '~3')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1124.51302",
                      "templateHash": "13050009928190282449"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "allowedValues": [
                        "appsettings"
                      ],
                      "metadata": {
                        "description": "Required. Name of the site config."
                      }
                    },
                    "appName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the site parent resource."
                      }
                    },
                    "storageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Required if app of kind functionapp. Resource ID of the storage account to manage triggers and logging function executions."
                      }
                    },
                    "functionsWorkerRuntime": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "dotnet",
                        "node",
                        "python",
                        "java",
                        "powershell",
                        ""
                      ],
                      "metadata": {
                        "description": "Optional. Runtime of the function worker."
                      }
                    },
                    "functionsExtensionVersion": {
                      "type": "string",
                      "defaultValue": "~3",
                      "metadata": {
                        "description": "Optional. Version of the function extension."
                      }
                    },
                    "appInsightId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the app insight to leverage for this resource."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Web/sites/config",
                      "apiVersion": "2021-02-01",
                      "name": "[format('{0}/{1}', parameters('appName'), parameters('name'))]",
                      "properties": {
                        "AzureWebJobsStorage": "[if(not(empty(parameters('storageAccountId'))), format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};', last(split(parameters('storageAccountId'), '/')), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('storageAccountId'), '/')[2], split(parameters('storageAccountId'), '/')[4]), 'Microsoft.Storage/storageAccounts', last(split(parameters('storageAccountId'), '/'))), '2021-02-01').keys[0].value), null())]",
                        "AzureWebJobsDashboard": "[if(not(empty(parameters('storageAccountId'))), format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};', last(split(parameters('storageAccountId'), '/')), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('storageAccountId'), '/')[2], split(parameters('storageAccountId'), '/')[4]), 'Microsoft.Storage/storageAccounts', last(split(parameters('storageAccountId'), '/'))), '2021-02-01').keys[0].value), null())]",
                        "FUNCTIONS_EXTENSION_VERSION": "[if(and(equals(reference(resourceId('Microsoft.Web/sites', parameters('appName')), '2020-12-01', 'full').kind, 'functionapp'), not(empty(parameters('functionsExtensionVersion')))), parameters('functionsExtensionVersion'), null())]",
                        "FUNCTIONS_WORKER_RUNTIME": "[if(and(equals(reference(resourceId('Microsoft.Web/sites', parameters('appName')), '2020-12-01', 'full').kind, 'functionapp'), not(empty(parameters('functionsWorkerRuntime')))), parameters('functionsWorkerRuntime'), null())]",
                        "APPINSIGHTS_INSTRUMENTATIONKEY": "[if(not(empty(parameters('appInsightId'))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('appInsightId'), '/')[2], split(parameters('appInsightId'), '/')[4]), 'Microsoft.Insights/components', last(split(parameters('appInsightId'), '/'))), '2020-02-02').InstrumentationKey, '')]",
                        "APPLICATIONINSIGHTS_CONNECTION_STRING": "[if(not(empty(parameters('appInsightId'))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('appInsightId'), '/')[2], split(parameters('appInsightId'), '/')[4]), 'Microsoft.Insights/components', last(split(parameters('appInsightId'), '/'))), '2020-02-02').ConnectionString, '')]"
                      }
                    }
                  ],
                  "outputs": {
                    "configName": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the site config."
                      }
                    },
                    "configResourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Web/sites/config', parameters('appName'), parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the site config."
                      }
                    },
                    "configResourceGroup": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group the site config was deployed into."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "siteName": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the site."
              }
            },
            "siteResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Web/sites', parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the site."
              }
            },
            "siteResourceGroup": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The resource group the site was deployed into."
              }
            },
            "systemAssignedPrincipalId": {
              "type": "string",
              "value": "[if(parameters('systemAssignedIdentity'), reference(resourceId('Microsoft.Web/sites', parameters('name')), '2020-12-01', 'full').identity.principalId, '')]",
              "metadata": {
                "description": "The principal ID of the system assigned identity."
              }
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-appins', variables('appInsightsName')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', parameters('appServicePlanName'))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', parameters('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', variables('storageAccountName'))]"
      ]
    }
  ]
}
