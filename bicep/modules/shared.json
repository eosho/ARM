{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.4.1124.51302",
      "templateHash": "14021628176301937373"
    }
  },
  "parameters": {
    "environmentName": {
      "type": "string",
      "allowedValues": [
        "int",
        "dev",
        "qa",
        "prod"
      ],
      "metadata": {
        "description": "The name of the deployment environment. Used for naming convention"
      }
    },
    "projectName": {
      "type": "string",
      "defaultValue": "cust-wap",
      "metadata": {
        "description": "Name of the project. Used for naming convention"
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {
        "DeptName": "Innovation",
        "LOB": "Innovation",
        "DeployDate": "01-07-2022",
        "Deployer": "Rudi Landolt",
        "CostCenter": "IT Innovation 5001",
        "CostCode": "1000608610",
        "LegalSubEntity": "Walgreen Co",
        "Sensitivity": "Non-Sensitive",
        "SubDivision": "Innovation",
        "Department": "Innovation",
        "SenType": "Not Applicable"
      },
      "metadata": {
        "description": "Azure resource tags metadata"
      }
    },
    "sharedResourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "Name of the shared resource group."
      }
    },
    "containerRegistryName": {
      "type": "string",
      "metadata": {
        "description": "Name of the container registry."
      }
    },
    "diagnosticLogsRetentionInDays": {
      "type": "int",
      "defaultValue": 90,
      "maxValue": 90,
      "minValue": 0,
      "metadata": {
        "description": "Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
      }
    }
  },
  "variables": {
    "environmentNamingPrefix": "[if(variables('isProd'), 'prod', 'nprod')]",
    "namingPrefix": "[format('{0}-{1}', variables('environmentNamingPrefix'), parameters('projectName'))]",
    "isProd": "[equals(parameters('environmentName'), 'prod')]",
    "nonProdEnvTypeTag": {
      "EnvType": "Non-Production"
    },
    "prodEnvTypeTag": {
      "EnvType": "Production"
    },
    "resourceTags": "[union(parameters('tags'), if(variables('isProd'), variables('prodEnvTypeTag'), variables('nonProdEnvTypeTag')))]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[parameters('sharedResourceGroupName')]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[parameters('sharedResourceGroupName')]"
          },
          "tags": {
            "value": "[variables('resourceTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1124.51302",
              "templateHash": "8742862611179439016"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the Resource Group"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[deployment().location]",
              "metadata": {
                "description": "Optional. Location of the Resource Group. It uses the deployment's location when not provided."
              }
            },
            "lockLevel": {
              "type": "string",
              "defaultValue": "NotSpecified",
              "metadata": {
                "description": "Optional. Specify the type of lock."
              },
              "allowedValues": [
                "CanNotDelete",
                "NotSpecified",
                "ReadOnly"
              ]
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags of the storage account resource."
              }
            }
          },
          "variables": {
            "lockNotes": {
              "CanNotDelete": "Cannot delete resource or child resources.",
              "ReadOnly": "Cannot modify the resource or child resources."
            }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/resourceGroups",
              "apiVersion": "2021-04-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {}
            },
            {
              "condition": "[not(equals(parameters('lockLevel'), 'NotSpecified'))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "name": "[format('{0}-lock', parameters('name'))]",
              "properties": {
                "level": "[parameters('lockLevel')]",
                "notes": "[variables('lockNotes')[parameters('lockLevel')]]"
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "resourceGroupName": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the resource group"
              }
            },
            "resourceGroupResourceId": {
              "type": "string",
              "value": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the resource group"
              }
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "apimNsg",
      "resourceGroup": "[parameters('sharedResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "apimNsg"
          },
          "networkSecurityGroupSecurityRules": {
            "value": [
              {
                "name": "ClientCommunicationToAPIManagementInbound",
                "properties": {
                  "protocol": "Tcp",
                  "sourcePortRange": "*",
                  "destinationPortRange": "80",
                  "sourceAddressPrefix": "Internet",
                  "destinationAddressPrefix": "VirtualNetwork",
                  "access": "Allow",
                  "priority": 100,
                  "direction": "Inbound"
                }
              },
              {
                "name": "SecureClientCommunicationToAPIManagementInbound",
                "properties": {
                  "protocol": "Tcp",
                  "sourcePortRange": "*",
                  "destinationPortRange": "443",
                  "sourceAddressPrefix": "Internet",
                  "destinationAddressPrefix": "VirtualNetwork",
                  "access": "Allow",
                  "priority": 110,
                  "direction": "Inbound"
                }
              },
              {
                "name": "ManagementEndpointForAzurePortalAndPowershellInbound",
                "properties": {
                  "protocol": "Tcp",
                  "sourcePortRange": "*",
                  "destinationPortRange": "3443",
                  "sourceAddressPrefix": "ApiManagement",
                  "destinationAddressPrefix": "VirtualNetwork",
                  "access": "Allow",
                  "priority": 120,
                  "direction": "Inbound"
                }
              },
              {
                "name": "DependencyOnRedisCacheInbound",
                "properties": {
                  "protocol": "Tcp",
                  "sourcePortRange": "*",
                  "destinationPortRange": "6381-6383",
                  "sourceAddressPrefix": "VirtualNetwork",
                  "destinationAddressPrefix": "VirtualNetwork",
                  "access": "Allow",
                  "priority": 130,
                  "direction": "Inbound"
                }
              },
              {
                "name": "AzureInfrastructureLoadBalancer",
                "properties": {
                  "protocol": "Tcp",
                  "sourcePortRange": "*",
                  "destinationPortRange": "*",
                  "sourceAddressPrefix": "AzureLoadBalancer",
                  "destinationAddressPrefix": "VirtualNetwork",
                  "access": "Allow",
                  "priority": 180,
                  "direction": "Inbound"
                }
              },
              {
                "name": "DependencyOnAzureSQLOutbound",
                "properties": {
                  "protocol": "Tcp",
                  "sourcePortRange": "*",
                  "destinationPortRange": "1433",
                  "sourceAddressPrefix": "VirtualNetwork",
                  "destinationAddressPrefix": "Sql",
                  "access": "Allow",
                  "priority": 140,
                  "direction": "Outbound"
                }
              },
              {
                "name": "DependencyForLogToEventHubPolicyOutbound",
                "properties": {
                  "protocol": "*",
                  "sourcePortRange": "*",
                  "destinationPortRange": "5671",
                  "sourceAddressPrefix": "VirtualNetwork",
                  "destinationAddressPrefix": "EventHub",
                  "access": "Allow",
                  "priority": 150,
                  "direction": "Outbound"
                }
              },
              {
                "name": "DependencyOnRedisCacheOutbound",
                "properties": {
                  "protocol": "Tcp",
                  "sourcePortRange": "*",
                  "destinationPortRange": "6381-6383",
                  "sourceAddressPrefix": "VirtualNetwork",
                  "destinationAddressPrefix": "VirtualNetwork",
                  "access": "Allow",
                  "priority": 160,
                  "direction": "Outbound"
                }
              },
              {
                "name": "DependencyOnAzureFileShareForGitOutbound",
                "properties": {
                  "protocol": "Tcp",
                  "sourcePortRange": "*",
                  "destinationPortRange": "445",
                  "sourceAddressPrefix": "VirtualNetwork",
                  "destinationAddressPrefix": "Storage",
                  "access": "Allow",
                  "priority": 170,
                  "direction": "Outbound"
                }
              },
              {
                "name": "PublishDiagnosticLogsAndMetricsOutbound",
                "properties": {
                  "description": "APIM Logs and Metrics for consumption by admins and your IT team are all part of the management plane",
                  "protocol": "Tcp",
                  "sourcePortRange": "*",
                  "sourceAddressPrefix": "VirtualNetwork",
                  "destinationAddressPrefix": "AzureMonitor",
                  "access": "Allow",
                  "priority": 185,
                  "direction": "Outbound",
                  "destinationPortRanges": [
                    "443",
                    "12000",
                    "1886"
                  ]
                }
              },
              {
                "name": "ConnectToSmtpRelayForSendingEmailsOutbound",
                "properties": {
                  "description": "APIM features the ability to generate email traffic as part of the data plane and the management plane",
                  "protocol": "Tcp",
                  "sourcePortRange": "*",
                  "sourceAddressPrefix": "VirtualNetwork",
                  "destinationAddressPrefix": "Internet",
                  "access": "Allow",
                  "priority": 190,
                  "direction": "Outbound",
                  "destinationPortRanges": [
                    "25",
                    "587",
                    "25028"
                  ]
                }
              },
              {
                "name": "AuthenticateToAzureActiveDirectoryOutbound",
                "properties": {
                  "description": "Connect to Azure Active Directory for Developer Portal Authentication or for Oauth2 flow during any Proxy Authentication",
                  "protocol": "Tcp",
                  "sourcePortRange": "*",
                  "sourceAddressPrefix": "VirtualNetwork",
                  "destinationAddressPrefix": "AzureActiveDirectory",
                  "access": "Allow",
                  "priority": 200,
                  "direction": "Outbound",
                  "destinationPortRanges": [
                    "80",
                    "443"
                  ]
                }
              },
              {
                "name": "DependencyOnAzureStorageOutbound",
                "properties": {
                  "description": "APIM service dependency on Azure Blob and Azure Table Storage",
                  "protocol": "Tcp",
                  "sourcePortRange": "*",
                  "destinationPortRange": "443",
                  "sourceAddressPrefix": "VirtualNetwork",
                  "destinationAddressPrefix": "Storage",
                  "access": "Allow",
                  "priority": 100,
                  "direction": "Outbound"
                }
              },
              {
                "name": "PublishMonitoringLogsOutbound",
                "properties": {
                  "protocol": "Tcp",
                  "sourcePortRange": "*",
                  "destinationPortRange": "443",
                  "sourceAddressPrefix": "VirtualNetwork",
                  "destinationAddressPrefix": "AzureCloud",
                  "access": "Allow",
                  "priority": 300,
                  "direction": "Outbound"
                }
              }
            ]
          },
          "diagnosticLogsRetentionInDays": {
            "value": "[parameters('diagnosticLogsRetentionInDays')]"
          },
          "diagnosticWorkspaceId": {
            "value": ""
          },
          "tags": {
            "value": "[variables('resourceTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1124.51302",
              "templateHash": "9395828451100038334"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the Network Security Group."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "networkSecurityGroupSecurityRules": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Array of Security Rules to deploy to the Network Security Group. When not provided, an NSG including only the built-in roles will be deployed."
              }
            },
            "diagnosticStorageAccountId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic storage account."
              }
            },
            "diagnosticLogsRetentionInDays": {
              "type": "int",
              "defaultValue": 90,
              "maxValue": 365,
              "minValue": 0,
              "metadata": {
                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
              }
            },
            "diagnosticWorkspaceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic log analytics workspace."
              }
            },
            "diagnosticEventHubAuthorizationRuleId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
              }
            },
            "diagnosticEventHubName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags of the NSG resource."
              }
            },
            "logsToEnable": {
              "type": "array",
              "defaultValue": [
                "NetworkSecurityGroupEvent",
                "NetworkSecurityGroupRuleCounter"
              ],
              "allowedValues": [
                "NetworkSecurityGroupEvent",
                "NetworkSecurityGroupRuleCounter"
              ],
              "metadata": {
                "description": "Optional. The name of logs that will be streamed."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "diagnosticsLogs",
                "count": "[length(parameters('logsToEnable'))]",
                "input": {
                  "category": "[parameters('logsToEnable')[copyIndex('diagnosticsLogs')]]",
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              }
            ]
          },
          "resources": [
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2021-02-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "copy": [
                  {
                    "name": "securityRules",
                    "count": "[length(parameters('networkSecurityGroupSecurityRules'))]",
                    "input": {
                      "name": "[parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].name]",
                      "properties": {
                        "description": "[if(contains(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties, 'description'), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.description, '')]",
                        "protocol": "[parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.protocol]",
                        "sourcePortRange": "[if(contains(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties, 'sourcePortRange'), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.sourcePortRange, '')]",
                        "destinationPortRange": "[if(contains(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties, 'destinationPortRange'), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationPortRange, '')]",
                        "sourceAddressPrefix": "[if(contains(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties, 'sourceAddressPrefix'), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.sourceAddressPrefix, '')]",
                        "destinationAddressPrefix": "[if(contains(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties, 'destinationAddressPrefix'), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationAddressPrefix, '')]",
                        "access": "[parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.access]",
                        "priority": "[int(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.priority)]",
                        "direction": "[parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.direction]",
                        "sourcePortRanges": "[if(contains(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties, 'sourcePortRanges'), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.sourcePortRanges, null())]",
                        "destinationPortRanges": "[if(contains(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties, 'destinationPortRanges'), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationPortRanges, null())]",
                        "sourceAddressPrefixes": "[if(contains(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties, 'sourceAddressPrefixes'), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.sourceAddressPrefixes, null())]",
                        "destinationAddressPrefixes": "[if(contains(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties, 'destinationAddressPrefixes'), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationAddressPrefixes, null())]",
                        "sourceApplicationSecurityGroups": "[if(and(contains(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties, 'sourceApplicationSecurityGroupIds'), not(empty(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.sourceApplicationSecurityGroupIds))), concat(createArray(), array(json(format('{{\"id\": \"{0}\", \"location\": \"{1}\"}}', parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.sourceApplicationSecurityGroupIds[0], parameters('location'))))), null())]",
                        "destinationApplicationSecurityGroups": "[if(and(contains(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties, 'destinationApplicationSecurityGroupIds'), not(empty(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationApplicationSecurityGroupIds))), concat(createArray(), array(json(format('{{\"id\": \"{0}\", \"location\": \"{1}\"}}', parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationApplicationSecurityGroupIds[0], parameters('location'))))), null())]"
                      }
                    }
                  }
                ]
              }
            },
            {
              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('name'))]",
              "name": "[format('{0}-diagnosticSettings', parameters('name'))]",
              "properties": {
                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                "logs": "[variables('diagnosticsLogs')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "networkSecurityGroupResourceGroup": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The resource group the network security group was deployed into"
              }
            },
            "networkSecurityGroupResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the network security group"
              }
            },
            "networkSecurityGroupName": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the network security group"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', parameters('sharedResourceGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-vnet-01', variables('namingPrefix'))]",
      "resourceGroup": "[parameters('sharedResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "addressPrefixes": {
            "value": [
              "10.0.0.0/16"
            ]
          },
          "name": {
            "value": "[format('{0}-vnet-01', variables('namingPrefix'))]"
          },
          "subnets": {
            "value": [
              {
                "name": "ApiManagementSubnet",
                "addressPrefix": "10.0.0.0/24",
                "networkSecurityGroupName": "apimNsg"
              },
              {
                "name": "sharedSubnet",
                "addressPrefix": "10.0.1.0/24",
                "serviceEndpoints": [
                  "Microsoft.Sql",
                  "Microsoft.Storage",
                  "Microsoft.KeyVault"
                ],
                "privateLinkServiceNetworkPolicies": "Disabled",
                "privateEndpointNetworkPolicies": "Disabled"
              },
              {
                "name": "asev3Subnet",
                "addressPrefix": "10.0.2.0/24",
                "delegations": [
                  {
                    "name": "Microsoft.Web.hostingEnvironments",
                    "properties": {
                      "serviceName": "Microsoft.Web/hostingEnvironments"
                    }
                  }
                ],
                "privateEndpointNetworkPolicies": "Enabled",
                "privateLinkServiceNetworkPolicies": "Enabled"
              }
            ]
          },
          "diagnosticLogsRetentionInDays": {
            "value": "[parameters('diagnosticLogsRetentionInDays')]"
          },
          "workspaceId": {
            "value": ""
          },
          "tags": {
            "value": "[variables('resourceTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1124.51302",
              "templateHash": "17576897416067486656"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The Virtual Network (vNet) Name."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "addressPrefixes": {
              "type": "array",
              "metadata": {
                "description": "Required. An Array of 1 or more IP Address Prefixes for the Virtual Network."
              }
            },
            "subnets": {
              "type": "array",
              "minLength": 1,
              "metadata": {
                "description": "Required. An Array of subnets to deploy to the Virual Network."
              }
            },
            "dnsServers": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. DNS Servers associated to the Virtual Network."
              }
            },
            "ddosProtectionPlanId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the DDoS protection plan to assign the VNET to. If it's left blank, DDoS protection will not be configured. If it's provided, the VNET created by this template will be attached to the referenced DDoS protection plan. The DDoS protection plan can exist in the same or in a different subscription."
              }
            },
            "diagnosticLogsRetentionInDays": {
              "type": "int",
              "defaultValue": 90,
              "maxValue": 365,
              "minValue": 0,
              "metadata": {
                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
              }
            },
            "diagnosticStorageAccountId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic storage account."
              }
            },
            "workspaceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of log analytics."
              }
            },
            "eventHubAuthorizationRuleId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
              }
            },
            "eventHubName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Name of the event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "logsToEnable": {
              "type": "array",
              "defaultValue": [
                "VMProtectionAlerts"
              ],
              "allowedValues": [
                "VMProtectionAlerts"
              ],
              "metadata": {
                "description": "Optional. The name of logs that will be streamed."
              }
            },
            "metricsToEnable": {
              "type": "array",
              "defaultValue": [
                "AllMetrics"
              ],
              "allowedValues": [
                "AllMetrics"
              ],
              "metadata": {
                "description": "Optional. The name of metrics that will be streamed."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "diagnosticsLogs",
                "count": "[length(parameters('logsToEnable'))]",
                "input": {
                  "category": "[parameters('logsToEnable')[copyIndex('diagnosticsLogs')]]",
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              },
              {
                "name": "diagnosticsMetrics",
                "count": "[length(parameters('metricsToEnable'))]",
                "input": {
                  "category": "[parameters('metricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                  "timeGrain": null,
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              }
            ],
            "dnsServers_var": {
              "dnsServers": "[array(parameters('dnsServers'))]"
            },
            "ddosProtectionPlan": {
              "id": "[parameters('ddosProtectionPlanId')]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2021-03-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "copy": [
                  {
                    "name": "subnets",
                    "count": "[length(parameters('subnets'))]",
                    "input": {
                      "name": "[parameters('subnets')[copyIndex('subnets')].name]",
                      "properties": {
                        "addressPrefix": "[parameters('subnets')[copyIndex('subnets')].addressPrefix]",
                        "delegations": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'delegations'), parameters('subnets')[copyIndex('subnets')].delegations, null())]",
                        "privateEndpointNetworkPolicies": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'privateEndpointNetworkPolicies'), parameters('subnets')[copyIndex('subnets')].privateEndpointNetworkPolicies, null())]",
                        "privateLinkServiceNetworkPolicies": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'privateLinkServiceNetworkPolicies'), parameters('subnets')[copyIndex('subnets')].privateLinkServiceNetworkPolicies, null())]"
                      }
                    }
                  }
                ],
                "addressSpace": {
                  "addressPrefixes": "[parameters('addressPrefixes')]"
                },
                "ddosProtectionPlan": "[if(not(empty(parameters('ddosProtectionPlanId'))), variables('ddosProtectionPlan'), null())]",
                "dhcpOptions": "[if(not(empty(parameters('dnsServers'))), variables('dnsServers_var'), null())]",
                "enableDdosProtection": "[not(empty(parameters('ddosProtectionPlanId')))]"
              }
            },
            {
              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('workspaceId')))), not(empty(parameters('eventHubAuthorizationRuleId')))), not(empty(parameters('eventHubName'))))]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Network/virtualNetworks/{0}', parameters('name'))]",
              "name": "[format('{0}-diagnosticSettings', parameters('name'))]",
              "properties": {
                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                "workspaceId": "[if(not(empty(parameters('workspaceId'))), parameters('workspaceId'), null())]",
                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('eventHubAuthorizationRuleId'))), parameters('eventHubAuthorizationRuleId'), null())]",
                "eventHubName": "[if(not(empty(parameters('eventHubName'))), parameters('eventHubName'), null())]",
                "metrics": "[variables('diagnosticsMetrics')]",
                "logs": "[variables('diagnosticsLogs')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
              ]
            },
            {
              "copy": {
                "name": "virtualNetwork_subnets",
                "count": "[length(parameters('subnets'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-subnet-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "virtualNetworkName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[parameters('subnets')[copyIndex()].name]"
                  },
                  "addressPrefix": {
                    "value": "[parameters('subnets')[copyIndex()].addressPrefix]"
                  },
                  "addressPrefixes": {
                    "value": "[if(contains(parameters('subnets')[copyIndex()], 'addressPrefixes'), parameters('subnets')[copyIndex()].addressPrefixes, createArray())]"
                  },
                  "applicationGatewayIpConfigurations": {
                    "value": "[if(contains(parameters('subnets')[copyIndex()], 'applicationGatewayIpConfigurations'), parameters('subnets')[copyIndex()].applicationGatewayIpConfigurations, createArray())]"
                  },
                  "delegations": {
                    "value": "[if(contains(parameters('subnets')[copyIndex()], 'delegations'), parameters('subnets')[copyIndex()].delegations, createArray())]"
                  },
                  "ipAllocations": {
                    "value": "[if(contains(parameters('subnets')[copyIndex()], 'ipAllocations'), parameters('subnets')[copyIndex()].ipAllocations, createArray())]"
                  },
                  "natGatewayName": {
                    "value": "[if(contains(parameters('subnets')[copyIndex()], 'natGatewayName'), parameters('subnets')[copyIndex()].natGatewayName, '')]"
                  },
                  "networkSecurityGroupName": {
                    "value": "[if(contains(parameters('subnets')[copyIndex()], 'networkSecurityGroupName'), parameters('subnets')[copyIndex()].networkSecurityGroupName, '')]"
                  },
                  "networkSecurityGroupNameResourceGroupName": {
                    "value": "[if(contains(parameters('subnets')[copyIndex()], 'networkSecurityGroupNameResourceGroupName'), parameters('subnets')[copyIndex()].networkSecurityGroupNameResourceGroupName, resourceGroup().name)]"
                  },
                  "privateEndpointNetworkPolicies": {
                    "value": "[if(contains(parameters('subnets')[copyIndex()], 'privateEndpointNetworkPolicies'), parameters('subnets')[copyIndex()].privateEndpointNetworkPolicies, '')]"
                  },
                  "privateLinkServiceNetworkPolicies": {
                    "value": "[if(contains(parameters('subnets')[copyIndex()], 'privateLinkServiceNetworkPolicies'), parameters('subnets')[copyIndex()].privateLinkServiceNetworkPolicies, '')]"
                  },
                  "routeTableName": {
                    "value": "[if(contains(parameters('subnets')[copyIndex()], 'routeTableName'), parameters('subnets')[copyIndex()].routeTableName, '')]"
                  },
                  "serviceEndpointPolicies": {
                    "value": "[if(contains(parameters('subnets')[copyIndex()], 'serviceEndpointPolicies'), parameters('subnets')[copyIndex()].serviceEndpointPolicies, createArray())]"
                  },
                  "serviceEndpoints": {
                    "value": "[if(contains(parameters('subnets')[copyIndex()], 'serviceEndpoints'), parameters('subnets')[copyIndex()].serviceEndpoints, createArray())]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1124.51302",
                      "templateHash": "5960946094291647089"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Optional. The Name of the subnet resource."
                      }
                    },
                    "virtualNetworkName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the parent virtual network"
                      }
                    },
                    "addressPrefix": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The address prefix for the subnet."
                      }
                    },
                    "networkSecurityGroupName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The network security group to assign to the subnet"
                      }
                    },
                    "networkSecurityGroupNameResourceGroupName": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().name]",
                      "minLength": 1,
                      "metadata": {
                        "description": "Optional. Resource Group where NSGs are deployed, if different than VNET Resource Group."
                      }
                    },
                    "routeTableName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The route table to assign to the subnet"
                      }
                    },
                    "serviceEndpoints": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. The service endpoints to enable on the subnet"
                      }
                    },
                    "delegations": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. The delegations to enable on the subnet"
                      }
                    },
                    "natGatewayName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The name of the NAT Gateway to use for the subnet"
                      }
                    },
                    "privateEndpointNetworkPolicies": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "Disabled",
                        "Enabled",
                        ""
                      ],
                      "metadata": {
                        "description": "Optional. enable or disable apply network policies on private end point in the subnet."
                      }
                    },
                    "privateLinkServiceNetworkPolicies": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "Disabled",
                        "Enabled",
                        ""
                      ],
                      "metadata": {
                        "description": "Optional. enable or disable apply network policies on private link service in the subnet."
                      }
                    },
                    "addressPrefixes": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. List of address prefixes for the subnet."
                      }
                    },
                    "applicationGatewayIpConfigurations": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Application gateway IP configurations of virtual network resource."
                      }
                    },
                    "ipAllocations": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of IpAllocation which reference this subnet"
                      }
                    },
                    "serviceEndpointPolicies": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. An array of service endpoint policies."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedServiceEndpoints",
                        "count": "[length(parameters('serviceEndpoints'))]",
                        "input": {
                          "service": "[parameters('serviceEndpoints')[copyIndex('formattedServiceEndpoints')]]"
                        }
                      }
                    ]
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/virtualNetworks/subnets",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualNetworkName'), parameters('name'))]",
                      "properties": {
                        "addressPrefix": "[parameters('addressPrefix')]",
                        "networkSecurityGroup": "[if(not(empty(parameters('networkSecurityGroupName'))), createObject('id', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('networkSecurityGroupNameResourceGroupName')), 'Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroupName'))), null())]",
                        "routeTable": "[if(not(empty(parameters('routeTableName'))), createObject('id', resourceId('Microsoft.Network/routeTables', parameters('routeTableName'))), null())]",
                        "natGateway": "[if(not(empty(parameters('natGatewayName'))), createObject('id', resourceId('Microsoft.Network/natGateways', parameters('natGatewayName'))), null())]",
                        "serviceEndpoints": "[if(not(empty(variables('formattedServiceEndpoints'))), variables('formattedServiceEndpoints'), createArray())]",
                        "delegations": "[parameters('delegations')]",
                        "privateEndpointNetworkPolicies": "[if(not(empty(parameters('privateEndpointNetworkPolicies'))), parameters('privateEndpointNetworkPolicies'), null())]",
                        "privateLinkServiceNetworkPolicies": "[if(not(empty(parameters('privateLinkServiceNetworkPolicies'))), parameters('privateLinkServiceNetworkPolicies'), null())]",
                        "addressPrefixes": "[parameters('addressPrefixes')]",
                        "applicationGatewayIpConfigurations": "[parameters('applicationGatewayIpConfigurations')]",
                        "ipAllocations": "[parameters('ipAllocations')]",
                        "serviceEndpointPolicies": "[parameters('serviceEndpointPolicies')]"
                      }
                    }
                  ],
                  "outputs": {
                    "subnetResourceGroup": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group the virtual network peering was deployed into"
                      }
                    },
                    "subnetName": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the virtual network peering"
                      }
                    },
                    "subnetResourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the virtual network peering"
                      }
                    },
                    "subnetAddressPrefix": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('name'))).addressPrefix]",
                      "metadata": {
                        "description": "The address prefix for the subnet"
                      }
                    },
                    "subnetAddressPrefixes": {
                      "type": "array",
                      "value": "[if(not(empty(parameters('addressPrefixes'))), reference(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('name'))).addressPrefixes, createArray())]",
                      "metadata": {
                        "description": "List of address prefixes for the subnet"
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "virtualNetworkResourceGroup": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The resource group the virtual network was deployed into"
              }
            },
            "virtualNetworkResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the virtual network"
              }
            },
            "virtualNetworkName": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the virtual network"
              }
            },
            "subnetNames": {
              "type": "array",
              "copy": {
                "count": "[length(parameters('subnets'))]",
                "input": "[parameters('subnets')[copyIndex()].name]"
              },
              "metadata": {
                "description": "The names of the deployed subnets"
              }
            },
            "subnetResourceIds": {
              "type": "array",
              "copy": {
                "count": "[length(parameters('subnets'))]",
                "input": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('name'), parameters('subnets')[copyIndex()].name)]"
              },
              "metadata": {
                "description": "The resource IDs of the deployed subnets"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('sharedResourceGroupName')), 'Microsoft.Resources/deployments', 'apimNsg')]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', parameters('sharedResourceGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[parameters('containerRegistryName')]",
      "resourceGroup": "[parameters('sharedResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[parameters('containerRegistryName')]"
          },
          "acrSku": {
            "value": "Premium"
          },
          "publicNetworkAccess": {
            "value": "Enabled"
          },
          "networkRuleBypassOptions": {
            "value": "AzureServices"
          },
          "diagnosticWorkspaceId": {
            "value": ""
          },
          "diagnosticLogsRetentionInDays": {
            "value": "[parameters('diagnosticLogsRetentionInDays')]"
          },
          "tags": {
            "value": "[variables('resourceTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1124.51302",
              "templateHash": "530456214102002150"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "maxLength": 50,
              "minLength": 5,
              "metadata": {
                "description": "Required. Name of your Azure container registry"
              }
            },
            "acrAdminUserEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Enable admin user that have push / pull permission to the registry."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "acrSku": {
              "type": "string",
              "defaultValue": "Basic",
              "allowedValues": [
                "Basic",
                "Standard",
                "Premium"
              ],
              "metadata": {
                "description": "Optional. Tier of your Azure container registry."
              }
            },
            "quarantinePolicyStatus": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The value that indicates whether the policy is enabled or not."
              }
            },
            "trustPolicyStatus": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The value that indicates whether the policy is enabled or not."
              }
            },
            "retentionPolicyStatus": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The value that indicates whether the policy is enabled or not."
              }
            },
            "retentionPolicyDays": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The number of days to retain an untagged manifest after which it gets purged."
              }
            },
            "dataEndpointEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Enable a single data endpoint per region for serving data. Not relevant in case of disabled public access."
              }
            },
            "publicNetworkAccess": {
              "type": "string",
              "defaultValue": "Enabled",
              "metadata": {
                "description": "Optional. Whether or not public network access is allowed for the container registry. - Enabled or Disabled"
              }
            },
            "networkRuleBypassOptions": {
              "type": "string",
              "defaultValue": "AzureServices",
              "metadata": {
                "description": "Optional. Whether to allow trusted Azure services to access a network restricted registry. Not relevant in case of public access. - AzureServices or None"
              }
            },
            "systemAssignedIdentity": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Enables system assigned managed identity on the resource."
              }
            },
            "userAssignedIdentities": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. The ID(s) to assign to the resource."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "logsToEnable": {
              "type": "array",
              "defaultValue": [
                "ContainerRegistryRepositoryEvents",
                "ContainerRegistryLoginEvents"
              ],
              "allowedValues": [
                "ContainerRegistryRepositoryEvents",
                "ContainerRegistryLoginEvents"
              ],
              "metadata": {
                "description": "Optional. The name of logs that will be streamed."
              }
            },
            "metricsToEnable": {
              "type": "array",
              "defaultValue": [
                "AllMetrics"
              ],
              "allowedValues": [
                "AllMetrics"
              ],
              "metadata": {
                "description": "Optional. The name of metrics that will be streamed."
              }
            },
            "diagnosticLogsRetentionInDays": {
              "type": "int",
              "defaultValue": 365,
              "maxValue": 365,
              "minValue": 0,
              "metadata": {
                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
              }
            },
            "diagnosticStorageAccountId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic storage account."
              }
            },
            "diagnosticWorkspaceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic log analytics workspace."
              }
            },
            "diagnosticEventHubAuthorizationRuleId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
              }
            },
            "diagnosticEventHubName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "diagnosticsLogs",
                "count": "[length(parameters('logsToEnable'))]",
                "input": {
                  "category": "[parameters('logsToEnable')[copyIndex('diagnosticsLogs')]]",
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              },
              {
                "name": "diagnosticsMetrics",
                "count": "[length(parameters('metricsToEnable'))]",
                "input": {
                  "category": "[parameters('metricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                  "timeGrain": null,
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              }
            ],
            "identityType": "[if(parameters('systemAssignedIdentity'), if(not(empty(parameters('userAssignedIdentities'))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
            "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]"
          },
          "resources": [
            {
              "type": "Microsoft.ContainerRegistry/registries",
              "apiVersion": "2020-11-01-preview",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "identity": "[variables('identity')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "[parameters('acrSku')]"
              },
              "properties": {
                "adminUserEnabled": "[parameters('acrAdminUserEnabled')]",
                "policies": {
                  "quarantinePolicy": {
                    "status": "[if(empty(parameters('quarantinePolicyStatus')), null(), parameters('quarantinePolicyStatus'))]"
                  },
                  "trustPolicy": {
                    "type": "Notary",
                    "status": "[if(empty(parameters('trustPolicyStatus')), null(), parameters('trustPolicyStatus'))]"
                  },
                  "retentionPolicy": {
                    "days": "[if(empty(parameters('retentionPolicyDays')), null(), int(parameters('retentionPolicyDays')))]",
                    "status": "[if(empty(parameters('retentionPolicyStatus')), null(), parameters('retentionPolicyStatus'))]"
                  }
                },
                "dataEndpointEnabled": "[parameters('dataEndpointEnabled')]",
                "publicNetworkAccess": "[parameters('publicNetworkAccess')]",
                "networkRuleBypassOptions": "[parameters('networkRuleBypassOptions')]"
              }
            },
            {
              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('name'))]",
              "name": "[format('{0}-diagnosticSettings', parameters('name'))]",
              "properties": {
                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                "metrics": "[variables('diagnosticsMetrics')]",
                "logs": "[variables('diagnosticsLogs')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ContainerRegistry/registries', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "acrName": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The Name of the Azure container registry."
              }
            },
            "acrLoginServer": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('name')), '2019-05-01').loginServer]",
              "metadata": {
                "description": "The reference to the Azure container registry."
              }
            },
            "acrResourceGroup": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The name of the Azure container registry."
              }
            },
            "acrResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.ContainerRegistry/registries', parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the Azure container registry."
              }
            },
            "systemAssignedPrincipalId": {
              "type": "string",
              "value": "[if(and(parameters('systemAssignedIdentity'), contains(reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('name')), '2020-11-01-preview', 'full').identity, 'principalId')), reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('name')), '2020-11-01-preview', 'full').identity.principalId, '')]",
              "metadata": {
                "description": "The principal ID of the system assigned identity."
              }
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', parameters('sharedResourceGroupName'))]"
      ]
    }
  ]
}