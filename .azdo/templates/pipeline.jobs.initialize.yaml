parameters:
  vmImage: ''
  poolName: ''
  serviceConnection: ''
  resourceProviders: ''
  resourceProviderFeatures: ''

jobs:
- job: ResourceProviders
  displayName: Register resource providers
  pool:
    ${{ if ne(parameters.vmImage, '') }}:
      vmImage: ${{ parameters.vmImage }}
    ${{ if ne(parameters.poolName, '') }}:
      name: ${{ parameters.poolName }}
  steps:
  - checkout: none
  - task: AzurePowerShell@5
    displayName: Register resource providers
    inputs:
      azureSubscription: $(serviceConnection)
      azurePowerShellVersion: 'Latest'
      ScriptType: 'InlineScript'
      Inline: |
        $resourceProviders = ConvertFrom-Json '$(resourceProviders)'
        foreach ($resourceProvider in $resourceProviders) {
          if ((Get-AzResourceProvider -ProviderNamespace $resourceProvider).RegistrationState -contains 'NotRegistered' ) {
            try {
              Write-Output "Registering ResourceProvider - $resourceProvider"
              Register-AzResourceProvider -ProviderNamespace $resourceProvider
            } catch {
              Write-Error "Registering ResourceProvider failed - $resourceProvider. Details: $($_.Exception.Message)" -ErrorAction SilentlyContinue
            }
          } else {
            Write-Output "ResourceProvider - $resourceProvider is already registered"
          }
        }

  - task: AzurePowerShell@5
    displayName: Register resource provider features
    inputs:
      azureSubscription: $(serviceConnection)
      azurePowerShellVersion: 'Latest'
      ScriptType: 'InlineScript'
      Inline: |
        $features = ConvertFrom-Json '$(resourceProviderFeatures)'
        foreach ($feature in $features) {
          if ((Get-AzProviderFeature -FeatureName $feature.FeatureName -ProviderNamespace $feature.ProviderNamespace).RegistrationState -contains 'NotRegistered' ) {
            try {
              Write-PipelineLogger -LogType "info" -Message "Registering ProviderFeature: $($feature.FeatureName)"
              Register-AzProviderFeature -FeatureName $feature.FeatureName -ProviderNamespace $feature.ProviderNamespace
            } catch {
              Write-PipelineLogger -LogType "error" -Message "Registering ProviderFeature: $($feature.FeatureName) failed with error: $($_.Exception.Message)"
            }
          } else {
            Write-Output "ResourceProvider feature - $($feature.FeatureName) is already registered"
          }
        }
