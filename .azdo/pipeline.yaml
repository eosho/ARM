name: $(projectName)-$(projectVersion)-${{ parameters.environment }}-$(Date:yyyy-MM-dd) [$(BuildId)]

parameters:
  # Required. The deployment environment. Also helps inject the appropriate environment variables.
  - name: environment
    displayName: Environment Name
    type: string
    default: int
    values:
      - int
      - dev
      - perf
      - prod

  # Optional. Set if you are working in a greenfield environment and need your subscription configured
  - name: initialize
    displayName: Initialize Subscription
    type: boolean
    default: false
    values:
      - true
      - false

  # Optional. Set to true if you want to trigger a CCP deployment as part of your deployment
  - name: invokeCCPPipeline
    displayName: Trigger CCP Pipeline
    type: boolean
    default: false
    values:
      - true
      - false

  # Only required if InvokeCCPPipeline is set to true
  - name: invokeCCPArgs
    displayName: Values needed for CCP
    type: object
    default:
      - resource: ase
        templateParameterFilePath: '$(bicepDirectory)/Microsoft.Web/hostingEnvironments/app-service-environment-parameters-full.json'
      - resource: acr
        templateParameterFilePath: '$(bicepDirectory)/Microsoft.ContainerRegistry/registries/acr-parameters-full.json'

  # Optional. If set to none, the deployment will not be validated
  # - If set to validate or validateWhatIf, the deployment will be validated
  - name: validateDeploymentType
    displayName: Validate Deployment
    type: string
    default: none
    values:
      - none
      - validate
      - validateWhatIf

  # Optional. If set to true, the resource group will be deleted.
  - name: teardownEnvironment
    displayName: Destroy Environment
    type: boolean
    default: false
    values:
      - true
      - false

variables:
# Global pipeline variables
- template: pipeline.variables.yaml

# Environment specific pipeline variables - injects serviceConnection, naming conventions... etc if any.
- ${{ if eq(parameters.environment, 'int') }}:
  - template: /.config/int.config.yaml
- ${{ if eq(parameters.environment, 'dev') }}:
  - template: /.config/dev.config.yaml
- ${{ if eq(parameters.environment, 'prod') }}:
  - template: /.config/prod.config.yaml

trigger: none

stages:

  # ######## BUILD ########
  # Configures Bicep on the hosted agent
  # Compiles Bicep and preps all build artifacts for consumption by the pipeline.

  - stage: Build
    dependsOn: []
    condition: eq('${{ parameters.teardownEnvironment }}', 'false')
    jobs:
      - template: templates/pipeline.jobs.build.yaml

  # ######## INITIALIZATION ########
  # Configures the subscription - sets up resource providers and features
  # Can be expanded to include other initialization steps

  - stage: Initialize
    condition: eq('${{ parameters.Initialize }}', 'true')
    jobs:
      - template: templates/pipeline.jobs.initialize.yaml
        parameters:
          serviceConnection: '$(serviceConnection)'
          resourceProviders: '$(resourceProviders)'
          resourceProviderFeatures: '$(resourceProviderFeatures)'

  # ######## INVOKE CCP DEPLOYMENT ########
  # Triggers the CCP deployment pipeline to deploy the selected components

  - stage: InvokeCCP
    dependsOn:
      - Build
      - Initialize
    condition: |
      and
      (
        eq('${{ parameters.teardownEnvironment }}', 'false'),
        eq('${{ parameters.invokeCCPPipeline }}', 'true')
      )
    jobs:
      - ${{ each value in parameters.invokeCCPArgs  }}:
        - template: templates/pipeline.jobs.invokeccp.yaml
          parameters:
            serviceConnection: ${{ value.serviceConnection }}
            templateParameterFilePath: $(serviceConnection)
            resource: ${{ value.resource }}

  # ######## DEPLOYMENT ########
  # Deploys main.bicep template to stand up entire environment + configuration
  # Optionally depends on InvokeCCP stage

  # Deploy MSFT Internal Azure
  - stage: DeployINTInfra
    displayName: Deploy INT
    dependsOn:
      - Build
      - Initialize
      - InvokeCCP
    condition: |
      and
      (
        eq('${{ parameters.teardownEnvironment }}', 'false'),
        in(dependencies.InvokeCCP.result, 'succeeded', 'Skipped'),
        eq('${{ parameters.environment }}', 'int')
      )
    jobs:
      - template: templates/pipeline.jobs.deploy.yaml
        parameters:
          resourceGroupName: '$(resourceGroupName)'
          location: '$(location)'
          prefix: '$(prefix)'
          vmImage: '$(vmImage)'
          serviceConnection: '$(serviceConnection)'
          validateDeploymentType: '${{ parameters.validateDeploymentType }}'
          templateParameterFilePath: "$(bicepDirectory)/main.parameters.int.json"

  # Deploy Dev environment
  - stage: DeployDEVInfra
    displayName: Deploy DEV
    dependsOn:
      - Build
      - Initialize
      - InvokeCCP
    condition: |
      and
      (
        eq('${{ parameters.teardownEnvironment }}', 'false'),
        in(dependencies.InvokeCCP.result, 'succeeded', 'Skipped'),
        eq('${{ parameters.environment }}', 'dev')
      )
    jobs:
      - template: templates/pipeline.jobs.deploy.yaml
        parameters:
          resourceGroupName: '$(resourceGroupName)'
          location: '$(location)'
          prefix: '$(prefix)'
          vmImage: '$(vmImage)'
          serviceConnection: '$(serviceConnection)'
          validateDeploymentType: '${{ parameters.validateDeploymentType }}'
          templateParameterFilePath: "$(bicepDirectory)/main.parameters.dev.json"

  # Deploy Perf environment
  - stage: DeployPERFInfra
    displayName: Deploy PERF
    dependsOn:
      - Build
      - Initialize
      - InvokeCCP
    condition: |
      and
      (
        eq('${{ parameters.teardownEnvironment }}', 'false'),
        in(dependencies.InvokeCCP.result, 'succeeded', 'Skipped'),
        eq('${{ parameters.environment }}', 'perf')
      )
    jobs:
      - template: templates/pipeline.jobs.deploy.yaml
        parameters:
          resourceGroupName: '$(resourceGroupName)'
          location: '$(location)'
          prefix: '$(prefix)'
          vmImage: '$(vmImage)'
          serviceConnection: '$(serviceConnection)'
          validateDeploymentType: '${{ parameters.validateDeploymentType }}'
          templateParameterFilePath: "$(bicepDirectory)/main.parameters.perf.json"

  # Deploy Prod environment
  - stage: DeployPRODInfra
    displayName: Deploy PROD
    dependsOn:
      - Build
      - Initialize
      - InvokeCCP
    condition: |
      and
      (
        eq('${{ parameters.teardownEnvironment }}', 'false'),
        in(dependencies.InvokeCCP.result, 'succeeded', 'Skipped'),
        eq('${{ parameters.environment }}', 'prod')
      )
    jobs:
      - template: templates/pipeline.jobs.deploy.yaml
        parameters:
          resourceGroupName: '$(resourceGroupName)'
          location: '$(location)'
          prefix: '$(prefix)'
          vmImage: '$(vmImage)'
          serviceConnection: '$(serviceConnection)'
          validateDeploymentType: '${{ parameters.validateDeploymentType }}'
          templateParameterFilePath: "$(bicepDirectory)/main.parameters.prod.json"

  # ######## TEARDOWN ########
  # Cleans up the resources and deletes the deployment resource group
  # Also.. removes resource locks, if any.

  - stage: TeardownEnv
    dependsOn: []
    condition: |
      and
        (
          eq('${{ parameters.validateDeploymentType }}', 'false'),
          eq('${{ parameters.teardownEnvironment }}', 'true')
        )
    jobs:
      - template: templates/pipeline.jobs.teardown.yaml
        parameters:
          resourceGroupName: '$(resourceGroupName)'
          vmImage: '$(vmImage)'
          serviceConnection: '$(serviceConnection)'
          subscriptionId: '$(subscriptionId)'
          environmentName: '${{ parameters.environment }}'
