name: $(projectName)-$(projectVersion)-${{ parameters.environment }}-$(Date:yyyy-MM-dd) [$(BuildId)]

parameters:
  - name: environment
    displayName: Environment Name
    type: string
    default: int
    values:
      - int
      - dev
      - perf
      - prod

  - name: initialize
    displayName: Initialize Subscription
    type: boolean
    default: false
    values:
      - true
      - false

  - name: invokeCCPPipeline
    displayName: Trigger CCP Pipeline
    type: boolean
    default: false
    values:
      - true
      - false

  - name: invokeCCPArgs
    displayName: Values needed for CCP
    type: object
    default:
      ase:
        - serviceConnection: ''
        - templateParameterFilePath: ''
        - displayName: 'Deploy_ASE'
      acr:
        - serviceConnection: ''
        - templateParameterFilePath: ''
        - displayName: 'Deploy_ACR'

  - name: validateDeploymentType
    displayName: Validate Deployment
    type: string
    default: none
    values:
      - none
      - validate
      - validateWhatIf

  - name: teardownEnvironment
    displayName: Destroy Environment
    type: boolean
    default: false
    values:
      - true
      - false

variables:
- template: pipeline.variables.yaml

- ${{ if eq(parameters.environment, 'int') }}:
  - template: /.config/int.config.yaml
- ${{ if eq(parameters.environment, 'dev') }}:
  - template: /.config/dev.config.yaml
- ${{ if eq(parameters.environment, 'prod') }}:
  - template: /.config/prod.config.yaml

trigger: none

stages:

  # ######## BUILD ########
  # Configures Bicep on the hosted agent
  # Compiles Bicep and preps all build artifacts for consumption by the pipeline.

  - stage: Build
    dependsOn: []
    condition: eq('${{ parameters.teardownEnvironment }}', 'false')
    jobs:
      - template: templates/pipeline.jobs.pre.yaml

  # ######## INITIALIZATION ########
  # Configures the subscription - sets up resource providers and features
  # Can be expanded to include other initialization steps

  - stage: Initialize
    condition: eq('${{ parameters.Initialize }}', 'true')
    jobs:
      - template: templates/pipeline.jobs.initialize.yaml
        parameters:
          serviceConnection: '$(serviceConnection)'
          resourceProviders: '$(resourceProviders)'
          resourceProviderFeatures: '$(resourceProviderFeatures)'

  # ######## INVOKE CCP DEPLOYMENT ########
  # Triggers the CCP deployment pipeline to deploy the selected components

  - stage: InvokeCCP
    dependsOn:
      - Build
      - Initialize
    condition: |
      and
      (
        eq('${{ parameters.teardownEnvironment }}', 'false'),
        eq('${{ parameters.invokeCCPPipeline }}', 'true')
      )
    jobs:
      - ${{ each value in parameters.invokeCCPArgs  }}:
        - template: templates/pipeline.jobs.invokeccp.yaml
          parameters:
            serviceConnection: ${{ value.serviceConnection }}
            templateParameterFilePath: ${{ value.templateParameterFilePath }}
            displayName: ${{ value.displayName }}

  # ######## DEPLOYMENT ########
  # Deploys main.bicep template to stand up entire environment + configuration
  # Optionally depends on InvokeCCP stage

  - stage: DeployINTInfra
    displayName: Deploy INT
    dependsOn:
      - Build
      - Initialize
      - InvokeCCP
    condition: |
      and
      (
        eq('${{ parameters.teardownEnvironment }}', 'false'),
        in(dependencies.InvokeCCP.result, 'succeeded', 'Skipped'),
        eq('${{ parameters.environment }}', 'int')
      )
    jobs:
      - template: templates/pipeline.jobs.infra.yaml
        parameters:
          resourceGroupName: '$(resourceGroupName)'
          location: '$(location)'
          prefix: '$(prefix)'
          vmImage: '$(vmImage)'
          serviceConnection: '$(serviceConnection)'
          validateDeploymentType: '${{ parameters.validateDeploymentType }}'
          templateParameterFilePath: "$(bicepDirectory)/main.parameters.int.json"

  - stage: DeployDEVInfra
    displayName: Deploy DEV
    dependsOn:
      - Build
      - Initialize
      - InvokeCCP
    condition: |
      and
      (
        eq('${{ parameters.teardownEnvironment }}', 'false'),
        in(dependencies.InvokeCCP.result, 'succeeded', 'Skipped'),
        eq('${{ parameters.environment }}', 'dev')
      )
    jobs:
      - template: templates/pipeline.jobs.infra.yaml
        parameters:
          resourceGroupName: '$(resourceGroupName)'
          location: '$(location)'
          prefix: '$(prefix)'
          vmImage: '$(vmImage)'
          serviceConnection: '$(serviceConnection)'
          validateDeploymentType: '${{ parameters.validateDeploymentType }}'
          templateParameterFilePath: "$(bicepDirectory)/main.parameters.dev.json"

  - stage: DeployPERFInfra
    displayName: Deploy PERF
    dependsOn:
      - Build
      - Initialize
      - InvokeCCP
    condition: |
      and
      (
        eq('${{ parameters.teardownEnvironment }}', 'false'),
        in(dependencies.InvokeCCP.result, 'succeeded', 'Skipped'),
        eq('${{ parameters.environment }}', 'perf')
      )
    jobs:
      - template: templates/pipeline.jobs.infra.yaml
        parameters:
          resourceGroupName: '$(resourceGroupName)'
          location: '$(location)'
          prefix: '$(prefix)'
          vmImage: '$(vmImage)'
          serviceConnection: '$(serviceConnection)'
          validateDeploymentType: '${{ parameters.validateDeploymentType }}'
          templateParameterFilePath: "$(bicepDirectory)/main.parameters.perf.json"

  - stage: DeployPRODInfra
    displayName: Deploy PROD
    dependsOn:
      - Build
      - Initialize
      - InvokeCCP
    condition: |
      and
      (
        eq('${{ parameters.teardownEnvironment }}', 'false'),
        in(dependencies.InvokeCCP.result, 'succeeded', 'Skipped'),
        eq('${{ parameters.environment }}', 'prod')
      )
    jobs:
      - template: templates/pipeline.jobs.infra.yaml
        parameters:
          resourceGroupName: '$(resourceGroupName)'
          location: '$(location)'
          prefix: '$(prefix)'
          vmImage: '$(vmImage)'
          serviceConnection: '$(serviceConnection)'
          validateDeploymentType: '${{ parameters.validateDeploymentType }}'
          templateParameterFilePath: "$(bicepDirectory)/main.parameters.prod.json"

  - stage: TeardownEnv
    dependsOn: []
    condition: |
      and
        (
          eq('${{ parameters.validateDeploymentType }}', 'false'),
          eq('${{ parameters.teardownEnvironment }}', 'true')
        )
    jobs:
      - template: templates/pipeline.jobs.teardown.yaml
        parameters:
          resourceGroupName: '$(resourceGroupName)'
          vmImage: '$(vmImage)'
          serviceConnection: '$(serviceConnection)'
          subscriptionId: '$(subscriptionId)'
          environmentName: '${{ parameters.environment }}'
