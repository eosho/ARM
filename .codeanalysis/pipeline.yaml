parameters:
- name: pesterScenarios
  type: object
  default:
  - qa
  - integration
  - common

variables:
# Global pipeline variables
- template: ../.azdo/pipeline.variables.yaml

trigger:
  batch: true
  branches:
    include:
    - '*'
  paths:
    exclude:
    - README.md
    - .azdo/*
    - .config/*
    - docs/*
    - external/*
    - src/*

jobs:
  - job: Tests
    displayName: 'Tests'
    pool:
      vmImage: "ubuntu-latest"
    steps:
    - task: Bash@3
      displayName: 'Install bicep CLI'
      inputs:
        targetType: 'inline'
        script: |
          az bicep install

    - ${{ each scenario in parameters.pesterScenarios }}:
        - task: AzurePowerShell@5
          displayName: Invoke [${{ scenario }}] Pester tests
          condition: succeededOrFailed()
          inputs:
            azureSubscription: 'azureInternal'
            ScriptType: 'InlineScript'
            Inline: |
              # Invoke Pester tests
              Install-Module Pester -Force -ErrorAction Stop -Scope CurrentUser

              Invoke-Pester -Configuration @{
                Run        = @{
                  Path = "$(baseWorkingDirectory)/tests/${{ scenario }}/${{ scenario }}.Tests.ps1"
                }
                TestResult = @{
                  TestSuiteName = '{{ scenario }} Tests'
                  OutputPath    = '$(baseWorkingDirectory)/${{ scenario }}/${{ scenario }}-testResults.xml'
                  OutputFormat  = 'NUnitXml'
                  Enabled       = $true
                }
                Output     = @{
                  Verbosity = 'Detailed'
                }
              }
            azurePowerShellVersion: 'LatestVersion'

    - task: PublishTestResults@2
      displayName: Publish Pester test results
      condition: succeededOrFailed()
      inputs:
        testRunTitle: 'Pester test results'
        testResultsFormat: 'NUnit'
        testResultsFiles: '**/*-testResults.xml'
        mergeTestResults: true
        failTaskOnFailedTests: true
        continueOnError: false
        condition: succeededOrFailed()

    # - task: Bash@3
    #   displayName: 'Compile main.bicep'
    #   inputs:
    #     targetType: 'inline'
    #     script: |
    #       az bicep build --file $(bicepDirectory)/main.bicep --outfile $(bicepDirectory)/main.bicep.json

    - task: CopyFiles@2
      displayName: 'Stage deployment files'
      inputs:
        SourcesFolder:
        Contents: |
          **/bicep/modules/main**
        TargetFolder: '$(Build.ArtifactStagingDirectory)'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish artifacts'
      inputs:
        artifactName: 'drop'
